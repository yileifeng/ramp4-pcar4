import{bT as O,bU as z,bE as C,aB as A,b1 as G,O as R,bu as Y,s as U}from"./main-asQ7SttR.js";import{r as v}from"./TimeExtent-tqAWy-Dv.js";import{j as D}from"./quantizationUtils-DF8Sg9eJ.js";import{l as S,u as V}from"./heatmapUtils-OBh9qWh9.js";import{$ as B}from"./utils-B34IjRvs.js";import{m as E,B as L}from"./utils-7lSE2VeG.js";let c=null;const P=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function _(e,t,n){return e.x<0?e.x+=t:e.x>n&&(e.x-=t),e}function te(e,t,n,i){const r=O(n)?z(n):null,s=r?Math.round((r.valid[1]-r.valid[0])/t.scale[0]):null;return e.map(l=>{const a=new C(l.geometry);return D(t,a,a),l.geometry=r?_(a,s??0,i[0]):a,l})}function ne(e,t=18,n,i,r){const s=new Float64Array(i*r);t=Math.round(Y(t));let l=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY;const I=V(n);for(const{geometry:p,attributes:F}of e){const{x:g,y:f}=p,$=Math.max(0,g-t),N=Math.max(0,f-t),M=Math.min(r,f+t),b=Math.min(i,g+t),h=+I(F);for(let m=N;m<M;m++)for(let d=$;d<b;d++){const w=m*i+d,x=S(d-g,m-f,t)*h,u=s[w]+=x;l=Math.min(l,u),a=Math.max(a,u)}}return{min:l,max:a}}function k(e){const t=P.exec(e);if(!t)return null;const{hh:n,mm:i,ss:r,ms:s}=t.groups;return Number(n)*v.hours+Number(i)*v.minutes+Number(r)*v.seconds+Number(s||0)}async function ie(e,t,n=!0){if(!t)return[];const{field:i,field2:r,field3:s,fieldDelimiter:l,fieldInfos:a,timeZone:I}=e,p=i&&a?.find(u=>u.name.toLowerCase()===i.toLowerCase()),F=!!p&&A(p),g=!!p&&B(p),f=e.valueExpression,$=e.normalizationType,N=e.normalizationField,M=e.normalizationTotal,b=[],h=e.viewInfoParams;let m=null,d=null;if(f){if(!c){const{arcadeUtils:u}=await G();c=u}c.hasGeometryOperations(f)&&await c.enableGeometryOperations(),m=c.createFunction(f),d=h?c.getViewInfo({viewingMode:h.viewingMode,scale:h.scale,spatialReference:new R(h.spatialReference)}):null}const w=e.fieldInfos,x=!(t[0]&&"declaredClass"in t[0]&&t[0].declaredClass==="esri.Graphic")&&w?{fields:w}:null;return t.forEach(u=>{const y=u.attributes;let o;if(f){const T=x?{...u,layer:x}:u,j=c.createExecContext(T,d,I);o=c.executeFunction(m,j)}else y&&(o=y[i],r?(o=`${E(o)}${l}${E(y[r])}`,s&&(o=`${o}${l}${E(y[s])}`)):typeof o=="string"&&n&&(g?o=o?new Date(o).getTime():null:F&&(o=o?k(o):null)));if($&&typeof o=="number"&&isFinite(o)){const T=y&&parseFloat(y[N]);o=L(o,$,T,M)}b.push(o)}),b}function re(e){const t=e.field,n=e.normalizationType,i=e.normalizationField;let r;return n==="field"?r="(NOT "+i+" = 0)":n!=="log"&&n!=="natural-log"&&n!=="square-root"||(r=`(${t} > 0)`),r}function oe(e,t,n){const i=t!=null?e+" >= "+t:"",r=n!=null?e+" <= "+n:"";let s="";return s=i&&r?q(i,r):i||r,s?"("+s+")":""}function q(e,t){let n=e??"";return t!=null&&t&&(n=n?"("+n+") AND ("+t+")":t),n}function se(e,t){if(e&&e.spatialRelationship!=="intersects")return new U(t,"Only 'intersects' spatialRelationship is supported for featureFilter")}function le(e,t,n){const i=Z({layer:e,fields:t});if(i.length)return new U(n,"Unknown fields: "+i.join(", ")+". You can only use fields defined in the layer schema");const r=H({layer:e,fields:t});return r.length?new U(n,"Unsupported fields: "+r.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true"):void 0}function Z(e){const t=e.layer;return e.fields.filter(n=>!t.getField(n))}function H(e){const t=e.layer;return e.fields.filter(n=>{const i=t.getFieldUsageInfo(n);return!i||!i.supportsStatistics})}export{re as F,k as I,se as M,oe as N,le as T,q as U,ie as b,ne as w,te as x};
