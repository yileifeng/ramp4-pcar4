const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./ElevationQuery-ZG-ppq5d.js","./main-asQ7SttR.js","./preload-helper-ExcqyqRp.js","./main-DmIi68wH.css","./projection-G6EI4E6A.js","./projectBuffer-Cx7kBt8y.js","./TileKey-DZd6gJy7.js"])))=>i.map(i=>d[i]);
import{_ as d}from"./preload-helper-ExcqyqRp.js";import{fS as _,s as g,Z as w,a4 as c,bF as V,X as m,B as s,D as l,H as y,N as T}from"./main-asQ7SttR.js";import{S as b}from"./MultiOriginJSONSupport-BgTEONJv.js";import{v as S}from"./HeightModelInfo-B7gpIaa-.js";import{f as D}from"./Layer-Bx8UpsMJ.js";import{p as $}from"./ArcGISCachedService-BKkP9ieL.js";import{l as x}from"./ArcGISService-BpCkZU1v.js";import{b as I}from"./OperationalLayer-DTkZmy-B.js";import{j as E}from"./PortalLayer-D_hkWTMK.js";import{y as L}from"./commonProperties-BAQ0_iGY.js";import{h as O}from"./WorkerHandle-B3-ZLZMC.js";import"./TimeExtent-tqAWy-Dv.js";import"./TileInfo-DFofX128.js";import"./TileKey-DZd6gJy7.js";import"./TileInfoTilemapCache-DeJSC_H0.js";import"./TilemapCache-DnOq6SNd.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache-D1fsA-w6.js";import"./MemCache-DE3T9NBz.js";import"./memoryEstimations-COo-dz1M.js";import"./layerContainerType-C5CzMsLd.js";import"./PortalItem-Nq3zGykG.js";import"./portalItemUtils-BFogiphi.js";import"./projection-G6EI4E6A.js";import"./projectBuffer-Cx7kBt8y.js";import"./ElevationInfo-C-a3Y-El.js";import"./lengthUtils-GoFDlaqZ.js";import"./workers-BJlMhhTk.js";import"./Queue-B7j4i-p3.js";import"./intl-D5myeBIL.js";class N{constructor(e,t,r,o){this._hasNoDataValues=null,this._minValue=null,this._maxValue=null,"pixelData"in e?(this.values=e.pixelData,this.width=e.width,this.height=e.height,this.noDataValue=e.noDataValue):(this.values=e,this.width=t,this.height=r,this.noDataValue=o)}get hasNoDataValues(){if(this._hasNoDataValues==null){const e=this.noDataValue;this._hasNoDataValues=this.values.includes(e)}return this._hasNoDataValues}get minValue(){return this._ensureBounds(),this._minValue}get maxValue(){return this._ensureBounds(),this._maxValue}get cachedMemory(){return this.values.byteLength+256}_ensureBounds(){if(this._minValue!=null)return;const{noDataValue:e,values:t}=this;let r=1/0,o=-1/0,h=!0;for(const n of t)n===e?this._hasNoDataValues=!0:(r=n<r?n:r,o=n>o?n:o,h=!1);h?(this._minValue=0,this._maxValue=0):(this._minValue=r,this._maxValue=o>-3e38?o:0)}}class v extends O{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,r){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},r):Promise.resolve(null)}release(){--this.ref<=0&&(p.forEach((e,t)=>{e===this&&p.delete(t)}),this.destroy())}}const p=new Map;function j(i=null){let e=p.get(i);return e||(i!=null?(e=new v(t=>i.immediate.schedule(t)),p.set(i,e)):(e=new v,p.set(null,e))),++e.ref,e}let a=class extends $(x(I(E(b(D))))){constructor(...i){super(...i),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=j()}normalizeCtorArgs(i,e){return typeof i=="string"?{url:i,...e}:i}destroy(){this._lercDecoder=_(this._lercDecoder)}readCapabilities(i,e){const t=e.capabilities&&e.capabilities.split(",").map(r=>r.toLowerCase().trim());return t?{operations:{supportsTileMap:t.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(i,e){let t=e.currentVersion;return t||(t=9.3),t}load(i){const e=i!=null?i.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{if(t.typeKeywords){for(let r=0;r<t.typeKeywords.length;r++)if(t.typeKeywords[r].toLowerCase()==="elevation 3d layer")return!0}throw new g("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},i).catch(w).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(i,e,t,r){const o=r?.signal,h={responseType:"array-buffer",signal:o},n={noDataValue:r?.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(i,e,t,r)).then(()=>c(this.getTileUrl(i,e,t),h)).then(u=>this._lercDecoder.decode(u.data,n,o)).then(u=>new N(u))}getTileUrl(i,e,t){const r=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,o=V({...this.parsedUrl.query,blankTile:!r&&null});return`${this.parsedUrl.path}/tile/${i}/${e}/${t}${o?"?"+o:""}`}async queryElevation(i,e){const{ElevationQuery:t}=await d(()=>import("./ElevationQuery-ZG-ppq5d.js"),__vite__mapDeps([0,1,2,3,4,5,6]),import.meta.url);return m(e),new t().query(this,i,e)}async createElevationSampler(i,e){const{ElevationQuery:t}=await d(()=>import("./ElevationQuery-ZG-ppq5d.js"),__vite__mapDeps([0,1,2,3,4,5,6]),import.meta.url);return m(e),new t().createSampler(this,i,e)}_fetchTileAvailability(i,e,t,r){return this.tilemapCache?this.tilemapCache.fetchAvailability(i,e,t,r):Promise.resolve("unknown")}async _fetchImageService(i){if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:i},t=await c(this.parsedUrl.path,e);t.ssl&&(this.url=this.url?.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[f]}};s([l({readOnly:!0})],a.prototype,"capabilities",void 0),s([y("service","capabilities",["capabilities"])],a.prototype,"readCapabilities",null),s([l({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),s([l({readOnly:!0,type:S})],a.prototype,"heightModelInfo",void 0),s([l({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),s([l({type:["show","hide"]})],a.prototype,"listMode",void 0),s([l({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"minScale",void 0),s([l({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"maxScale",void 0),s([l({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],a.prototype,"opacity",void 0),s([l({type:["ArcGISTiledElevationServiceLayer"]})],a.prototype,"operationalLayerType",void 0),s([l()],a.prototype,"sourceJSON",void 0),s([l({json:{read:!1},value:"elevation",readOnly:!0})],a.prototype,"type",void 0),s([l(L)],a.prototype,"url",void 0),s([l()],a.prototype,"version",void 0),s([y("version",["currentVersion"])],a.prototype,"readVersion",null),a=s([T("esri.layers.ElevationLayer")],a);const f=Symbol("default-fetch-tile");a.prototype.fetchTile[f]=!0;const he=a;export{he as default};
