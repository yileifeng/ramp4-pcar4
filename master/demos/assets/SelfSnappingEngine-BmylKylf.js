import{bl as U,aK as F,aN as W,V as X,B as S,D as q,N as Y}from"./main-asQ7SttR.js";import{s as Z,r as G}from"./Cyclical-BtCZr1qb.js";import{f as H,o as b}from"./quantityUtils-B6HSL2rj.js";import{j as f}from"./elevationInfoUtils-Cb-uJoCx.js";import{p as P,N as g,u as _,s as l,o as $,b as C,n as z,q as R,M as A,J as ee,r as te,I as M,e as j,j as ie,t as re,i as se,E as oe}from"./hitTestSelectUtils-CCoI2aa5.js";import{m as B,b as J,e as K,j as ne,p as pe,d as he,_ as ae}from"./vec2-maR1OrZI.js";import{s as u,r as de,g as le,p as L,d as ce,o as me,h as ge}from"./RouteLayerInteraction-DmbnMhUE.js";import{u as Q}from"./geodesicLengthMeasurementUtils-DWI1XB7C.js";import{n as I}from"./vec2f64-DohEyf3f.js";import{q as fe,c as ue,o as xe}from"./vec32-BzCy6cr7.js";import"./preload-helper-ExcqyqRp.js";import"./ElevationInfo-C-a3Y-El.js";import"./lengthUtils-GoFDlaqZ.js";import"./projectVectorToVector-VmpAJgQc.js";import"./projectBuffer-Cx7kBt8y.js";import"./projectPointToVector-CbyHCjYt.js";import"./projection-G6EI4E6A.js";import"./geodesicUtils-DUEAC0ng.js";import"./TimeExtent-tqAWy-Dv.js";import"./Query-D7n22axe.js";import"./Field-BLAoQZ_0.js";import"./fieldType-DNTeE9NS.js";import"./MapView-CdXdWR5g.js";import"./CollectionFlattener-C2HA7kkf.js";import"./workers-BJlMhhTk.js";import"./Queue-B7j4i-p3.js";import"./intl-D5myeBIL.js";import"./TileInfo-DFofX128.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-D3elnwh6.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-gi6cfx1S.js";import"./signal-DOJnbrFR.js";import"./Map-BQqiVqnv.js";import"./Basemap-CwXISLRi.js";import"./loadAll-9Cvy7tjC.js";import"./PortalItem-Nq3zGykG.js";import"./writeUtils-BnGVzhQw.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BjwS19gr.js";import"./common-DQOJ18NT.js";import"./TablesMixin-I_JAQrAJ.js";import"./Layer-Bx8UpsMJ.js";import"./GraphicsCollection-Cks0A0Ve.js";import"./HeightModelInfo-B7gpIaa-.js";import"./timeZoneUtils-CfTu0PZq.js";import"./ReactiveMap-CzqLFZz5.js";import"./HighlightDefaults-D0LIiYIH.js";import"./ViewingMode-HRfKv6NR.js";import"./Tile-3ZPXJ-cN.js";import"./TileKey-tjz0o95w.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-CQip1v0x.js";import"./normalizeUtilsCommon-B9hLdSv-.js";import"./utils-CO4HUuqg.js";import"./utils-CLKe2jGG.js";import"./mat3-CruJiiUv.js";import"./vec2f32-BbH2jxlN.js";import"./Scheduler-CssyMp54.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CPtb4TQS.js";import"./enums-Dk3osxpS.js";import"./Texture-DGW9aO8e.js";import"./getDataTypeBytes-DflDeYgv.js";import"./imageUtils-C_fUUBhQ.js";import"./capabilities-Du2wdNlQ.js";import"./Version-CCEYPWOm.js";import"./ColorBackground-CkNanFjv.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./plane-RIh6ulrU.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DET7VZHS.js";import"./GraphicsLayer-CZo360Kr.js";import"./BlendLayer-DQc1-4op.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-id0_mGIh.js";import"./parser-Bpna5qKq.js";import"./ScaleRangeLayer-59UbR5Hw.js";import"./Stop-pORK5fNb.js";import"./networkEnums-BhJmnK1i.js";import"./geometryEngine-CVDxMhql.js";import"./geometryEngineBase-8g0RzW7z.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-BabTFx4N.js";class k{constructor(i,e){this.view=i,this.options=e,this.squaredShortLineThreshold=P.shortLineThreshold*P.shortLineThreshold}snap(i,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(i,e):this.snapNewVertex(i,e)}edgeExceedsShortLineThreshold(i,e){return this.exceedsShortLineThreshold(g(i.leftVertex.pos,this.view,e),g(i.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(i,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(u(e,t,f,this.view),u(i,t,f,this.view))>this.squaredShortLineThreshold}isVertical(i,e,{spatialReference:t}){const r=U(t);return B(l(i),l(e))*r<P.verticalLineThresholdMeters}squaredProximityThreshold(i){return i==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:i,touchSensitivityMultiplier:e}=this.options,t=i*e;return t*t}}class ve extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=t.edges.length,s=[];if(r<1)return s;const{spatialReference:o}=e,p=u(i,o,f,this.view),{view:n}=this,h=t.edges[r-1];let a=h;do{if(this.edgeExceedsShortLineThreshold(a,e)){const m=$(a,n,e);this._processCandidateProposal(m.left,m.right,i,p,e,s)}a=a.leftVertex.leftEdge}while(a&&a!==h);return s}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<2)return t;const{view:o}=this,{spatialReference:p}=e,n=u(i,p,f,o),h=r.leftEdge,a=r.rightEdge;h&&a&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(a,e)&&this._processCandidateProposal(g(h.leftVertex.pos,o,e),g(a.rightVertex.pos,o,e),i,n,e,t);const m=s.edges[0];let c=m;do{if(c!==r.leftEdge&&c!==r.rightEdge&&this.edgeExceedsShortLineThreshold(c,e)){const x=$(c,o,e);this._processCandidateProposal(x.left,x.right,i,n,e,t)}c=c.rightVertex.rightEdge}while(c&&c!==m);return t}_processCandidateProposal(i,e,t,r,s,o){const{spatialReference:p,pointer:n}=s,h=F();Ee(h,i,e,t,s);const a=C(z(h));_(r,u(a,p,f,this.view))<this.squaredProximityThreshold(n)&&o.push(new de({lineStart:i,lineEnd:e,targetPoint:a,isDraped:s.elevationInfo?.mode==="on-the-ground"}))}}function Ee(d,i,e,t,r){we(d,i,e,t,r)||Ve(d,t,i,e)}function we(d,i,e,t,{spatialReference:r}){const s=R(i,e,r,r);if(s==null)return!1;const o=R(e,t,r,r);if(o==null)return!1;const p=Q(e,t,r);if(p==null)return!1;const n=Math.abs(Z.shortestSignedDiff(s,o))>Math.PI/2?G.normalize(s+Math.PI):s;return A(d,e,r,H(p,"meters"),b(n,"radians","geographic"),"geodesic"),d[2]=t[2],!0}function Ve(d,i,e,t){ee(i,{start:e,end:t,type:te.LINE},d),d[2]=i[2]}let Pe=class extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=t.edges.length,s=t.vertices.length,o=[];if(r<2)return o;const{view:p}=this,n=u(i,e.spatialReference,f,p),h=g(t.vertices[s-1].pos,p,e),a=g(t.vertices[0].pos,p,e),m=t.edges[r-1];let c=m;do{if(this.edgeExceedsShortLineThreshold(c,e)){const x=$(c,p,e);this._checkEdgeForParallelLines(x,h,i,n,e,o),this._checkEdgeForParallelLines(x,a,i,n,e,o)}c=c.leftVertex.leftEdge}while(c&&c!==m);return o}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<3)return t;const{view:o}=this,p=u(i,e.spatialReference,f,o),n=r.leftEdge,h=r.rightEdge,a=s.vertices[0],m=g(a.pos,o,e),c=s.vertices.length,x=s.vertices[c-1],w=g(x.pos,o,e),y=s.edges[0];let v=y;do{if(v!==n&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const T=$(v,o,e);n&&this._checkEdgeForParallelLines(T,g(n.leftVertex.pos,o,e),i,p,e,t),h&&this._checkEdgeForParallelLines(T,g(h.rightVertex.pos,o,e),i,p,e,t),r===a?this._checkEdgeForParallelLines(T,w,i,p,e,t):r===x&&this._checkEdgeForParallelLines(T,m,i,p,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==y);return t}_checkEdgeForParallelLines(i,e,t,r,s,o){const p=i.left,n=i.right;if(M(E,l(e),l(p),l(n)),J(E,l(e))<P.parallelLineThreshold)return;M(E,l(t),l(p),l(n),l(e));const{spatialReference:h,pointer:a}=s,m=C(j(E[0],E[1],t[2]));if(_(r,u(m,h,f,this.view))<this.squaredProximityThreshold(a)){if(this.isVertical(m,e,s)||this.isVertical(p,n,s)||_e(i,o))return;o.push(new le({referenceLine:i,lineStart:e,targetPoint:m,isDraped:s.elevationInfo?.mode==="on-the-ground"}))}}};function _e(d,i){const e=d.left,t=d.right;for(const r of i)if(M(E,l(t),l(r.constraint.start),l(r.constraint.end),l(e)),J(E,l(t))<P.parallelLineThreshold)return r.addReferenceLine(d),!0;return!1}const E=I();class ye extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=[];if(t.vertices.length<2)return r;const{view:s}=this,o=u(i,e.spatialReference,f,s),p=t.vertices.at(-1);this._checkForSnappingCandidate(L.LastVertex,r,p.leftEdge,p,p.leftEdge.leftVertex,i,o,e);const n=t.vertices[0];return this._checkForSnappingCandidate(L.FirstVertex,r,n.rightEdge,n,n.rightEdge.rightVertex,i,o,e),r}snapExistingVertex(i,e){const t=[],r=e.vertexHandle;if(r.component.vertices.length<3)return t;const{view:s}=this,o=u(i,e.spatialReference,f,s),p=r.leftEdge,n=r.rightEdge;if(p?.leftVertex.leftEdge){const h=p.leftVertex.leftEdge;this._checkForSnappingCandidate(L.ExistingEdge,t,h,h.rightVertex,h.leftVertex,i,o,e)}if(n?.rightVertex.rightEdge){const h=n.rightVertex.rightEdge;this._checkForSnappingCandidate(L.ExistingEdge,t,h,h.leftVertex,h.rightVertex,i,o,e)}return t}_checkForSnappingCandidate(i,e,t,r,s,o,p,n){if(!this.edgeExceedsShortLineThreshold(t,n))return;const h=this.view,a=g(r.pos,h,n),m=g(s.pos,h,n);Te(O,m,a,o,n),this._checkForSnappingCandidateAlongProjectedRay(i,e,m,a,O,o,p,n)}_checkForSnappingCandidateAlongProjectedRay(i,e,t,r,s,o,p,n){const{spatialReference:h,pointer:a}=n,m=K(N,l(o),l(r)),c=ne(s,m)/pe(s),x=he(N,l(r),s,c),w=C(j(x[0],x[1],o[2]));if(_(p,u(w,h,f,this.view))>this.squaredProximityThreshold(a)||this.isVertical(w,r,n)||this.isVertical(r,t,n))return;const y=fe(F(),r,s,Math.sign(c));e.push(new ce({targetPoint:w,constraint:new ie(r,z(y)),previousVertex:t,otherVertex:r,otherVertexType:me.CENTER,selfSnappingType:i,isDraped:n.elevationInfo?.mode==="on-the-ground"}))}}function Te(d,i,e,t,r){Se(d,i,e,t,r)||Le(d,i,e)}function Se(d,i,e,t,{spatialReference:r}){const s=R(i,e,r,r);if(s==null)return!1;const o=R(e,t,r,r);if(o==null)return!1;const p=Math.sign(G.shortestSignedDiff(s,o))*Math.PI*.5,n=b(s+p,"radians","geographic"),h=F(),a=Q(e,t,r);return a!=null&&(A(h,e,r,H(a,"meters"),n,"geodesic"),ue(d,h,e),!0)}function Le(d,i,e){const t=K(N,l(e),l(i));xe(d,t[1],-t[0],0)}const N=I(),O=F();let $e=class extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=[],s=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||s<2)return r;const{view:o}=this,p=t.vertices[0],n=t.vertices[s-1],h=g(p.pos,o,e),a=g(n.pos,o,e);return this._processCandidateProposal(h,a,i,e,r),r}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(r.index===0||r.index===s.vertices.length-1))return t;const{view:o}=this,p=g(r.leftEdge.leftVertex.pos,o,e),n=g(r.rightEdge.rightVertex.pos,o,e);return this._processCandidateProposal(p,n,i,e,t),t}_processCandidateProposal(i,e,t,r,s){if(!this.exceedsShortLineThreshold(i,e,r))return;const o=ae(D,l(i),l(e),.5),p=.5*B(l(i),l(e)),n=re(D,l(t),o,p),h=C(j(n[0],n[1],t[2])),{spatialReference:a,pointer:m}=r,c=u(t,a,f,this.view);if(_(c,u(h,a,f,this.view))<this.squaredProximityThreshold(m)){if(this.isVertical(i,h,r)||this.isVertical(h,e,r))return;s.push(new ge({targetPoint:h,point1:i,point2:e,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};const D=I();let V=class extends W{constructor(d){super(d),this.updating=!1,this._snappers=new X,this._domain=se.SELF}initialize(){this._snappers.push(new Pe(this.view,this.options),new ve(this.view,this.options),new ye(this.view,this.options),new $e(this.view,this.options))}set options(d){this._set("options",d);for(const i of this._snappers)i.options=d}async fetchCandidates(d,i,e){if(!(i&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const r of this._snappers.items)for(const s of r.snap(d,e))t.push(s);return oe(d,t),t}};S([q({readOnly:!0})],V.prototype,"updating",void 0),S([q({constructOnly:!0})],V.prototype,"view",void 0),S([q()],V.prototype,"options",null),V=S([Y("esri.views.interactive.snapping.SelfSnappingEngine")],V);export{V as SelfSnappingEngine};
