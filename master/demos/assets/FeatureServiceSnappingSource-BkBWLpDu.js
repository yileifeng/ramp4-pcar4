const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./WhereClause-Bsz5dHey.js","./main-asQ7SttR.js","./preload-helper-ExcqyqRp.js","./main-DmIi68wH.css","./TimeOnly-BOSrAlqL.js"])))=>i.map(i=>d[i]);
import{_ as G}from"./preload-helper-ExcqyqRp.js";import{aK as Z,B as r,D as a,N as b,aN as H,aO as f,aJ as W,di as S,dr as Q,dN as K,b6 as N,aM as M,iM as B,iN as X,iO as Y,iP as ee,V as te,iQ as ie,d_ as se,iR as V,a9 as re,bR as oe,e1 as ne,e7 as ae,gu as le,c2 as R,cU as de,ao as pe,bE as ue,fP as he,bC as ce,X as A,eS as y,aQ as ye,e8 as L,dq as j,b0 as ge}from"./main-asQ7SttR.js";import{t as fe}from"./memoize-DsJmrG76.js";import{h as q}from"./UpdatingHandles-gi6cfx1S.js";import{y as me}from"./elevationInfoUtils-Cb-uJoCx.js";import{t as C}from"./TileKey-DZd6gJy7.js";import{o as we}from"./vec32-BzCy6cr7.js";import{W as _e,t as ve,g as Se}from"./boundedPlane-Zz4nqCih.js";import{i as be}from"./layerViewUtils-BMRueLxd.js";import{h as Ie}from"./hitTestSelectUtils-CCoI2aa5.js";import{o as Oe,i as He}from"./queryEngineUtils-DA_JI_o3.js";import{h as ke}from"./WorkerHandle-B3-ZLZMC.js";import{e as $e}from"./projectVectorToVector-VmpAJgQc.js";import{z as Te,p as Fe}from"./TileInfo-DFofX128.js";import{E as Pe}from"./Scheduler-CssyMp54.js";import"./ElevationInfo-C-a3Y-El.js";import"./lengthUtils-GoFDlaqZ.js";import"./common-DQOJ18NT.js";import"./sphere-DET7VZHS.js";import"./mat4-BjwS19gr.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./mat3-CruJiiUv.js";import"./mat3f64-q3fE-ZOt.js";import"./plane-RIh6ulrU.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./vec2f64-DohEyf3f.js";import"./lineSegment-BNFfqofa.js";import"./Cyclical-BtCZr1qb.js";import"./quantityUtils-B6HSL2rj.js";import"./vec2-maR1OrZI.js";import"./geodesicUtils-DUEAC0ng.js";import"./projectBuffer-Cx7kBt8y.js";import"./TimeExtent-tqAWy-Dv.js";import"./Query-D7n22axe.js";import"./Field-BLAoQZ_0.js";import"./fieldType-DNTeE9NS.js";import"./MapView-CdXdWR5g.js";import"./CollectionFlattener-C2HA7kkf.js";import"./workers-BJlMhhTk.js";import"./Queue-B7j4i-p3.js";import"./intl-D5myeBIL.js";import"./projection-G6EI4E6A.js";import"./themeUtils-D3elnwh6.js";import"./uuid-Cl5lrJ4c.js";import"./signal-DOJnbrFR.js";import"./Map-BQqiVqnv.js";import"./Basemap-CwXISLRi.js";import"./loadAll-9Cvy7tjC.js";import"./PortalItem-Nq3zGykG.js";import"./writeUtils-BnGVzhQw.js";import"./mat4f32-DcsiF_Rp.js";import"./TablesMixin-I_JAQrAJ.js";import"./Layer-Bx8UpsMJ.js";import"./GraphicsCollection-Cks0A0Ve.js";import"./HeightModelInfo-B7gpIaa-.js";import"./timeZoneUtils-CfTu0PZq.js";import"./ReactiveMap-CzqLFZz5.js";import"./HighlightDefaults-D0LIiYIH.js";import"./ViewingMode-HRfKv6NR.js";import"./Tile-3ZPXJ-cN.js";import"./TileKey-tjz0o95w.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-CQip1v0x.js";import"./normalizeUtilsCommon-B9hLdSv-.js";import"./utils-CO4HUuqg.js";import"./utils-CLKe2jGG.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CPtb4TQS.js";import"./enums-Dk3osxpS.js";import"./Texture-DGW9aO8e.js";import"./getDataTypeBytes-DflDeYgv.js";import"./imageUtils-C_fUUBhQ.js";import"./capabilities-Du2wdNlQ.js";import"./Version-CCEYPWOm.js";import"./ColorBackground-CkNanFjv.js";import"./RouteLayerInteraction-DmbnMhUE.js";import"./GraphicsLayer-CZo360Kr.js";import"./BlendLayer-DQc1-4op.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-id0_mGIh.js";import"./parser-Bpna5qKq.js";import"./ScaleRangeLayer-59UbR5Hw.js";import"./Stop-pORK5fNb.js";import"./networkEnums-BhJmnK1i.js";import"./VertexSnappingCandidate-D8cpe9vr.js";import"./PointSnappingHint-dI5J2D4I.js";import"./projectPointToVector-CbyHCjYt.js";function P(e,t){return ve(t.extent,D),Se(D,we(Me,e.x,e.y,0))}const D=_e(),Me=Z();let g=class extends H{get tiles(){const e=this.tilesCoveringView,t=this.pointOfInterest!=null?this.pointOfInterest:this.view.center;return e.sort((i,o)=>P(t,i)-P(t,o)),e}_scaleEnabled(){return be(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||this.tileInfo==null)return[];if(!this._scaleEnabled)return[];const{spans:e,lodInfo:t}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:i}=t,o=[];for(const{row:s,colFrom:n,colTo:l}of e)for(let p=n;p<=l;p++){const w=t.normalizeCol(p),h=new C(null,i,s,w);this.tileInfo.updateTileInfo(h),o.push(h)}return o}get tileInfo(){return this.view.featuresTilingScheme?.tileInfo??null}get tileSize(){return this.tileInfo!=null?this.tileInfo.size[0]:256}constructor(e){super(e),this.pointOfInterest=null}initialize(){this.addHandles(f(()=>this.view?.state?.viewpoint,()=>this.notifyChange("tilesCoveringView"),W))}};r([a({readOnly:!0})],g.prototype,"tiles",null),r([a({readOnly:!0})],g.prototype,"_scaleEnabled",null),r([a({readOnly:!0})],g.prototype,"tilesCoveringView",null),r([a({readOnly:!0})],g.prototype,"tileInfo",null),r([a({readOnly:!0})],g.prototype,"tileSize",null),r([a({constructOnly:!0})],g.prototype,"view",void 0),r([a({constructOnly:!0})],g.prototype,"layer",void 0),r([a()],g.prototype,"pointOfInterest",void 0),g=r([b("esri.views.2d.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],g);let m=class extends H{get _sortedTilesCoveringView(){const t=(this.view.featureTiles?.tiles?.toArray()??[]).map(Ce),i=this._effectivePointOfInterest;return i!=null&&t.sort((o,s)=>P(i,o)-P(i,s)),t}get tileInfo(){return this.view.featureTiles?.tilingScheme?.toTileInfo()??null}get tileSize(){return this.view.featureTiles?.tileSize??256}get _effectivePointOfInterest(){const t=this.pointOfInterest;return t??this.view.pointsOfInterest?.focus.location}constructor(t){super(t),this.tiles=[],this.pointOfInterest=null}initialize(){this.addHandles([f(()=>this.view.featureTiles,t=>{this.removeHandles(U),t&&this.addHandles(t.addClient(),U)},S),f(()=>this._sortedTilesCoveringView,t=>this._set("tiles",t),{initial:!0,equals:(t,i)=>Q(t,i,(o,s)=>o.id===s.id)})])}};function Ce({lij:[e,t,i],extent:o}){return new C(`${e}/${t}/${i}`,e,t,i,o)}r([a({readOnly:!0})],m.prototype,"tiles",void 0),r([a({readOnly:!0})],m.prototype,"_sortedTilesCoveringView",null),r([a({readOnly:!0})],m.prototype,"tileInfo",null),r([a({readOnly:!0})],m.prototype,"tileSize",null),r([a({constructOnly:!0})],m.prototype,"view",void 0),r([a()],m.prototype,"pointOfInterest",void 0),r([a()],m.prototype,"_effectivePointOfInterest",null),m=r([b("esri.views.3d.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],m);const U="feature-tiles",Ee=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let O=class extends H{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=Ee.map(e=>new K({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=n=>{if(n.label!=null)return n.label;let l=n.lij.toString();return n.loadPriority!=null&&(l+=` (${n.loadPriority})`),n.measures&&(l+=`[${n.measures.lodLevel}]`),l},t=this.getTiles(),i=new Array,o=new Set((this._labels.size,this._labels.keys()));t.forEach((n,l)=>{const p=n.lij.toString();o.delete(p);const w=n.measures?.lodLevel??n.level,h=n.geometry;if(this.enablePolygons&&!this._polygons.has(p)){const d=new N({geometry:h,symbol:this._symbols[w%this._symbols.length]});this._polygons.set(p,d),i.push(d)}if(this.enableLabels){const d=e(n),_=l/(t.length-1),I=V(0,200,_),k=V(20,6,_)/.75,E=n.loadPriority!=null&&n.loadPriority>=t.length,z=new M([I,E?0:I,E?0:I]),x=this.view.type==="3d"?()=>new B({verticalOffset:new X({screenLength:40/.75}),callout:new Y({color:new M("white"),border:new ee({color:new M("black")})}),symbolLayers:new te([new ie({text:d,halo:{color:"white",size:1/.75},material:{color:z},size:k})])}):()=>new se({text:d,haloColor:"white",haloSize:1/.75,color:z,size:k}),T=this._labels.get(p);if(T){const $=x();T.symbol!=null&&JSON.stringify($)===JSON.stringify(T.symbol)||(T.symbol=$)}else{const $=new N({geometry:h.extent.center,symbol:x()});this._labels.set(p,$),i.push($)}}});const s=new Array;o.forEach(n=>{const l=this._polygons.get(n);l!=null&&(s.push(l),this._polygons.delete(n));const p=this._labels.get(n);p!=null&&(s.push(p),this._labels.delete(n))}),this.view.graphics.removeMany(s),this.view.graphics.addMany(i)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};r([a({constructOnly:!0})],O.prototype,"view",void 0),r([a({readOnly:!0})],O.prototype,"updating",void 0),r([a()],O.prototype,"enabled",null),O=r([b("esri.views.support.TileTreeDebugger")],O);let F=class extends O{constructor(e){super(e)}initialize(){const e=setInterval(()=>this._fetchDebugInfo(),2e3);this.addHandles(re(()=>clearInterval(e)))}getTiles(){if(!this._debugInfo)return[];const e=new Map,t=new Map;this._debugInfo.storedTiles.forEach(s=>{e.set(s.data.id,s.featureCount)}),this._debugInfo.pendingTiles.forEach(s=>{e.set(s.data.id,s.featureCount),t.set(s.data.id,s.state)});const i=s=>{const n=t.get(s),l=e.get(s)??"?";return n?`${n}:${l}
${s}`:`store:${l}
${s}`},o=new Map;return this._debugInfo.storedTiles.forEach(s=>{o.set(s.data.id,s.data)}),this._debugInfo.pendingTiles.forEach(s=>{o.set(s.data.id,s.data)}),Array.from(o.values()).map(s=>({lij:[s.level,s.row,s.col],level:s.level,geometry:oe.fromExtent(ne(s.extent,this.view.spatialReference)),label:i(s.id)}))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then(e=>{this._debugInfo=e,this.update()})}};r([a({constructOnly:!0})],F.prototype,"handle",void 0),F=r([b("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],F);let c=class extends H{get updating(){return this._updatingHandles.updating||this._workerHandleUpdating}constructor(e){super(e),this._updatingHandles=new q,this._suspendController=null,this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async t=>{const i=[];for(const{points:o}of t.pointsInFeatures)for(const{z:s}of o)i.push(s);return{elevations:i,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this.updateOutFields=ae(async(t,i)=>{await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateOutFields",[...t],i)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},i))})}destroy(){this._suspendController=le(this._suspendController),this._workerHandle.destroy(),this._updatingHandles.destroy()}initialize(){this._workerHandle=new xe(this.schedule,{alignElevation:async(e,{signal:t})=>({result:await this.elevationAlignPointsInFeatures(e.query,t)}),getSymbologyCandidates:async(e,{signal:t})=>({result:await this.queryForSymbologySnapping(e,t)})}),this.addHandles([this._workerHandle.on("notify-updating",({updating:e})=>this._workerHandleUpdating=e),this._workerHandle.on("notify-availability",({availability:e})=>this._set("availability",e))])}async setup(e,t){const i=ze(e.layer);if(i==null)return;const o={configuration:J(e.configuration),serviceInfo:i,spatialReference:e.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:e.layer.elevationInfo?.toJSON()};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",o,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const i=J(e);await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",i,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},e)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const{point:i,filter:o,coordinateHelper:s}=e,n={...e,point:$e(i[0],i[1],i[2],s.spatialReference.toJSON()),filter:o?.toJSON()};return this._workerHandle.invoke(n,t)}async updateTiles(e,t){const i={tiles:e.tiles,tileInfo:e.tileInfo!=null?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",i,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async handleEdits({historicMoment:e,addedFeatures:t,deletedFeatures:i,updatedFeatures:o},s){const n={historicMoment:e,addedFeatures:t?.map(({objectId:l})=>l).filter(R)??[],deletedFeatures:i?.map(({objectId:l,globalId:p})=>({objectId:l,globalId:p}))??[],updatedFeatures:o?.map(({objectId:l})=>l).filter(R)??[]};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("handleEdits",n,s)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},s))}async setHistoricMoment(e,t){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setHistoricMoment",{moment:e},t))}getDebugInfo(e){return this._workerHandle.invokeMethod("getDebugInfo",{},e)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(e){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",e)}async setSuspended(e){this._suspendController?.abort(),this._suspendController=new AbortController,await this._workerHandle.invokeMethod("setSuspended",e,this._suspendController.signal)}};function J(e){return{filter:e.filter!=null?e.filter.toJSON():null,customParameters:e.customParameters,viewType:e.viewType}}function ze(e){return e.geometryType==="multipatch"||e.geometryType==="mesh"?null:{url:e.parsedUrl?.path??"",fieldsIndex:e.fieldsIndex.toJSON(),geometryType:de.toJSON(e.geometryType),capabilities:e.capabilities,objectIdField:e.objectIdField,globalIdField:e.globalIdField,spatialReference:e.spatialReference.toJSON(),timeInfo:e.timeInfo?.toJSON()}}r([a({constructOnly:!0})],c.prototype,"schedule",void 0),r([a({constructOnly:!0})],c.prototype,"hasZ",void 0),r([a({constructOnly:!0})],c.prototype,"elevationAlignPointsInFeatures",void 0),r([a({constructOnly:!0})],c.prototype,"queryForSymbologySnapping",void 0),r([a({readOnly:!0})],c.prototype,"updating",null),r([a({readOnly:!0})],c.prototype,"availability",void 0),r([a()],c.prototype,"_workerHandleUpdating",void 0),c=r([b("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],c);class xe extends ke{constructor(t,i){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:i})}}let v=class extends H{get tiles(){return[new C("0/0/0",0,0,0,pe(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new Te({origin:new ue({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new Fe({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}constructor(e){super(e),this.pointOfInterest=null}};r([a({readOnly:!0})],v.prototype,"tiles",null),r([a({readOnly:!0})],v.prototype,"tileInfo",null),r([a({readOnly:!0})],v.prototype,"tileSize",null),r([a({constructOnly:!0})],v.prototype,"layer",void 0),r([a()],v.prototype,"pointOfInterest",void 0),v=r([b("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],v);let u=class extends H{get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get _layerView(){return this.view?.allLayerViews.find(e=>e.layer===this._layer)}get _isSuspended(){return he(this._layer)&&!this.layerSource.sublayerSources.some(e=>e.enabled&&e.layer.visible)?!0:!!this.view&&(this._layerView?.suspended!==!1||!this.layerSource.enabled)}get updating(){return this._workerHandle?.updating||this._updatingHandles.updating}get _outFields(){const{view:e,_layerView:t,layerSource:i}=this,{layer:o}=i,{fieldsIndex:s,timeInfo:n,floorInfo:l,subtypeField:p}=o,w=t&&"filter"in t?t.filter:null,h=w?.where&&w.where!=="1=1"?this._getOrLoadWhereFields(w.where,s):[];if(w?.timeExtent&&n){const{startField:d,endField:_}=n,I=s.get(d)?.name??d,k=s.get(_)?.name??_;I&&h.push(I),k&&h.push(k)}if(e?.map&&Ie(e.map)&&e.map.utilityNetworks?.find(d=>d.isUtilityLayer(o))){const d=o.fieldsIndex.get("assetGroup")?.name,_=o.fieldsIndex.get("assetType")?.name;d&&_&&(h.push(d),h.push(_))}if(o&&l?.floorField&&e?.floors?.length){const d=s.get(l.floorField)?.name??l.floorField;d&&h.push(d)}if(p){const d=s.get(p)?.name??p;d&&h.push(d)}return new Set(h)}get configuration(){const{view:e}=this,{apiKey:t,customParameters:i}=this._layer,o=e!=null?e.type:"2d",s=this._layer.createQuery();return this._layerView&&"effectiveDisplayFilter"in this._layerView&&(s.where=ce(s.where,this._layerView.effectiveDisplayFilter?.where)),{filter:s,customParameters:t?{...i,token:t}:i,viewType:o}}get availability(){return this._workerHandle?.availability??0}get _layer(){return this.layerSource.layer}constructor(e){super(e),this._updatingHandles=new q,this._workerHandle=null,this._debug=null,this._memoizedMakeGetGroundElevation=fe(He)}initialize(){let e;const t=this.view;if(t==null||t.destroyed)this._tilesOfInterest=new v({layer:this._layer}),e=this._workerHandle=new c;else switch(t.type){case"2d":this._tilesOfInterest=new g({view:t,layer:this._layer}),e=this._workerHandle=new c;break;case"3d":{const{resourceController:i}=t,o=this._layer;this._tilesOfInterest=new m({view:t}),e=this._workerHandle=new c({schedule:s=>i.immediate.schedule(s),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(s,n)=>{const l=await t.whenLayerView(o);return A(n),l.elevationAlignPointsInFeatures(s,n)},queryForSymbologySnapping:async(s,n)=>{const l=await t.whenLayerView(o);return A(n),l.queryForSymbologySnapping(s,n)}}),this.addHandles([t.elevationProvider.on("elevation-change",({context:s})=>{const{elevationInfo:n}=o;me(s,n)&&y(e.notifyElevationSourceChange())}),f(()=>o.elevationInfo,()=>y(e.notifyElevationSourceChange()),S),f(()=>this._layerView?.layer?.renderer,()=>y(e.notifySymbologyChange()),S),f(()=>this._layerView?.symbologySnappingSupported??!1,s=>y(e.setSymbologySnappingSupported(s)),S),ye(()=>this._layerView?.layer,["edits","apply-edits","graphic-update"],()=>e.notifySymbologyChange())]);break}}this.addHandles([L(e)]),y(e.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null)),this._updatingHandles.add(()=>this._updateTilesParameters,()=>y(e.updateTiles(this._updateTilesParameters,null)),S),this.addHandles([f(()=>this.configuration,i=>y(e.configure(i,null)),W),f(()=>this._layer.historicMoment,i=>y(e.setHistoricMoment(i)),j),f(()=>this._outFields,i=>y(e.updateOutFields(i)),S),f(()=>this._isSuspended,i=>y(e.setSuspended(i)),j)]),t!=null&&this.addHandles(f(()=>Pe.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES,i=>{i&&!this._debug?(this._debug=new F({view:t,handle:e}),this.addHandles(L(this._debug),"debug")):!i&&this._debug&&this.removeHandles("debug")},S)),this.addHandles([this.layerSource.layer.on("edits",i=>y(e.handleEdits(i,null))),this.layerSource.layer.on("apply-edits",i=>this._updatingHandles.addPromise(i.result))])}destroy(){this._updatingHandles.destroy(),this._tilesOfInterest.destroy()}refresh(){this._workerHandle?.refresh(null)}async fetchCandidates(e,t){const{coordinateHelper:i,point:o}=e;this._tilesOfInterest.pointOfInterest=i.arrayToPoint(o);const s=this._memoizedMakeGetGroundElevation(this.view,i.spatialReference);return(await this._workerHandle.fetchCandidates({...e},t)).candidates.map(n=>Oe(n,s))}getDebugInfo(e){return this._workerHandle.getDebugInfo(e)}_getOrLoadWhereFields(e,t){const{_whereModule:i}=this;if(!this._loadWhereModuleTask&&!i){const o=ge(async()=>{const s=await G(()=>import("./WhereClause-Bsz5dHey.js").then(n=>n.W),__vite__mapDeps([0,1,2,3,4]),import.meta.url);return this._whereModule=s.default,this._whereModule});return this._loadWhereModuleTask=o,this._updatingHandles.addPromise(o.promise),[]}if(!i)return[];try{return i.create(e,{fieldsIndex:t}).fieldNames}catch{return[]}}};r([a({constructOnly:!0})],u.prototype,"spatialReference",void 0),r([a({constructOnly:!0})],u.prototype,"layerSource",void 0),r([a({constructOnly:!0})],u.prototype,"view",void 0),r([a()],u.prototype,"_tilesOfInterest",void 0),r([a({readOnly:!0})],u.prototype,"_updateTilesParameters",null),r([a()],u.prototype,"_layerView",null),r([a()],u.prototype,"_isSuspended",null),r([a({readOnly:!0})],u.prototype,"updating",null),r([a()],u.prototype,"_outFields",null),r([a({readOnly:!0})],u.prototype,"configuration",null),r([a({readOnly:!0})],u.prototype,"availability",null),r([a()],u.prototype,"_loadWhereModuleTask",void 0),r([a()],u.prototype,"_whereModule",void 0),u=r([b("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],u);export{u as FeatureServiceSnappingSource};
