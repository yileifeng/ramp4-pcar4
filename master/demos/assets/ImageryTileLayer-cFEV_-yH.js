const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./imageryUtils-9697ZxCx.js","./utils-CBa-lMKP.js","./main-asQ7SttR.js","./preload-helper-ExcqyqRp.js","./main-DmIi68wH.css","./originUtils-CPX8CCAY.js","./multiOriginJSONSupportUtils-C0wm8_Yw.js","./PortalItem-Nq3zGykG.js","./jsonContext-CWwB2AdU.js","./portalItemUtils-BFogiphi.js","./projection-G6EI4E6A.js","./projectBuffer-Cx7kBt8y.js","./saveUtils-L-1tRd9S.js"])))=>i.map(i=>d[i]);
import{_ as Ne}from"./preload-helper-ExcqyqRp.js";import{O as E,bB as z,aM as $e,jo as Ee,B as S,D as C,N as W,dH as _e,s as F,jp as Be,c2 as de,a_ as De,u as Ae,ap as Le,I as Je,bE as H,n as ge,aZ as ze,e7 as je,Z as Ue,bs as Ge,aO as He,b9 as We}from"./main-asQ7SttR.js";import{S as Ve}from"./MultiOriginJSONSupport-BgTEONJv.js";import{f as qe}from"./Layer-Bx8UpsMJ.js";import{l as Ye}from"./ArcGISService-BpCkZU1v.js";import{p as Xe}from"./BlendLayer-DQc1-4op.js";import{e as Ke}from"./CustomParametersMixin-B7XIjtWP.js";import{X as Y,i as ue,t as L,n as Oe,e as A,o as G,u as ee,K as Ze,a as Qe}from"./xmlUtilities-HvT6jw3C.js";import{b as et}from"./OperationalLayer-DTkZmy-B.js";import{j as tt}from"./PortalLayer-D_hkWTMK.js";import{c as st,f as it,o as at}from"./RasterPresetRendererMixin-BFbLufg4.js";import{f as rt}from"./RefreshableLayer-D-fI9Hjo.js";import{t as nt}from"./ScaleRangeLayer-59UbR5Hw.js";import{l as ot}from"./TemporalLayer-3uOs5aS1.js";import{d as lt}from"./commonProperties-BAQ0_iGY.js";import{y as Se}from"./Field-BLAoQZ_0.js";import{p as ct,N as ut,o as pt,c as ft,b as ht,e as mt,$ as dt,j as gt,t as yt,k as wt}from"./multidimensionalUtils-CiU1wuoV.js";import{w as Ce}from"./ImageHistogramParameters-Cu4-jinR.js";import{g as ae,b as xt,E as It,W as bt,T as vt}from"./dataUtils-DJt1u4TY.js";import{d as oe,h as St,m as Fe,p as we,P as Tt,n as xe,r as Rt,b as Te,F as _t,N as Ot,U as Ct,c as te,B as Ft,L as Mt,R as kt,D as Pt}from"./RasterSymbolizer-IOW6lFnu.js";import{d as Me}from"./FeatureSet-BbkVLp0y.js";import{y as Ie,c as Nt}from"./PolynomialTransform-CHGjYuHz.js";import{z as re}from"./TileInfo-DFofX128.js";import{T as $t}from"./TilemapCache-DnOq6SNd.js";import{w as Et,T as Bt}from"./rasterFunctionHelper-CgGPDoBU.js";import{p as Dt}from"./popupUtils-ChjfLide.js";import{A as se}from"./interfaces-CL2NbQte.js";import"./TimeExtent-tqAWy-Dv.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-id0_mGIh.js";import"./parser-Bpna5qKq.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BjwS19gr.js";import"./common-DQOJ18NT.js";import"./QueueProcessor-CVaNJhFS.js";import"./Queue-B7j4i-p3.js";import"./ReactiveMap-CzqLFZz5.js";import"./signal-DOJnbrFR.js";import"./RawBlockCache-DVaSb0cw.js";import"./rasterProjectionHelper-rgUEkvip.js";import"./projection-G6EI4E6A.js";import"./projectBuffer-Cx7kBt8y.js";import"./PortalItem-Nq3zGykG.js";import"./portalItemUtils-BFogiphi.js";import"./utils-CO4HUuqg.js";import"./TimeInfo-CoJs_xDI.js";import"./timeZoneUtils-CfTu0PZq.js";import"./ElevationInfo-C-a3Y-El.js";import"./lengthUtils-GoFDlaqZ.js";import"./fieldType-DNTeE9NS.js";import"./workers-BJlMhhTk.js";import"./intl-D5myeBIL.js";import"./ClassBreaksRenderer-BsHgq2H0.js";import"./commonProperties-BCStlC_N.js";import"./colorRamps-Dk7bz912.js";import"./ColorStop-DwDT8ygX.js";import"./visualVariableUtils-BKDBW5cJ.js";import"./RendererLegendOptions-Bo7pHTmv.js";import"./UniqueValueRenderer-CNrg2TdL.js";import"./defaultCIMValues-BZQdnlbk.js";import"./enums-CD-fX3vU.js";import"./styleUtils-seZ9SQXz.js";import"./ClassBreaksDefinition-CPFW_uod.js";import"./normalizeUtils-CQip1v0x.js";import"./normalizeUtilsCommon-B9hLdSv-.js";import"./utils-CLKe2jGG.js";import"./utils-CwuU6R9D.js";import"./cimSymbolUtils-CnrAdmVz.js";import"./utils-Piv4JJl1.js";import"./LRUCache-D1fsA-w6.js";import"./MemCache-DE3T9NBz.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./colorUtils-unU6Ikhg.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./TileKey-DZd6gJy7.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./memoryEstimations-COo-dz1M.js";function ke(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function Pe(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function At(t){const{axes:e}=t.domain,s=Object.keys(e),i=[],a=[];let r=-1,n=-1,c=[];for(let w=0;w<s.length;w++){const R=s[w];ke(R)?r=w:Pe(R)&&(n=w);const I=e[R],b=[];if("values"in I){I.values.forEach(x=>b.push(typeof x=="string"?new Date(x).getTime():x));const v=b[1]-b[0];i.push([b[0]-.5*v,b[b.length-1]+.5*v]),a.push(v)}else{const{start:v,stop:x,num:_}=I,T=(x-v)/(_-1);i.push([v-.5*T,x+.5*T]),a.push(T);for(let k=0;k<_;k++)b.push(v+T*k)}c.push({name:R,values:b,extent:[b[0],b[b.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),c=c.filter((w,R)=>!(R===r||R===n));const{referencing:o}=t.domain,l=o.find(w=>w.coordinates.includes(s[r])).system.id,u=l?.slice(l.lastIndexOf("/")+1),h=u==null||u==="CRS84"?4326:Number(u),f=new E({wkid:h}),[p,g]=i[r],[y,m]=i[n],d=new z({xmin:p,xmax:g,ymin:y,ymax:m,spatialReference:f});return{width:Math.round(d.width/a[r]),height:Math.round(d.height/a[n]),extent:d,dimensions:c}}function pe(t){const e=Ee();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function fe(){return Math.round(255*Math.random())}function Lt(t){const e={},{parameters:s}=t;if(!s)return e;for(const[i,a]of Object.entries(s)){const{type:r,description:n,unit:c,categoryEncoding:o,observedProperty:l}=a;if(r==="Parameter"&&(e[i]={},n&&(e[i].description=pe(n)),c&&(e[i].unit=c.label?pe(c.label):null,e[i].symbol=c.symbol?.value),o)){const u=Object.entries(o).map((p,g)=>({OID:g,Value:Number(p[1]),ClassName:p[0].slice(p[0].lastIndexOf("/")+1),Count:1}));let h=!1;l?.categories?.length&&(l.categories.forEach(p=>{if(!p.id)return;const g=p.id.slice(p.id.lastIndexOf("/")+1),y=u.find(d=>d.ClassName===g);if(!y)return;const m=p.label?pe(p.label):null;if(y.Label=m,p.preferredColor){const d=$e.fromHex(p.preferredColor);d&&(h=!0,y.Red=d.r,y.Green=d.g,y.Blue=d.b)}}),h&&u.forEach(p=>{p.Red==null&&(p.Red=fe(),p.Green=fe(),p.Blue=fe())}));const f={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(p=>({attributes:p}))};h&&f.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[i].attributeTable=f}}return e}function Jt(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let i=0;i<t.length;i++){const a=t[i];a!=null&&(a<e&&(e=a),a>s&&(s=a))}return xt(e,s)}function zt(t,e,s){const i=t.map((o,l)=>({name:o,count:e[l]})).sort((o,l)=>o.name>l.name?-1:1),a=(r=1,o=>r*=o.count);var r;const n=[...i.slice(1),{name:"",count:1}].reverse().map(a).reverse();let c=0;for(let o=t.length-1;o>=0;o--)c+=n[i.findIndex(({name:l})=>l===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return c}function jt(t){const{width:e,height:s,extent:i,dimensions:a}=At(t),{ranges:r}=t,n=Object.keys(r).sort((f,p)=>f<p?-1:1),c=[];for(let f=0;f<n.length;f++){const p=n[f];a?.length&&c.push({name:p,dimensions:a})}const o=Lt(t);c.forEach(f=>o[f.name]&&Object.assign(f,o[f.name]));const l=c.length?{variables:c}:void 0,u=[];for(let f=0;f<n.length;f++){const p=n[f],{values:g,dataType:y,axisNames:m,shape:d}=r[p],w=d.length>2?f*d.slice(0,-2).reduce((_,T)=>_*T):0,R=m.slice(0,-2),I=d.slice(0,-2),b=y==="float"?"f32":Jt(g),v=e*s,x=g.length/v;for(let _=0;_<x;_++){const T=ae.createEmptyBand(b,v),k=new Uint8Array(v).fill(255);let O=!1;const N=_*v;for(let M=0;M<v;M++){const B=g[N+M];B==null?(k[M]=0,O=!0):T[M]=B}if(f===0||a?.length){const M=new ae({width:e,height:s,mask:O?k:null,pixels:[T],pixelType:b});M.updateStatistics(),a?.length?u[zt(R,I,_)+w]=M:u.push(M)}else{const M=u[_];M.pixels.push(T),O?M.mask&&(M.mask=ae.combineBandMasks([M.mask,k])):M.mask=O?k:null}}}const h=Object.values(o).find(f=>f.attributeTable)?.attributeTable;return{extent:i,pixelBlocks:u,multidimensionalInfo:l,attributeTable:h,bandNames:l?void 0:n}}let V=class extends Y{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,i={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,c]=r.storageInfo.tileInfo.size,{sliceId:o}=i,{pixelBlocks:l}=this.source,u={pixelBlock:o==null?l[0]:l[o],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:c},level:t,row:e,col:s},h=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,i):It(u);return Promise.resolve(h)}const a=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(a)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:i,statistics:a,histograms:r,name:n,nativeExtent:c,transform:o}=e,l=s[0],{width:u,height:h,pixelType:f}=l,p=e.extent??new z({xmin:-.5,ymin:.5,xmax:u-.5,ymax:h-.5,spatialReference:new E({wkid:3857})}),g=e.isPseudoSpatialReference??!e.extent,y={x:p.width/u,y:p.height/h},m={...e.keyProperties};i&&(m.DataType="Thematic");const d=new oe({width:u,height:h,pixelType:f,extent:p,nativeExtent:c,attributeTable:i,transform:o,pixelSize:y,spatialReference:p.spatialReference,bandCount:l.pixels.length,keyProperties:m,multidimensionalInfo:e.multidimensionalInfo,statistics:a,isPseudoSpatialReference:g,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(d),this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),d.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,d.multidimensionalInfo):await this._buildInMemoryRaster(l,{width:512,height:512},t),d.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,s){const{rasterInfo:i}=this,a=i.storageInfo.maximumPyramidLevel??0,r=i.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:a,useBilinear:r},s):Promise.resolve(bt(t,e,a,r)),c=i.statistics!=null,o=i.histograms!=null,l=this.ioConfig.skipStatistics||c?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve(St(t)),u=await _e([n,l]);if(!u[0].value&&u[1].value)throw new F("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,c||(i.statistics=u[1].value?.statistics),o||(i.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let i=0;i<e.variables.length;i++){const a=e.variables[i];if(a.statistics)continue;const r=a.dimensions.map(l=>new ct({variableName:a.name,dimensionName:l.name,values:[l.values?.[0]??l.extent?.[0]],isSlice:!0})),n=ut(r,e),c=n==null?null:t[n];if(c==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:c},s):Fe(c);a.statistics=o.statistics,a.histograms||(a.histograms=o.histograms)}}};S([C({type:String,json:{write:!0}})],V.prototype,"datasetFormat",void 0),S([C()],V.prototype,"source",void 0),S([C()],V.prototype,"url",null),V=S([W("esri.layers.support.rasterDatasets.InMemoryRaster")],V);const be=V;let X=class extends Y{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,s,i,a={}){return this._inMemoryRaster.fetchRawTile(e,s,i,a)}async _open(e){const{extent:s,pixelBlocks:i,multidimensionalInfo:a,attributeTable:r,bandNames:n}=await this._fetchData(e),{statistics:c,histograms:o}=Fe(i[0]),l=n?.map(p=>({BandName:p})),u={DataType:r?"Thematic":a?"Scientific":"Generic",BandProperties:l},h=new be({source:{extent:s,pixelBlocks:i,attributeTable:r?Me.fromJSON(r):null,multidimensionalInfo:a,statistics:c,histograms:o,keyProperties:u,isPseudoSpatialReference:!1}});await h.open(),this._inMemoryRaster=h;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",h.rasterInfo)}async _fetchData(e){const s=this.source??(await this.request(this.url,{signal:e?.signal})).data,i="imagery-tile-layer:open-coverage-json";if(s.type?.toLowerCase()!=="coverage"||s.domain?.domainType?.toLowerCase()!=="grid")throw new F(i,"Only coverage with Grid domain type is supported");if(!s.ranges)throw new F(i,"Missing ranges in the grid coverage data");if(!s.domain.referencing?.length)throw new F(i,"Missing domain referencing in the grid coverage data");const a=Object.values(s.ranges);for(let r=0;r<a.length;r++){const{axisNames:n,shape:c,type:o,values:l}=a[r];if(!(o.toLowerCase()==="ndarray"&&l?.length&&n?.length&&c?.length))throw new F(i,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(ke(n[n.length-1])&&Pe(n[n.length-2])))throw new F(i,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return jt(s)}};S([C({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),S([C({constructOnly:!0})],X.prototype,"source",void 0),X=S([W("esri.layers.support.rasterDatasets.CovJSONRaster")],X);const Ut=X;function Re(t,e){if(!t||!e)return null;const s=[];for(let i=0;i<t.length;i++)s.push(t[i]),s.push(e[i]);return s}function Gt(t){const e=A(t,"GeodataXform"),s=le(G(e,"SpatialReference/WKID")||L(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const i=G(e,"PolynomialOrder")??1,a=ee(e,"CoeffX/Double"),r=ee(e,"CoeffY/Double"),n=ee(e,"InverseCoeffX/Double"),c=ee(e,"InverseCoeffY/Double"),o=Re(a,r),l=Re(n,c);return{spatialReference:s,transform:o&&l&&o.length&&l.length?new Ie({spatialReference:s,polynomialOrder:i,forwardCoefficients:o,inverseCoefficients:l}):null}}function Ht(t){const e=G(t,"NoDataValue"),s=A(t,"Histograms/HistItem"),i=G(s,"HistMin"),a=G(s,"HistMax"),r=G(s,"BucketCount"),n=L(s,"HistCounts")?.split("|").map(f=>Number(f));let c,o,l,u;Oe(t,"Metadata/MDI").forEach(f=>{const p=Number(f.textContent??f.nodeValue);switch(f.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":c=p;break;case"STATISTICS_MAXIMUM":o=p;break;case"STATISTICS_MEAN":l=p;break;case"STATISTICS_STDDEV":u=p}});const h=G(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&i!=null&&a!=null?{min:i,max:a,size:r||n.length,counts:n}:null,sourceBandIndex:h,statistics:c!=null&&o!=null?{min:c,max:o,avg:l,stddev:u}:null}}function le(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new E({wkid:e});if(t=String(t).trim(),Be(t))return new E({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const i=s.indexOf("VERTCS"),a=s.indexOf("PROJCS"),r=a>-1?a:s.indexOf("GEOGCS");if(r===-1)return null;const n=t.slice(r,t.lastIndexOf("]",i)+1).trim(),c=t.slice(i,t.lastIndexOf("]")).trim();e=he(n);const o=new E(e?{wkid:e}:{wkt:n}),l=he(c);return l&&(o.vcsWkid=l),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=he(t),new E(e!==0?{wkid:e}:{wkt:t})):null}function he(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(a=>a.trim()).filter(a=>a!==""),s=e[e.length-1].split(","),i=s[0]?.toLowerCase();if((i==="epsg"||i==="esri")&&t.endsWith('"]]')){const a=Number(s[1]);if(!isNaN(a)&&a!==0)return a}return 0}function ve(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(ue(i,"SRS")){if(!e.spatialReference){const a=L(i);e.spatialReference=le(a)}}else if(ue(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:a,transform:r}=Gt(i);e.transform=r,e.spatialReference||(e.spatialReference=a)}else Oe(i,"MDI").forEach(a=>e.metadata[a.getAttribute("key")]=L(a));else if(ue(i,"PAMRasterBand")){const a=Ht(i);a.sourceBandIndex!=null&&e.rasterBands[a.sourceBandIndex]==null?e.rasterBands[a.sourceBandIndex]=a:e.rasterBands.push(a)}}});const s=e.rasterBands;if(s.length){const i=!!s[0].statistics;e.statistics=i?s.map(r=>r.statistics).filter(de):null;const a=!!s[0].histogram;e.histograms=a?s.map(r=>r.histogram).filter(de):null}return e}let ne=class extends Y{fetchRawTile(t,e,s,i={}){return this._inMemoryRaster.fetchRawTile(t,e,s,i)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:i,histograms:a,transform:r}=await this._fetchAuxiliaryData(t);const n=!s;n&&(s=new E({wkid:3857})),a?.length&&i==null&&(i=we(a));const{width:c,height:o}=e;let l=new z({xmin:-.5,ymin:.5-o,xmax:c-.5,ymax:.5,spatialReference:s});const u=r?r.forwardTransform(l):l;let h=!0;if(r){const p=r.forwardCoefficients;h=p&&p[1]===0&&p[2]===0,h&&(r=null,l=u)}const f=new be({source:{extent:u,nativeExtent:l,transform:r,pixelBlocks:[e],statistics:i,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(f.ioConfig.skipMapInfo=!0),await f.open(),f.source=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),s=Tt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new F("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const i=s.toLowerCase(),a=i==="gif"||i==="bmp"||!De("ios"),r=await this.decodePixelBlock(e,{format:i,useCanvas:a,hasNoZlibMask:!0});if(r==null)throw new F("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:s=[],skipMapInfo:i}=this.ioConfig,a=i||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,c=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await _e([a,c]);if(e?.aborted)throw Ae();const l=ve(o[0].value?.data);if(!l.transform){const u=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(h=>Number(h)):null;l.transform=u?.length===6?new Ie({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return l}};S([C({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),ne=S([W("esri.layers.support.rasterDatasets.ImageAuxRaster")],ne);const ie=ne;let K=class extends Y{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,i={}){const{storageInfo:a,extent:r}=this.rasterInfo,{transposeInfo:n}=a,c=n!=null&&!!i.transposedVariableName;if(this._slices&&!c&&i.sliceId==null)return null;const o=c?0:a.maximumPyramidLevel-t+this._levelOffset,l=`${this.url}/tile/${o}/${e}/${s}`,u=this._slices?c?{variable:i.transposedVariableName}:{sliceId:i.sliceId||0}:null,{data:h}=await this.request(l,{query:u,responseType:"array-buffer",signal:i.signal});if(!h)return null;const f=c?n.tileSize:a.tileInfo.size,p=await this.decodePixelBlock(h,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:c,noDataValue:this.rasterInfo.noDataValue});if(p==null)return null;const g=a.blockBoundary[t];if(a.compression!=="jpg"||s>g.minCol&&s<g.maxCol&&e>g.minRow&&e<g.maxRow)return p;const{origin:y,blockWidth:m,blockHeight:d}=a,{x:w,y:R}=this.getPyramidPixelSize(t),I=Math.round((r.xmin-y.x)/w)%m,b=Math.round((r.xmax-y.x)/w)%m||m,v=Math.round((y.y-r.ymax)/R)%d,x=Math.round((y.y-r.ymin)/R)%d||d,_=s===g.minCol?I:0,T=e===g.minRow?v:0,k=s===g.maxCol?b:m,O=e===g.maxRow?x:d;return vt(p,{x:_,y:T},{width:k-_,height:O-T}),p}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const i=this._slices[s].multidimensionalDefinition;if(i.length===e.length&&!i.some(a=>{const r=e.find(n=>a.variableName===n.variableName&&n.dimensionName===a.dimensionName);return r?(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.statistics),i=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.histograms),a=await Promise.all([s,i]);return a[0]&&a[0].forEach(r=>{r.avg=r.mean,r.stddev=r.standardDeviation}),a[1]?.[0]?.counts?.length||(a[1]=null),{statistics:a[0]||null,histograms:a[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let i=0;const{maximumPyramidLevel:a}=this.rasterInfo.storageInfo;let r=a-i+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,i++,s=this.identifyPixelLocation(n,i,e.datumTransformation),s===null)return null}return r===-1||s==null?null:i}async _open(t){const e=t?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=s.data;if(this.sourceJSON=i,!i)throw new F("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new F("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const a=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=i.cacheType,this.tileType==null&&(a.includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":i.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new F("image-server-raster:open","cannot initialize image service");st(r,i);const n=this.tileType==="Map"?Wt(i.tileInfo,i):re.fromJSON(i.tileInfo);Le(n);const[c,o]=this._computeMinMaxLOD(r,n),{extent:l,pixelSize:u}=r,h=.5/r.width*u.x,f=Math.max(u.x,u.y),{lods:p}=n;(this.tileType!=="Map"&&i.maxScale!==0||Math.abs(u.x-u.y)>h||!p.some(x=>Math.abs(x.resolution-f)<h))&&(u.x=u.y=c.resolution,r.width=Math.ceil((l.xmax-l.xmin)/u.x-.1),r.height=Math.ceil((l.ymax-l.ymin)/u.y-.1));const g=c.level-o.level,[y,m]=n.size,d=[],w=[];p.forEach((x,_)=>{x.level>=o.level&&x.level<=c.level&&d.push({x:x.resolution,y:x.resolution}),_<p.length-1&&w.push(Math.round(10*x.resolution/p[_+1].resolution)/10)}),d.sort((x,_)=>x.x-_.x);const R=this.computeBlockBoundary(l,y,m,n.origin,d,g),I=d.length>1?d.slice(1):null;let b;i.transposeInfo&&(b={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const v=w.length<=1||w.length>=3&&w.slice(0,-1).every(x=>x===w[0])?w[0]??2:Math.round(10/(o.resolution/c.resolution)**(-1/g))/10;if(r.storageInfo=new xe({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,pyramidScalingFactor:v,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:g,tileInfo:n,transposeInfo:b,blockBoundary:R}),Vt(r),this._set("rasterInfo",r),i.capabilities.toLowerCase().includes("tilemap")){const x={tileInfo:r.storageInfo.tileInfo,parsedUrl:Je(this.url),url:this.url,tileServers:[]};this._tilemapCache=new $t({layer:x})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,c=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),l=E.fromJSON(e.spatialReference||n.spatialReference),u=new H({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:l});return new oe({width:c,height:o,bandCount:3,extent:z.fromJSON(n),spatialReference:l,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,i=it(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),a=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>n.data?.slices).catch(()=>null):null,r=await Promise.all([i,a]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,i=.5/t.width*s.x,{lods:a}=e,r=e.lodAt(Math.max.apply(null,a.map(f=>f.level))),n=e.lodAt(Math.min.apply(null,a.map(f=>f.level))),{tileType:c}=this;if(c==="Map")return this._levelOffset=a[0].level,[r,n];if(c==="Raster")return[a.find(f=>f.resolution===s.x)??r,n];const{minScale:o,maxScale:l}=this.sourceJSON;let u=r;l>0&&(u=a.find(f=>Math.abs(f.scale-l)<i),u||(u=a.filter(f=>f.scale>l).sort((f,p)=>f.scale>p.scale?1:-1)[0]??r));let h=n;return o>0&&(h=a.find(f=>Math.abs(f.scale-o)<i)??n,this._levelOffset=h.level-n.level),[u,h]}};function Wt(t,e){if(!t)return null;const{minScale:s,maxScale:i,minLOD:a,maxLOD:r}=e;if(a!=null&&r!=null)return re.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=a&&n<=r)});if(s!==0&&i!==0){const n=l=>Math.round(1e4*l)/1e4,c=s?n(s):1/0,o=i?n(i):-1/0;return re.fromJSON({...t,lods:t.lods.filter(l=>{const u=n(l.scale);return u<=c&&u>=o})})}return re.fromJSON(t)}function Vt(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&s?.wkid&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Nt,t.extent=t.transform.forwardTransform(e))}S([C({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),S([C()],K.prototype,"tileType",void 0),K=S([W("esri.layers.support.rasterDatasets.ImageServerRaster")],K);const qt=K,D=new Map;D.set("Int8","s8"),D.set("UInt8","u8"),D.set("Int16","s16"),D.set("UInt16","u16"),D.set("Int32","s32"),D.set("UInt32","u32"),D.set("Float32","f32"),D.set("Float64","f32"),D.set("Double64","f32");const J=new Map;J.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),J.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),J.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),J.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let q=class extends Y{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,s,i={}){const{blockWidth:a,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,c=n[t];if(!c||c.maxRow<e||c.maxCol<s||c.minRow>e||c.minCol>s)return null;const{bandCount:o,pixelType:l}=this.rasterInfo,{ranges:u,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(t,e,s);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const O=new Uint8Array(a*r);return new ae({width:a,height:r,pixels:void 0,mask:O,validPixelCount:0})}const{bandIds:p}=this.ioConfig,g=this._getBandSegmentCount(),y=[];let m=0;for(m=0;m<g;m++)p&&!p.includes(m)||y.push(this.request(this._files.data,{range:{from:u[m].from,to:u[m].to},responseType:"array-buffer",signal:i.signal}));const d=await Promise.all(y),w=d.map(O=>O.data.byteLength).reduce((O,N)=>O+N),R=new Uint8Array(w),I=[];let b=0;for(m=0;m<g;m++)I.push(b),R.set(new Uint8Array(d[m].data),b),b+=d[m].data.byteLength;const v=J.get(this.rasterInfo.storageInfo.compression).decoderFormat,x=await this.decodePixelBlock(R.buffer,{width:a,height:r,format:v,planes:p?.length||o,offsets:I,pixelType:l});if(x==null)return null;let{noDataValue:_}=this.rasterInfo;if(_!=null&&v!=="lerc"&&!x.mask&&(_=_[0],_!=null)){const O=x.width*x.height,N=new Uint8Array(O);if(Math.abs(_)>1e24)for(m=0;m<O;m++)Math.abs((x.pixels[0][m]-_)/_)>1e-6&&(N[m]=1);else for(m=0;m<O;m++)x.pixels[0][m]!==_&&(N[m]=1);x.mask=N}let T=0,k=0;if(h!==a||f!==r){let O=x.mask;if(O)for(m=0;m<r;m++)if(k=m*a,m<f)for(T=h;T<a;T++)O[k+T]=0;else for(T=0;T<a;T++)O[k+T]=0;else for(O=new Uint8Array(a*r),x.mask=O,m=0;m<f;m++)for(k=m*a,T=0;T<h;T++)O[k+T]=1}return x}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:i,files:a}=this._parseHeader(s.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const d=await this._fetchAuxiliaryData(t);d!=null&&(i.statistics=d.statistics??i.statistics,i.histograms=d.histograms,d.histograms&&i.statistics==null&&(i.statistics=we(d.histograms)))}r&&this.updateImageSpaceRasterInfo(i),this._set("rasterInfo",i),this._files=a;const c=await this.request(a.index,{responseType:"array-buffer",signal:e});this._storageIndex=Yt(c.data);const{blockWidth:o,blockHeight:l}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:f}=this.rasterInfo,p=[],g=this._getBandSegmentCount();let y=0,m=-1;for(;y<this._storageIndex.length;){m++;const d=Math.ceil(h/o/u**m)-1,w=Math.ceil(f/l/u**m)-1;y+=(d+1)*(w+1)*g*4,p.push({maxRow:w,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=p,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}_getBandSegmentCount(){return J.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:i,blockHeight:a,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:c}=this.rasterInfo,o=this._getBandSegmentCount();let l,u,h,f=0,p=0;for(h=0;h<t;h++)p=r**h,l=Math.ceil(n/i/p),u=Math.ceil(c/a/p),f+=l*u;p=r**t,l=Math.ceil(n/i/p),u=Math.ceil(c/a/p),f+=e*l+s,f*=4*o;const g=this._storageIndex.subarray(f,f+4*o);let y=0,m=0;const d=[];for(let w=0;w<o;w++)y=g[4*w]*2**32+g[4*w+1],m=y+g[4*w+2]*2**32+g[4*w+3],d.push({from:y,to:m});return{ranges:d,actualTileWidth:s<l-1?i:Math.ceil(n/p)-i*(l-1),actualTileHeight:e<u-1?a:Math.ceil(c/p)-a*(u-1)}}_parseHeader(t){const e=A(t,"MRF_META/Raster");if(!e)throw new F("mrf:open","not a valid MRF format");const s=A(e,"Size"),i=parseInt(s.getAttribute("x"),10),a=parseInt(s.getAttribute("y"),10),r=parseInt(s.getAttribute("c"),10),n=(L(e,"Compression")||"none").toLowerCase();if(!J.has(n))throw new F("mrf:open","currently does not support compression "+n);const c=L(e,"DataType")||"UInt8",o=D.get(c);if(o==null)throw new F("mrf:open","currently does not support pixel type "+c);const l=A(e,"PageSize"),u=parseInt(l.getAttribute("x"),10),h=parseInt(l.getAttribute("y"),10),f=A(e,"DataValues");let p,g;if(f&&(g=f.getAttribute("NoData"),g!=null&&(p=g.trim().split(" ").map(O=>parseFloat(O)))),A(t,"MRF_META/CachedSource"))throw new F("mrf:open","currently does not support MRF referencing other data files");const y=A(t,"MRF_META/GeoTags"),m=A(y,"BoundingBox");let d,w=!1;if(m!=null){const O=parseFloat(m.getAttribute("minx")),N=parseFloat(m.getAttribute("miny")),M=parseFloat(m.getAttribute("maxx")),B=parseFloat(m.getAttribute("maxy")),j=L(y,"Projection")||"";let Q=E.WGS84;if(j!=="LOCAL_CS[]")if(j.toLowerCase().startsWith("epsg:")){const ce=Number(j.slice(5));isNaN(ce)||ce===0||(Q=new E({wkid:ce}))}else Q=le(j)??E.WGS84;else w=!0,Q=new E({wkid:3857});d=new z(O,N,M,B),d.spatialReference=Q}else w=!0,d=new z({xmin:-.5,ymin:.5-a,xmax:i-.5,ymax:.5,spatialReference:new E({wkid:3857})});const R=A(t,"MRF_META/Rsets"),I=parseInt(R?.getAttribute("scale")||"2",10),b=d.spatialReference,v=new xe({origin:new H({x:d.xmin,y:d.ymax,spatialReference:b}),blockWidth:u,blockHeight:h,pyramidBlockWidth:u,pyramidBlockHeight:h,compression:n,pyramidScalingFactor:I}),x=new H({x:d.width/i,y:d.height/a,spatialReference:b}),_=new oe({width:i,height:a,extent:d,isPseudoSpatialReference:w,spatialReference:b,bandCount:r,pixelType:o,pixelSize:x,noDataValue:p,storageInfo:v}),T=L(t,"datafile"),k=L(t,"IndexFile");return{rasterInfo:_,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",J.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return ve(e)}catch{return null}}};function Yt(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,i,a,r,n;if(Rt){for(s=new Uint8Array(t),a=new ArrayBuffer(t.byteLength),i=new Uint8Array(a),r=0;r<t.byteLength/4;r++)for(n=0;n<4;n++)i[4*r+n]=s[4*r+3-n];e=new Uint32Array(a)}else e=new Uint32Array(t);return e}S([C()],q.prototype,"_files",void 0),S([C()],q.prototype,"_storageIndex",void 0),S([C({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0),q=S([W("esri.layers.support.rasterDatasets.MRFRaster")],q);const Xt=q;function Kt(t){const e=t.fields,s=t.records,i=e.some(l=>l.name.toLowerCase()==="oid")?"OBJECTID":"OID",a=[{name:i,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(l=>({name:l.name,type:"esriFieldType"+l.typeName,alias:l.name}))),r=a.map(l=>l.name),n=[];let c=0,o=0;return s.forEach(l=>{const u={};for(u[i]=c++,o=1;o<r.length;o++)u[r[o]]=l[o-1];n.push({attributes:u})}),{displayFieldName:"",fields:a,features:n}}class Zt{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),i=3&s.getUint8(0);if(i!==3)return{header:{version:i},recordSet:null};const a=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),c={version:i,recordCount:a,headerByteCount:r,recordByteCount:n};let o=32;const l=[],u=[];let h;if(i===3){for(;s.getUint8(o)!==13;)h=String.fromCharCode(s.getUint8(o+11)).trim(),l.push({name:Te(new Uint8Array(e,o,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:s.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;u.length<a&&e.byteLength-o>n;){const f=[];s.getUint8(o)===32?(o+=1,l.forEach(p=>{if(p.type==="C")f.push(Te(new Uint8Array(e,o,p.length)).trim());else if(p.type==="N")f.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim(),10));else if(p.type==="F")f.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim()));else if(p.type==="D"){const g=String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim();f.push(new Date(parseInt(g.slice(0,4),10),parseInt(g.slice(4,6),10)-1,parseInt(g.slice(6,8),10)))}o+=p.length}),u.push(f)):o+=n}}return{header:c,fields:l,records:u,recordSet:Kt({fields:l,records:u})}}}const ye=(t,e)=>t.get(e)?.values,Z=(t,e)=>t.get(e)?.values?.[0];let U=class extends Y{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,s))return null;const a=await this._fetchRawTiffTile(t,e,s,!1,i);if(a!=null&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,s,!0,i);r!=null&&r.pixels[0]instanceof Uint8Array&&(a.mask=r.pixels[0])}return a}async _open(t){const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new F("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:a,isBigTiff:r}=_t(s),n=[];await this._readIFDs(n,s,i,a,0,r?8:4,e);const{imageInfo:c,rasterInfo:o}=Qt(n),l=Ot(n),u=Ct(n);if(this._headerInfo={littleEndian:i,isBigTiff:r,ifds:n,pyramidIFDs:l,maskIFDs:u,...c},this._set("rasterInfo",o),!c.isSupported)throw new F("tiffraster:open","this tiff is not supported: "+c.message);if(!c.tileWidth)throw new F("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&ge.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const h=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&h===2)throw new F("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:p,skipExtensions:g=[]}=this.ioConfig;if(!g.includes("aux.xml")&&!p){const y=await this._fetchAuxiliaryMetaData(t);y!=null&&es(y,o)}g.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||p||(o.attributeTable=await this._fetchAuxiliaryTable(t),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),p&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(t,e,s,i,a,r=4,n){if(!i)return null;(i>=e.byteLength||i<0)&&(e=(await this.request(this.url,{range:{from:i+a,to:i+a+this._bufferSize},responseType:"array-buffer",signal:n})).data,a=i+a,i=0);const c=await this._readIFD(e,s,i,a,te.tiffTags,r,n);if(t.push(c.ifd),!c.nextIFD)return null;await this._readIFDs(t,e,s,c.nextIFD-a,a,r,n)}async _readIFD(t,e,s,i,a=te.tiffTags,r=4,n){if(!t)return null;const c=Ft(t,e,s,i,a,r);if(c.success){const o=[];if(c.ifd?.forEach(l=>{l.values||o.push(l)}),o.length>0){const l=o.map(h=>h.offlineOffsetSize).filter(de),u=Math.min.apply(null,l.map(h=>h[0]));if(Math.min.apply(null,l.map(h=>h[0]+h[1]))-u<=this._bufferSize){const{data:h}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:n});t=h,i=u,o.forEach(f=>Mt(t,e,f,i))}}if(c.ifd?.has("GEOKEYDIRECTORY")){const l=c.ifd.get("GEOKEYDIRECTORY"),u=l?.values;if(u&&u.length>4){const h=u[0]+"."+u[1]+"."+u[2],f=await this._readIFD(t,e,l.valueOffset+6-i,i,te.geoKeys,2,n);l.data=f.ifd,l.data&&l.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return c}if(c.requiredBufferSize&&c.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:i,to:i+c.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<c.requiredBufferSize?null:this._readIFD(t,e,0,i,te.tiffTags,4,n)}async _fetchRawTiffTile(t,e,s,i,a={}){const r=this._getTileLocation(t,e,s,i);if(!r)return null;const{ranges:n,actualTileWidth:c,actualTileHeight:o,ifd:l}=r,u=n.map(v=>this.request(this.url,{range:v,responseType:"array-buffer",signal:a.signal})),h=await Promise.all(u),f=h.map(v=>v.data.byteLength).reduce((v,x)=>v+x),p=h.length===1?h[0].data:new ArrayBuffer(f),g=[0],y=[0];if(h.length>1){const v=new Uint8Array(p);for(let x=0,_=0;x<h.length;x++){const T=h[x].data;v.set(new Uint8Array(T),_),g[x]=_,_+=T.byteLength,y[x]=T.byteLength}}const{blockWidth:m,blockHeight:d}=this.getBlockWidthHeight(t),w=await this.decodePixelBlock(p,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:g,sizes:y},width:m,height:d,planes:null,pixelType:null});if(w==null)return null;let R,I,b;if(c!==m||o!==d){let v=w.mask;if(v)for(R=0;R<d;R++)if(b=R*m,R<o)for(I=c;I<m;I++)v[b+I]=0;else for(I=0;I<m;I++)v[b+I]=0;else for(v=new Uint8Array(m*d),w.mask=v,R=0;R<o;R++)for(b=R*m,I=0;I<c;I++)v[b+I]=1}return w}_getTileLocation(t,e,s,i=!1){const{firstPyramidLevel:a,blockBoundary:r}=this.rasterInfo.storageInfo,n=t===0?0:t-(a-1),{_headerInfo:c}=this;if(!c)return null;const o=i?c.maskIFDs[n]:n===0?c?.ifds[0]:c?.pyramidIFDs[n-1];if(!o)return null;const l=kt(o,c),u=ye(o,"TILEOFFSETS");if(u===void 0)return null;const h=ye(o,"TILEBYTECOUNTS"),{minRow:f,minCol:p,maxRow:g,maxCol:y}=r[n];if(e>g||s>y||e<f||s<p)return null;const m=Z(o,"IMAGEWIDTH"),d=Z(o,"IMAGELENGTH"),w=Z(o,"TILEWIDTH"),R=Z(o,"TILELENGTH"),I=[];if(l){const{bandCount:b}=this.rasterInfo;for(let v=0;v<b;v++){const x=v*(g+1)*(y+1)+e*(y+1)+s;I[v]={from:u[x],to:u[x]+h[x]-1}}}else{const b=e*(y+1)+s;I.push({from:u[b],to:u[b]+h[b]-1})}for(let b=0;b<I.length;b++)if(I[b].from==null||!I[b].to||I[b].to<0)return null;return{ranges:I,ifd:o,actualTileWidth:s===y&&m%w||w,actualTileHeight:e===g&&d%R||R}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return ve(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),s=Zt.parse(e);return s?.recordSet?Me.fromJSON(s.recordSet):null}catch{return null}}};function Qt(t){const e=Pt(t),{width:s,height:i,tileWidth:a,tileHeight:r,planes:n,pixelType:c,compression:o,firstPyramidLevel:l,maximumPyramidLevel:u,pyramidBlockWidth:h,pyramidBlockHeight:f,pyramidResolutions:p,tileBoundary:g,affine:y,metadata:m}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let w=le(d),R=!!e.isPseudoGeographic;w==null&&(R=!0,w=new E({wkid:3857}));const I=new z({...e.extent,spatialReference:w}),b=new H(I?{x:I.xmin,y:I.ymax,spatialReference:w}:{x:0,y:0}),v=new xe({blockWidth:a,blockHeight:r,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:o,origin:b,firstPyramidLevel:l,maximumPyramidLevel:u,pyramidResolutions:p,blockBoundary:g}),x=new H({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/i,spatialReference:w}),_=m?{BandProperties:m.bandProperties,DataType:m.dataType}:{};let T=null;const k=Z(t[0],"PHOTOMETRICINTERPRETATION"),O=ye(t[0],"COLORMAP");if(k<=3&&O?.length>3&&O.length%3==0){T=[];const M=O.length/3;for(let B=0;B<M;B++)T.push([B,O[B]>>>8,O[B+M]>>>8,O[B+2*M]>>>8])}const N=new oe({width:s,height:i,bandCount:n,pixelType:c,pixelSize:x,storageInfo:v,spatialReference:w,isPseudoSpatialReference:R,keyProperties:_,extent:I,colormap:T,statistics:m?m.statistics:null});if(y?.length&&(N.nativeExtent=new z({xmin:-.5,ymin:.5-i,xmax:s-.5,ymax:.5,spatialReference:w}),N.transform=new Ie({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),N.extent=N.transform.forwardTransform(N.nativeExtent),N.pixelSize=new H({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/i,spatialReference:w}),v.origin.x=-.5,v.origin.y=.5),p){const{x:M,y:B}=N.pixelSize;p.forEach(j=>{j.x*=M,j.y*=B})}return{imageInfo:e,rasterInfo:N}}function es(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=we(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new H({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}S([C()],U.prototype,"_files",void 0),S([C()],U.prototype,"_headerInfo",void 0),S([C()],U.prototype,"_bufferSize",void 0),S([C({type:String,json:{write:!0}})],U.prototype,"datasetFormat",void 0),U=S([W("esri.layers.support.rasterDatasets.TIFFRaster")],U);const ts=U,$=new Map;$.set("MRF",{desc:"Meta Raster Format",constructor:Xt}),$.set("TIFF",{desc:"GeoTIFF",constructor:ts}),$.set("RasterTileServer",{desc:"Raster Tile Server",constructor:qt}),$.set("JPG",{desc:"JPG Raster Format",constructor:ie}),$.set("PNG",{desc:"PNG Raster Format",constructor:ie}),$.set("GIF",{desc:"GIF Raster Format",constructor:ie}),$.set("BMP",{desc:"BMP Raster Format",constructor:ie}),$.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Ut}),$.set("MEMORY",{desc:"In Memory Raster Format",constructor:be});class me{static get supportedFormats(){const e=new Set;return $.forEach((s,i)=>e.add(i)),e}static async open(e){const{url:s,ioConfig:i,source:a,sourceJSON:r}=e;let n=e.datasetFormat??i?.datasetFormat;n==null&&(s.includes(".")?n=s.slice(s.lastIndexOf(".")+1).toUpperCase():a?.type?.toLowerCase()==="coverage"?n="CovJSON":a?.extent&&a.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const c={url:s,source:a,sourceJSON:r,datasetFormat:n,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(c).forEach(h=>{c[h]==null&&delete c[h]}),n){if(!this.supportedFormats.has(n))throw new F("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new F("rasterfactory:open",`cannot open raster: ${s}`);const h=new($.get(n)).constructor(c);return await h.open({signal:e.signal}),h}const o=Array.from($.keys()).filter(h=>h!=="CovJSON"&&h!=="Memory");let l=0;const u=()=>{if(n=o[l++],!n||n==="CRF")return null;const h=new($.get(n)).constructor(c);return h.open({signal:e.signal}).then(()=>h).catch(()=>u())};return u()}static register(e,s,i){$.has(e.toUpperCase())||$.set(e.toUpperCase(),{desc:s,constructor:i})}}let P=class extends Xe(nt(et(tt(at(Ke(Ze(ot(Ye(rt(Ve(ze.ClonableMixin(qe)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=je(async(e,s,i)=>{const{save:a,saveAs:r}=await Ne(()=>import("./imageryUtils-9697ZxCx.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12]),import.meta.url);switch(e){case se.SAVE:return a(this,s);case se.SAVE_AS:return r(this,i,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(Ue).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[pt("Pixel Value"),ft("Raw Pixel Value")],e=this.raster?.rasterInfo??this.serviceRasterInfo,s=e?.attributeTable;if(s){const r=ht(s);t.push(...r)}const i=e?.dataType,a=e?.multidimensionalInfo;if((i==="vector-magdir"||i==="vector-uv")&&a!=null){const r=a.variables[0].unit?.trim(),n=mt(r),c=dt();t.push(n,c)}if(a){const r=gt(a);t.push(...r)}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=t?.visibleFieldNames??new Set(e.map(({name:r})=>r).filter(r=>r!==yt.rawServicePixelValue)),i=Dt({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:a}=this.raster;return i?.fieldInfos&&a&&wt(i.fieldInfos,a),i}async generateRasterInfo(t,e){if(t=Ge(Ce,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(t,e);return s}catch(s){throw s instanceof F?s:new F("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(se.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(se.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const i=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new F("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${i}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:i,rasterFunction:a,source:r}=this;if(!i&&!r)throw new F("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,t):a?await this._openFromUrlWithRasterFunction(i,a,t):await this._openFromUrl(i,t)}const s=this.raster.rasterInfo;if(!s)throw new F("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(He(()=>this.customParameters,i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const i=[t];e&&Et(e.toJSON(),i);const a=await Promise.all(i.map(n=>me.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),r=a.findIndex(n=>n==null);if(r>-1)throw new F("imagery-tile-layer:open",`cannot open raster: ${i[r]}`);return this._primaryRasters=a,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await me.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new F("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){const s="the tiled imagery data source is not supported",i=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!i)throw new F("imagery-tile-layer:open",s);i==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const a=await me.open({url:"",source:t,datasetFormat:i,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(a==null)throw new F("imagery-tile-layer:open",s);this._primaryRasters=[a],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=a}async _openFunctionRaster(t,e){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const i=Bt(t.functionDefinition?.toJSON()??t.toJSON(),s),a=new Qe({rasterFunction:i});return await a.open(e),a}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof F&&ge.getLogger(this).error("imagery-tile-layer:open",s.message),ge.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};S([C({clonable:!1})],P.prototype,"_primaryRasters",void 0),S([C(lt)],P.prototype,"legendEnabled",void 0),S([C({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],P.prototype,"isReference",void 0),S([C({type:["show","hide"]})],P.prototype,"listMode",void 0),S([C({json:{read:!0,write:!0}})],P.prototype,"blendMode",void 0),S([C({type:Ce,json:{name:"renderingRule",write:!0}})],P.prototype,"rasterFunction",void 0),S([C()],P.prototype,"sourceJSON",void 0),S([C({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],P.prototype,"version",void 0),S([C({readOnly:!0,json:{read:!1}})],P.prototype,"type",void 0),S([C({type:["ArcGISTiledImageServiceLayer"]})],P.prototype,"operationalLayerType",void 0),S([C({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],P.prototype,"popupEnabled",void 0),S([C({type:We,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],P.prototype,"popupTemplate",void 0),S([C({readOnly:!0})],P.prototype,"defaultPopupTemplate",null),S([C({readOnly:!0,type:[Se]})],P.prototype,"fields",void 0),S([C({readOnly:!0,type:[Se]})],P.prototype,"rasterFields",null),S([C({constructOnly:!0})],P.prototype,"source",void 0),P=S([W("esri.layers.ImageryTileLayer")],P);const Oi=P;export{Oi as default};
