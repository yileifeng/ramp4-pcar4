import{fv as J,aN as N,df as v,fw as X,fp as Y,bO as k,fx as z,bC as H,aK as B,b4 as C,dK as Q,dH as q,dJ as U,Q as W,aM as M,x,z as V,K as j}from"./main-BC8gbEPx.js";import Z from"./GraphicsLayer-l3ld2Cmz.js";import{l as F}from"./TelemetryDisplay-CZaY_EUp.js";import{u as $}from"./OverlayContainer-CrNbYcDi.js";import{n as ee}from"./vec2f64-CEUyUoff.js";import{O as g}from"./projection-CS2SYuKw.js";import{e as te}from"./Container-CAAmY-5G.js";import{a as ie,S as re,y as se}from"./LayerView-B6gjJHK-.js";import{D as ne}from"./enums-DBi1-Mm2.js";import{p as ae,w as oe}from"./Texture-CgORJFQB.js";import{t as le}from"./GraphicContainer-UqpgK5SW.js";import{A as he}from"./GraphicsView2D-7-Ln7oAd.js";const b=2;class me extends te{constructor(e){super(),this.element=e,this._handles=new J,this.isWrapAround=!1,this.perspectiveTransform=ee(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(N(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(X(t,"play",()=>this.requestRender()))},v))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=Y(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:s}=e,{videoWidth:o,videoHeight:r}=t;if(o!==0&&r!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new ae;i.wrapMode=ne.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=o,i.height=r,this.texture=new oe(s,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,s,o){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(e,i,s);const{controlPoints:l,horizon:m}=i,h=Math.sqrt(l.length),y=h,{x:n,y:p}=e,u=this._vertices,T=l[0],O=l[h-1],K=l[(y-1)*h],I=l[(y-1)*h+h-1],G=g(m?m[0].mapPoint:T.mapPoint,s),P=g(m?m[1].mapPoint:O.mapPoint,s),f=g(K.mapPoint,s),D=g(I.mapPoint,s);this.clipGeometry=m?new ie({geometry:k.fromJSON({rings:[[[f.x,f.y],[D.x,D.y],[P.x,P.y],[G.x,G.y],[f.x,f.y]]],spatialReference:s})}):null;for(let c=0;c<l.length;c++){const L=l[c],{sourcePoint:S,mapPoint:A}=L;if(S==null||A==null)continue;const w=g(A,s);u[c*b+0]=w.x-n,u[c*b+1]=w.y-p}let E=t;if(o){const c=Math.min(G.x,P.x,f.x,D.x),L=Math.max(G.x,P.x,f.x,D.x),{worldWidth:S,xBounds:A}=o,[w,R]=A;c<w&&L>w?E=S:L>R&&c<R&&(E=-S)}this.wrapAroundShift=E,this.isWrapAround=E!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:o}=t,r=Math.sqrt(o.length),i=r,l=new Float32Array(b*o.length),m=new Uint16Array(2*o.length);for(let n=0;n<o.length;n++){const p=o[n],{sourcePoint:u,mapPoint:T}=p;if(u==null||T==null)continue;const O=g(T,s);l[n*b+0]=O.x-e.x,l[n*b+1]=O.y-e.y,m[2*n+0]=u.x,m[2*n+1]=u.y}const h=new Uint16Array(i*r+(i-2)*(r+2));let y=0;for(let n=0;n<i;n++){for(let p=0;p<r;p++)h[y++]=n*r+p,h[y++]=(n+1)*r+p;n<i-2&&(h[y++]=(n+1)*r+(r-1),h[y++]=(n+1)*r)}this._vertices=l,this._texCoords=m,this._indices=h}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let s=null;if(t){const o=t.startX,r=t.startY,i=t.endX,l=t.endY;s=[{sourcePoint:z(o,r),mapPoint:new H(t.startLongitude,t.startLatitude)},{sourcePoint:z(i,l),mapPoint:new H(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:s}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const s=new Array(t),o=Math.max(...e.map(({x:i})=>i)),r=this.element.videoWidth/o;for(let i=0;i<t;i++){const{x:l,y:m,lat:h,lon:y}=e[i];s[i]={sourcePoint:z(l*r,-m*r),mapPoint:new H(y,h)}}return s}}const _=new B([255,127,0]);let d=class extends re(se){constructor(){super(...arguments),this._graphicsLayer=new Z,this._frameOutlineGraphic=new C({symbol:new Q({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new C({symbol:new q({color:_})}),this._lineOfSightGraphic=new C({symbol:new q({color:_})}),this._sensorLocationGraphic=new C({symbol:new U({color:_})}),this._frameCenterGraphic=new C({symbol:new U({color:_,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=W(this._graphicsLayer)}initialize(){this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},v)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new F({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new $,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new he({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new le(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),v),M(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),v)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=W(this.graphicsView)}supportsSpatialReference(a){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(a){this.graphicsView.processUpdate(a)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:a}=this.layer,{visibleTelemetryElements:e}=this;a&&e&&(e.frameOutline&&a.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&a.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&a.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&a.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&a.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const a=new me(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:e}=this;e?.frame?(a.frameHorizonPoints=this.layer.frameHorizonPoints,a.groundControlPoints=this.layer.groundControlPoints,a.opacity=1):a.opacity=0},v)]),this._overlayContainer.addChild(a),this.view.stage.requestRender()}};x([V()],d.prototype,"graphicsView",void 0),x([V()],d.prototype,"layer",void 0),x([V()],d.prototype,"symbolColor",void 0),x([V({type:F})],d.prototype,"visibleTelemetryElements",void 0),d=x([j("esri.views.2d.layers.VideoLayerView2D")],d);const ye=d;export{ye as default};
