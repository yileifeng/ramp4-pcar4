import{M as B,bz as z,aK as Ne,jj as Ee,x as S,z as F,K as H,dE as Se,s as O,jk as Be,b$ as ue,aY as De,u as Ae,an as Le,I as Je,bC as j,n as he,aX as ze,e4 as Ue,X as Ge,bq as He,aM as je,b7 as We}from"./main-BC8gbEPx.js";import{S as Ve}from"./MultiOriginJSONSupport-BMkaNBEB.js";import{f as qe}from"./Layer-CMe3ITJC.js";import{l as $e}from"./ArcGISService-BYT8tHGm.js";import{p as Ye}from"./BlendLayer-CcxvVUY7.js";import{e as Xe}from"./CustomParametersMixin-CDwqQbWD.js";import{X as q,i as pe,t as J,n as Te,e as A,o as W,u as ee,K as Ke,a as Ze}from"./xmlUtilities-DKAUNjcU.js";import{b as Qe}from"./OperationalLayer-BZK79oBo.js";import{j as et}from"./PortalLayer-DiglAdqG.js";import{c as tt,f as st,o as at}from"./RasterPresetRendererMixin-D4Cw1g2_.js";import{f as it}from"./RefreshableLayer-CMtsdL-v.js";import{t as rt}from"./ScaleRangeLayer-DmABrUi1.js";import{l as nt}from"./TemporalLayer-CDDG_gSN.js";import{d as ot}from"./commonProperties-Bzkkp1tE.js";import{y as Re}from"./Field-CImhaDGk.js";import{p as lt,N as ct,o as ut,c as ht,b as pt,e as ft,$ as mt,j as dt,t as gt,k as yt}from"./multidimensionalUtils-Cp9Fyxq1.js";import{w as _e}from"./ImageHistogramParameters-DPaHGAKB.js";import{g as te,b as xt,E as wt,W as It,T as bt}from"./dataUtils-DwTUUyvb.js";import{d as se,h as vt,m as Ce,p as fe,P as St,n as me,r as Tt,b as Fe,F as Rt,N as _t,U as Ct,c as ae,B as Ft,L as Ot,R as Mt,D as kt}from"./RasterSymbolizer-D6hosp06.js";import{d as Oe}from"./FeatureSet-DagJuGrs.js";import{y as de,c as Pt}from"./PolynomialTransform-CNhhKnJj.js";import{z as ie}from"./TileInfo-DcHqeHqG.js";import{T as Nt}from"./TilemapCache-DQYCiQrL.js";import{w as Et,T as Bt}from"./rasterFunctionHelper-DnZaz54a.js";import{p as Dt}from"./popupUtils-6aECuRwv.js";import{A as re}from"./interfaces-Cwm0pihk.js";function Me(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function ke(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function At(t){const{axes:e}=t.domain,s=Object.keys(e),a=[],i=[];let r=-1,n=-1,l=[];for(let y=0;y<s.length;y++){const R=s[y];Me(R)?r=y:ke(R)&&(n=y);const I=e[R],b=[];if("values"in I){I.values.forEach(x=>b.push(typeof x=="string"?new Date(x).getTime():x));const v=b[1]-b[0];a.push([b[0]-.5*v,b[b.length-1]+.5*v]),i.push(v)}else{const{start:v,stop:x,num:_}=I,T=(x-v)/(_-1);a.push([v-.5*T,x+.5*T]),i.push(T);for(let k=0;k<_;k++)b.push(v+T*k)}l.push({name:R,values:b,extent:[b[0],b[b.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),l=l.filter((y,R)=>!(R===r||R===n));const{referencing:o}=t.domain,c=o.find(y=>y.coordinates.includes(s[r])).system.id,u=c?.slice(c.lastIndexOf("/")+1),f=u==null||u==="CRS84"?4326:Number(u),p=new B({wkid:f}),[h,g]=a[r],[w,m]=a[n],d=new z({xmin:h,xmax:g,ymin:w,ymax:m,spatialReference:p});return{width:Math.round(d.width/i[r]),height:Math.round(d.height/i[n]),extent:d,dimensions:l}}function ge(t){const e=Ee();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function ye(){return Math.round(255*Math.random())}function Lt(t){const e={},{parameters:s}=t;if(!s)return e;for(const[a,i]of Object.entries(s)){const{type:r,description:n,unit:l,categoryEncoding:o,observedProperty:c}=i;if(r==="Parameter"&&(e[a]={},n&&(e[a].description=ge(n)),l&&(e[a].unit=l.label?ge(l.label):null,e[a].symbol=l.symbol?.value),o)){const u=Object.entries(o).map((h,g)=>({OID:g,Value:Number(h[1]),ClassName:h[0].slice(h[0].lastIndexOf("/")+1),Count:1}));let f=!1;c?.categories?.length&&(c.categories.forEach(h=>{if(!h.id)return;const g=h.id.slice(h.id.lastIndexOf("/")+1),w=u.find(d=>d.ClassName===g);if(!w)return;const m=h.label?ge(h.label):null;if(w.Label=m,h.preferredColor){const d=Ne.fromHex(h.preferredColor);d&&(f=!0,w.Red=d.r,w.Green=d.g,w.Blue=d.b)}}),f&&u.forEach(h=>{h.Red==null&&(h.Red=ye(),h.Green=ye(),h.Blue=ye())}));const p={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(h=>({attributes:h}))};f&&p.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[a].attributeTable=p}}return e}function Jt(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let a=0;a<t.length;a++){const i=t[a];i!=null&&(i<e&&(e=i),i>s&&(s=i))}return xt(e,s)}function zt(t,e,s){const a=t.map((o,c)=>({name:o,count:e[c]})).sort((o,c)=>o.name>c.name?-1:1),i=(r=1,o=>r*=o.count);var r;const n=[...a.slice(1),{name:"",count:1}].reverse().map(i).reverse();let l=0;for(let o=t.length-1;o>=0;o--)l+=n[a.findIndex(({name:c})=>c===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return l}function Ut(t){const{width:e,height:s,extent:a,dimensions:i}=At(t),{ranges:r}=t,n=Object.keys(r).sort((p,h)=>p<h?-1:1),l=[];for(let p=0;p<n.length;p++){const h=n[p];i?.length&&l.push({name:h,dimensions:i})}const o=Lt(t);l.forEach(p=>o[p.name]&&Object.assign(p,o[p.name]));const c=l.length?{variables:l}:void 0,u=[];for(let p=0;p<n.length;p++){const h=n[p],{values:g,dataType:w,axisNames:m,shape:d}=r[h],y=d.length>2?p*d.slice(0,-2).reduce((_,T)=>_*T):0,R=m.slice(0,-2),I=d.slice(0,-2),b=w==="float"?"f32":Jt(g),v=e*s,x=g.length/v;for(let _=0;_<x;_++){const T=te.createEmptyBand(b,v),k=new Uint8Array(v).fill(255);let C=!1;const N=_*v;for(let M=0;M<v;M++){const D=g[N+M];D==null?(k[M]=0,C=!0):T[M]=D}if(p===0||i?.length){const M=new te({width:e,height:s,mask:C?k:null,pixels:[T],pixelType:b});M.updateStatistics(),i?.length?u[zt(R,I,_)+y]=M:u.push(M)}else{const M=u[_];M.pixels.push(T),C?M.mask&&(M.mask=te.combineBandMasks([M.mask,k])):M.mask=C?k:null}}}const f=Object.values(o).find(p=>p.attributeTable)?.attributeTable;return{extent:a,pixelBlocks:u,multidimensionalInfo:c,attributeTable:f,bandNames:c?void 0:n}}let $=class extends q{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,a={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,l]=r.storageInfo.tileInfo.size,{sliceId:o}=a,{pixelBlocks:c}=this.source,u={pixelBlock:o==null?c[0]:c[o],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:l},level:t,row:e,col:s},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,a):wt(u);return Promise.resolve(f)}const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:a,statistics:i,histograms:r,name:n,nativeExtent:l,transform:o}=e,c=s[0],{width:u,height:f,pixelType:p}=c,h=e.extent??new z({xmin:-.5,ymin:.5,xmax:u-.5,ymax:f-.5,spatialReference:new B({wkid:3857})}),g=e.isPseudoSpatialReference??!e.extent,w={x:h.width/u,y:h.height/f},m={...e.keyProperties};a&&(m.DataType="Thematic");const d=new se({width:u,height:f,pixelType:p,extent:h,nativeExtent:l,attributeTable:a,transform:o,pixelSize:w,spatialReference:h.spatialReference,bandCount:c.pixels.length,keyProperties:m,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:g,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(d),this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),d.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,d.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},t),d.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,s){const{rasterInfo:a}=this,i=a.storageInfo.maximumPyramidLevel??0,r=a.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:i,useBilinear:r},s):Promise.resolve(It(t,e,i,r)),l=a.statistics!=null,o=a.histograms!=null,c=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve(vt(t)),u=await Se([n,c]);if(!u[0].value&&u[1].value)throw new O("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,l||(a.statistics=u[1].value?.statistics),o||(a.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let a=0;a<e.variables.length;a++){const i=e.variables[a];if(i.statistics)continue;const r=i.dimensions.map(c=>new lt({variableName:i.name,dimensionName:c.name,values:[c.values?.[0]??c.extent?.[0]],isSlice:!0})),n=ct(r,e),l=n==null?null:t[n];if(l==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},s):Ce(l);i.statistics=o.statistics,i.histograms||(i.histograms=o.histograms)}}};S([F({type:String,json:{write:!0}})],$.prototype,"datasetFormat",void 0),S([F()],$.prototype,"source",void 0),S([F()],$.prototype,"url",null),$=S([H("esri.layers.support.rasterDatasets.InMemoryRaster")],$);const xe=$;let X=class extends q{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(t,e,s,a={}){return this._inMemoryRaster.fetchRawTile(t,e,s,a)}async _open(t){const{extent:e,pixelBlocks:s,multidimensionalInfo:a,attributeTable:i,bandNames:r}=await this._fetchData(t),{statistics:n,histograms:l}=Ce(s[0]),o=r?.map(p=>({BandName:p})),c={DataType:i?"Thematic":a?"Scientific":"Generic",BandProperties:o},u=new xe({source:{extent:e,pixelBlocks:s,attributeTable:i?Oe.fromJSON(i):null,multidimensionalInfo:a,statistics:n,histograms:l,keyProperties:c,isPseudoSpatialReference:!1}});await u.open(),this._inMemoryRaster=u;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",u.rasterInfo)}async _fetchData(t){const e=this.source??(await this.request(this.url,{signal:t?.signal})).data,s="imagery-tile-layer:open-coverage-json";if(e.type?.toLowerCase()!=="coverage"||e.domain?.domainType?.toLowerCase()!=="grid")throw new O(s,"Only coverage with Grid domain type is supported");if(!e.ranges)throw new O(s,"Missing ranges in the grid coverage data");if(!e.domain.referencing?.length)throw new O(s,"Missing domain referencing in the grid coverage data");const a=Object.values(e.ranges);for(let i=0;i<a.length;i++){const{axisNames:r,shape:n,type:l,values:o}=a[i];if(!(l.toLowerCase()==="ndarray"&&o?.length&&r?.length&&n?.length))throw new O(s,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(Me(r[r.length-1])&&ke(r[r.length-2])))throw new O(s,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Ut(e)}};S([F({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),S([F({constructOnly:!0})],X.prototype,"source",void 0),X=S([H("esri.layers.support.rasterDatasets.CovJSONRaster")],X);const Gt=X;function Pe(t,e){if(!t||!e)return null;const s=[];for(let a=0;a<t.length;a++)s.push(t[a]),s.push(e[a]);return s}function Ht(t){const e=A(t,"GeodataXform"),s=ne(W(e,"SpatialReference/WKID")||J(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const a=W(e,"PolynomialOrder")??1,i=ee(e,"CoeffX/Double"),r=ee(e,"CoeffY/Double"),n=ee(e,"InverseCoeffX/Double"),l=ee(e,"InverseCoeffY/Double"),o=Pe(i,r),c=Pe(n,l);return{spatialReference:s,transform:o&&c&&o.length&&c.length?new de({spatialReference:s,polynomialOrder:a,forwardCoefficients:o,inverseCoefficients:c}):null}}function jt(t){const e=W(t,"NoDataValue"),s=A(t,"Histograms/HistItem"),a=W(s,"HistMin"),i=W(s,"HistMax"),r=W(s,"BucketCount"),n=J(s,"HistCounts")?.split("|").map(p=>Number(p));let l,o,c,u;Te(t,"Metadata/MDI").forEach(p=>{const h=Number(p.textContent??p.nodeValue);switch(p.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=h;break;case"STATISTICS_MAXIMUM":o=h;break;case"STATISTICS_MEAN":c=h;break;case"STATISTICS_STDDEV":u=h}});const f=W(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&a!=null&&i!=null?{min:a,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:f,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function ne(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new B({wkid:e});if(t=String(t).trim(),Be(t))return new B({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const a=s.indexOf("VERTCS"),i=s.indexOf("PROJCS"),r=i>-1?i:s.indexOf("GEOGCS");if(r===-1)return null;const n=t.slice(r,t.lastIndexOf("]",a)+1).trim(),l=t.slice(a,t.lastIndexOf("]")).trim();e=we(n);const o=new B(e?{wkid:e}:{wkt:n}),c=we(l);return c&&(o.vcsWkid=c),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=we(t),new B(e!==0?{wkid:e}:{wkt:t})):null}function we(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(i=>i.trim()).filter(i=>i!==""),s=e[e.length-1].split(","),a=s[0]?.toLowerCase();if((a==="epsg"||a==="esri")&&t.endsWith('"]]')){const i=Number(s[1]);if(!isNaN(i)&&i!==0)return i}return 0}function Ie(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(a=>{if(a.nodeType===1){if(pe(a,"SRS")){if(!e.spatialReference){const i=J(a);e.spatialReference=ne(i)}}else if(pe(a,"Metadata"))if(a.getAttribute("domain")==="xml:ESRI"){const{spatialReference:i,transform:r}=Ht(a);e.transform=r,e.spatialReference||(e.spatialReference=i)}else Te(a,"MDI").forEach(i=>e.metadata[i.getAttribute("key")]=J(i));else if(pe(a,"PAMRasterBand")){const i=jt(a);i.sourceBandIndex!=null&&e.rasterBands[i.sourceBandIndex]==null?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}});const s=e.rasterBands;if(s.length){const a=!!s[0].statistics;e.statistics=a?s.map(r=>r.statistics).filter(ue):null;const i=!!s[0].histogram;e.histograms=i?s.map(r=>r.histogram).filter(ue):null}return e}let oe=class extends q{fetchRawTile(t,e,s,a={}){return this._inMemoryRaster.fetchRawTile(t,e,s,a)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:a,histograms:i,transform:r}=await this._fetchAuxiliaryData(t);const n=!s;n&&(s=new B({wkid:3857})),i?.length&&a==null&&(a=fe(i));const{width:l,height:o}=e;let c=new z({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:s});const u=r?r.forwardTransform(c):c;let f=!0;if(r){const h=r.forwardCoefficients;f=h&&h[1]===0&&h[2]===0,f&&(r=null,c=u)}const p=new xe({source:{extent:u,nativeExtent:c,transform:r,pixelBlocks:[e],statistics:a,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(p.ioConfig.skipMapInfo=!0),await p.open(),p.source=null,this._set("rasterInfo",p.rasterInfo),this._inMemoryRaster=p}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),s=St(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new O("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const a=s.toLowerCase(),i=a==="gif"||a==="bmp"||!De("ios"),r=await this.decodePixelBlock(e,{format:a,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new O("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:s=[],skipMapInfo:a}=this.ioConfig,i=a||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,l=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await Se([i,l]);if(e?.aborted)throw Ae();const c=Ie(o[0].value?.data);if(!c.transform){const u=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;c.transform=u?.length===6?new de({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return c}};S([F({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=S([H("esri.layers.support.rasterDatasets.ImageAuxRaster")],oe);const le=oe;let K=class extends q{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,a={}){const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,l=n!=null&&!!a.transposedVariableName;if(this._slices&&!l&&a.sliceId==null)return null;const o=l?0:i.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${s}`,u=this._slices?l?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null,{data:f}=await this.request(c,{query:u,responseType:"array-buffer",signal:a.signal});if(!f)return null;const p=l?n.tileSize:i.tileInfo.size,h=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(h==null)return null;const g=i.blockBoundary[t];if(i.compression!=="jpg"||s>g.minCol&&s<g.maxCol&&e>g.minRow&&e<g.maxRow)return h;const{origin:w,blockWidth:m,blockHeight:d}=i,{x:y,y:R}=this.getPyramidPixelSize(t),I=Math.round((r.xmin-w.x)/y)%m,b=Math.round((r.xmax-w.x)/y)%m||m,v=Math.round((w.y-r.ymax)/R)%d,x=Math.round((w.y-r.ymin)/R)%d||d,_=s===g.minCol?I:0,T=e===g.minRow?v:0,k=s===g.maxCol?b:m,C=e===g.maxRow?x:d;return bt(h,{x:_,y:T},{width:k-_,height:C-T}),h}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const a=this._slices[s].multidimensionalDefinition;if(a.length===e.length&&!a.some(i=>{const r=e.find(n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName);return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.statistics),a=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.histograms),i=await Promise.all([s,a]);return i[0]&&i[0].forEach(r=>{r.avg=r.mean,r.stddev=r.standardDeviation}),i[1]?.[0]?.counts?.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let a=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-a+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,a++,s=this.identifyPixelLocation(n,a,e.datumTransformation),s===null)return null}return r===-1||s==null?null:a}async _open(t){const e=t?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=s.data;if(this.sourceJSON=a,!a)throw new O("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new O("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,this.tileType==null&&(i.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":a.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=a.name?.slice(a.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new O("image-server-raster:open","cannot initialize image service");tt(r,a);const n=this.tileType==="Map"?Wt(a.tileInfo,a):ie.fromJSON(a.tileInfo);Le(n);const[l,o]=this._computeMinMaxLOD(r,n),{extent:c,pixelSize:u}=r,f=.5/r.width*u.x,p=Math.max(u.x,u.y),{lods:h}=n;(this.tileType!=="Map"&&a.maxScale!==0||Math.abs(u.x-u.y)>f||!h.some(x=>Math.abs(x.resolution-p)<f))&&(u.x=u.y=l.resolution,r.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),r.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const g=l.level-o.level,[w,m]=n.size,d=[],y=[];h.forEach((x,_)=>{x.level>=o.level&&x.level<=l.level&&d.push({x:x.resolution,y:x.resolution}),_<h.length-1&&y.push(Math.round(10*x.resolution/h[_+1].resolution)/10)}),d.sort((x,_)=>x.x-_.x);const R=this.computeBlockBoundary(c,w,m,n.origin,d,g),I=d.length>1?d.slice(1):null;let b;a.transposeInfo&&(b={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const v=y.length<=1||y.length>=3&&y.slice(0,-1).every(x=>x===y[0])?y[0]??2:Math.round(10/(o.resolution/l.resolution)**(-1/g))/10;if(r.storageInfo=new me({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,pyramidScalingFactor:v,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:g,tileInfo:n,transposeInfo:b,blockBoundary:R}),Vt(r),this._set("rasterInfo",r),a.capabilities.toLowerCase().includes("tilemap")){const x={tileInfo:r.storageInfo.tileInfo,parsedUrl:Je(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Nt({layer:x})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,l=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),c=B.fromJSON(e.spatialReference||n.spatialReference),u=new j({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new se({width:l,height:o,bandCount:3,extent:z.fromJSON(n),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,a=st(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>n.data?.slices).catch(()=>null):null,r=await Promise.all([a,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,a=.5/t.width*s.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map(p=>p.level))),n=e.lodAt(Math.min.apply(null,i.map(p=>p.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=i[0].level,[r,n];if(l==="Raster")return[i.find(p=>p.resolution===s.x)??r,n];const{minScale:o,maxScale:c}=this.sourceJSON;let u=r;c>0&&(u=i.find(p=>Math.abs(p.scale-c)<a),u||(u=i.filter(p=>p.scale>c).sort((p,h)=>p.scale>h.scale?1:-1)[0]??r));let f=n;return o>0&&(f=i.find(p=>Math.abs(p.scale-o)<a)??n,this._levelOffset=f.level-n.level),[u,f]}};function Wt(t,e){if(!t)return null;const{minScale:s,maxScale:a,minLOD:i,maxLOD:r}=e;if(i!=null&&r!=null)return ie.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=i&&n<=r)});if(s!==0&&a!==0){const n=c=>Math.round(1e4*c)/1e4,l=s?n(s):1/0,o=a?n(a):-1/0;return ie.fromJSON({...t,lods:t.lods.filter(c=>{const u=n(c.scale);return u<=l&&u>=o})})}return ie.fromJSON(t)}function Vt(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&s?.wkid&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Pt,t.extent=t.transform.forwardTransform(e))}S([F({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),S([F()],K.prototype,"tileType",void 0),K=S([H("esri.layers.support.rasterDatasets.ImageServerRaster")],K);const qt=K,L=new Map;L.set("Int8","s8"),L.set("UInt8","u8"),L.set("Int16","s16"),L.set("UInt16","u16"),L.set("Int32","s32"),L.set("UInt32","u32"),L.set("Float32","f32"),L.set("Float64","f32"),L.set("Double64","f32");const U=new Map;U.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),U.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),U.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),U.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Y=class extends q{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,s,a={}){const{blockWidth:i,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,l=n[t];if(!l||l.maxRow<e||l.maxCol<s||l.minRow>e||l.minCol>s)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:f,actualTileHeight:p}=this._getTileLocation(t,e,s);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const C=new Uint8Array(i*r);return new te({width:i,height:r,pixels:void 0,mask:C,validPixelCount:0})}const{bandIds:h}=this.ioConfig,g=this._getBandSegmentCount(),w=[];let m=0;for(m=0;m<g;m++)h&&!h.includes(m)||w.push(this.request(this._files.data,{range:{from:u[m].from,to:u[m].to},responseType:"array-buffer",signal:a.signal}));const d=await Promise.all(w),y=d.map(C=>C.data.byteLength).reduce((C,N)=>C+N),R=new Uint8Array(y),I=[];let b=0;for(m=0;m<g;m++)I.push(b),R.set(new Uint8Array(d[m].data),b),b+=d[m].data.byteLength;const v=U.get(this.rasterInfo.storageInfo.compression).decoderFormat,x=await this.decodePixelBlock(R.buffer,{width:i,height:r,format:v,planes:h?.length||o,offsets:I,pixelType:c});if(x==null)return null;let{noDataValue:_}=this.rasterInfo;if(_!=null&&v!=="lerc"&&!x.mask&&(_=_[0],_!=null)){const C=x.width*x.height,N=new Uint8Array(C);if(Math.abs(_)>1e24)for(m=0;m<C;m++)Math.abs((x.pixels[0][m]-_)/_)>1e-6&&(N[m]=1);else for(m=0;m<C;m++)x.pixels[0][m]!==_&&(N[m]=1);x.mask=N}let T=0,k=0;if(f!==i||p!==r){let C=x.mask;if(C)for(m=0;m<r;m++)if(k=m*i,m<p)for(T=f;T<i;T++)C[k+T]=0;else for(T=0;T<i;T++)C[k+T]=0;else for(C=new Uint8Array(i*r),x.mask=C,m=0;m<p;m++)for(k=m*i,T=0;T<f;T++)C[k+T]=1}return x}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:a,files:i}=this._parseHeader(s.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const d=await this._fetchAuxiliaryData(t);d!=null&&(a.statistics=d.statistics??a.statistics,a.histograms=d.histograms,d.histograms&&a.statistics==null&&(a.statistics=fe(d.histograms)))}r&&this.updateImageSpaceRasterInfo(a),this._set("rasterInfo",a),this._files=i;const l=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=$t(l.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:p}=this.rasterInfo,h=[],g=this._getBandSegmentCount();let w=0,m=-1;for(;w<this._storageIndex.length;){m++;const d=Math.ceil(f/o/u**m)-1,y=Math.ceil(p/c/u**m)-1;w+=(d+1)*(y+1)*g*4,h.push({maxRow:y,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}_getBandSegmentCount(){return U.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:a,blockHeight:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,f,p=0,h=0;for(f=0;f<t;f++)h=r**f,c=Math.ceil(n/a/h),u=Math.ceil(l/i/h),p+=c*u;h=r**t,c=Math.ceil(n/a/h),u=Math.ceil(l/i/h),p+=e*c+s,p*=4*o;const g=this._storageIndex.subarray(p,p+4*o);let w=0,m=0;const d=[];for(let y=0;y<o;y++)w=g[4*y]*2**32+g[4*y+1],m=w+g[4*y+2]*2**32+g[4*y+3],d.push({from:w,to:m});return{ranges:d,actualTileWidth:s<c-1?a:Math.ceil(n/h)-a*(c-1),actualTileHeight:e<u-1?i:Math.ceil(l/h)-i*(u-1)}}_parseHeader(t){const e=A(t,"MRF_META/Raster");if(!e)throw new O("mrf:open","not a valid MRF format");const s=A(e,"Size"),a=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),r=parseInt(s.getAttribute("c"),10),n=(J(e,"Compression")||"none").toLowerCase();if(!U.has(n))throw new O("mrf:open","currently does not support compression "+n);const l=J(e,"DataType")||"UInt8",o=L.get(l);if(o==null)throw new O("mrf:open","currently does not support pixel type "+l);const c=A(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),f=parseInt(c.getAttribute("y"),10),p=A(e,"DataValues");let h,g;if(p&&(g=p.getAttribute("NoData"),g!=null&&(h=g.trim().split(" ").map(C=>parseFloat(C)))),A(t,"MRF_META/CachedSource"))throw new O("mrf:open","currently does not support MRF referencing other data files");const w=A(t,"MRF_META/GeoTags"),m=A(w,"BoundingBox");let d,y=!1;if(m!=null){const C=parseFloat(m.getAttribute("minx")),N=parseFloat(m.getAttribute("miny")),M=parseFloat(m.getAttribute("maxx")),D=parseFloat(m.getAttribute("maxy")),G=J(w,"Projection")||"";let Q=B.WGS84;if(G!=="LOCAL_CS[]")if(G.toLowerCase().startsWith("epsg:")){const ce=Number(G.slice(5));isNaN(ce)||ce===0||(Q=new B({wkid:ce}))}else Q=ne(G)??B.WGS84;else y=!0,Q=new B({wkid:3857});d=new z(C,N,M,D),d.spatialReference=Q}else y=!0,d=new z({xmin:-.5,ymin:.5-i,xmax:a-.5,ymax:.5,spatialReference:new B({wkid:3857})});const R=A(t,"MRF_META/Rsets"),I=parseInt(R?.getAttribute("scale")||"2",10),b=d.spatialReference,v=new me({origin:new j({x:d.xmin,y:d.ymax,spatialReference:b}),blockWidth:u,blockHeight:f,pyramidBlockWidth:u,pyramidBlockHeight:f,compression:n,pyramidScalingFactor:I}),x=new j({x:d.width/a,y:d.height/i,spatialReference:b}),_=new se({width:a,height:i,extent:d,isPseudoSpatialReference:y,spatialReference:b,bandCount:r,pixelType:o,pixelSize:x,noDataValue:h,storageInfo:v}),T=J(t,"datafile"),k=J(t,"IndexFile");return{rasterInfo:_,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",U.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ie(e)}catch{return null}}};function $t(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,a,i,r,n;if(Tt){for(s=new Uint8Array(t),i=new ArrayBuffer(t.byteLength),a=new Uint8Array(i),r=0;r<t.byteLength/4;r++)for(n=0;n<4;n++)a[4*r+n]=s[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(t);return e}S([F()],Y.prototype,"_files",void 0),S([F()],Y.prototype,"_storageIndex",void 0),S([F({type:String,json:{write:!0}})],Y.prototype,"datasetFormat",void 0),Y=S([H("esri.layers.support.rasterDatasets.MRFRaster")],Y);const Yt=Y;function Xt(t){const e=t.fields,s=t.records,a=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:a,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),r=i.map(c=>c.name),n=[];let l=0,o=0;return s.forEach(c=>{const u={};for(u[a]=l++,o=1;o<r.length;o++)u[r[o]]=c[o-1];n.push({attributes:u})}),{displayFieldName:"",fields:i,features:n}}class Kt{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),a=3&s.getUint8(0);if(a!==3)return{header:{version:a},recordSet:null};const i=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),l={version:a,recordCount:i,headerByteCount:r,recordByteCount:n};let o=32;const c=[],u=[];let f;if(a===3){for(;s.getUint8(o)!==13;)f=String.fromCharCode(s.getUint8(o+11)).trim(),c.push({name:Fe(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<i&&e.byteLength-o>n;){const p=[];s.getUint8(o)===32?(o+=1,c.forEach(h=>{if(h.type==="C")p.push(Fe(new Uint8Array(e,o,h.length)).trim());else if(h.type==="N")p.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,h.length)).trim(),10));else if(h.type==="F")p.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,h.length)).trim()));else if(h.type==="D"){const g=String.fromCharCode.apply(null,new Uint8Array(e,o,h.length)).trim();p.push(new Date(parseInt(g.slice(0,4),10),parseInt(g.slice(4,6),10)-1,parseInt(g.slice(6,8),10)))}o+=h.length}),u.push(p)):o+=n}}return{header:l,fields:c,records:u,recordSet:Xt({fields:c,records:u})}}}const be=(t,e)=>t.get(e)?.values,Z=(t,e)=>t.get(e)?.values?.[0];let V=class extends q{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,a={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,s))return null;const i=await this._fetchRawTiffTile(t,e,s,!1,a);if(i!=null&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,s,!0,a);r!=null&&r.pixels[0]instanceof Uint8Array&&(i.mask=r.pixels[0])}return i}async _open(t){const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new O("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:a,firstIFDPos:i,isBigTiff:r}=Rt(s),n=[];await this._readIFDs(n,s,a,i,0,r?8:4,e);const{imageInfo:l,rasterInfo:o}=Zt(n),c=_t(n),u=Ct(n);if(this._headerInfo={littleEndian:a,isBigTiff:r,ifds:n,pyramidIFDs:c,maskIFDs:u,...l},this._set("rasterInfo",o),!l.isSupported)throw new O("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new O("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&he.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const f=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&f===2)throw new O("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:p,skipExtensions:h=[]}=this.ioConfig;if(!h.includes("aux.xml")&&!p){const g=await this._fetchAuxiliaryMetaData(t);g!=null&&Qt(g,o)}h.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||p||(o.attributeTable=await this._fetchAuxiliaryTable(t),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),p&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(t,e,s,a,i,r=4,n){if(!a)return null;(a>=e.byteLength||a<0)&&(e=(await this.request(this.url,{range:{from:a+i,to:a+i+this._bufferSize},responseType:"array-buffer",signal:n})).data,i=a+i,a=0);const l=await this._readIFD(e,s,a,i,ae.tiffTags,r,n);if(t.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(t,e,s,l.nextIFD-i,i,r,n)}async _readIFD(t,e,s,a,i=ae.tiffTags,r=4,n){if(!t)return null;const l=Ft(t,e,s,a,i,r);if(l.success){const o=[];if(l.ifd?.forEach(c=>{c.values||o.push(c)}),o.length>0){const c=o.map(f=>f.offlineOffsetSize).filter(ue),u=Math.min.apply(null,c.map(f=>f[0]));if(Math.min.apply(null,c.map(f=>f[0]+f[1]))-u<=this._bufferSize){const{data:f}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:n});t=f,a=u,o.forEach(p=>Ot(t,e,p,a))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const c=l.ifd.get("GEOKEYDIRECTORY"),u=c?.values;if(u&&u.length>4){const f=u[0]+"."+u[1]+"."+u[2],p=await this._readIFD(t,e,c.valueOffset+6-a,a,ae.geoKeys,2,n);c.data=p.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[f]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:a,to:a+l.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<l.requiredBufferSize?null:this._readIFD(t,e,0,a,ae.tiffTags,4,n)}async _fetchRawTiffTile(t,e,s,a,i={}){const r=this._getTileLocation(t,e,s,a);if(!r)return null;const{ranges:n,actualTileWidth:l,actualTileHeight:o,ifd:c}=r,u=n.map(v=>this.request(this.url,{range:v,responseType:"array-buffer",signal:i.signal})),f=await Promise.all(u),p=f.map(v=>v.data.byteLength).reduce((v,x)=>v+x),h=f.length===1?f[0].data:new ArrayBuffer(p),g=[0],w=[0];if(f.length>1){const v=new Uint8Array(h);for(let x=0,_=0;x<f.length;x++){const T=f[x].data;v.set(new Uint8Array(T),_),g[x]=_,_+=T.byteLength,w[x]=T.byteLength}}const{blockWidth:m,blockHeight:d}=this.getBlockWidthHeight(t),y=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:g,sizes:w},width:m,height:d,planes:null,pixelType:null});if(y==null)return null;let R,I,b;if(l!==m||o!==d){let v=y.mask;if(v)for(R=0;R<d;R++)if(b=R*m,R<o)for(I=l;I<m;I++)v[b+I]=0;else for(I=0;I<m;I++)v[b+I]=0;else for(v=new Uint8Array(m*d),y.mask=v,R=0;R<o;R++)for(b=R*m,I=0;I<l;I++)v[b+I]=1}return y}_getTileLocation(t,e,s,a=!1){const{firstPyramidLevel:i,blockBoundary:r}=this.rasterInfo.storageInfo,n=t===0?0:t-(i-1),{_headerInfo:l}=this;if(!l)return null;const o=a?l.maskIFDs[n]:n===0?l?.ifds[0]:l?.pyramidIFDs[n-1];if(!o)return null;const c=Mt(o,l),u=be(o,"TILEOFFSETS");if(u===void 0)return null;const f=be(o,"TILEBYTECOUNTS"),{minRow:p,minCol:h,maxRow:g,maxCol:w}=r[n];if(e>g||s>w||e<p||s<h)return null;const m=Z(o,"IMAGEWIDTH"),d=Z(o,"IMAGELENGTH"),y=Z(o,"TILEWIDTH"),R=Z(o,"TILELENGTH"),I=[];if(c){const{bandCount:b}=this.rasterInfo;for(let v=0;v<b;v++){const x=v*(g+1)*(w+1)+e*(w+1)+s;I[v]={from:u[x],to:u[x]+f[x]-1}}}else{const b=e*(w+1)+s;I.push({from:u[b],to:u[b]+f[b]-1})}for(let b=0;b<I.length;b++)if(I[b].from==null||!I[b].to||I[b].to<0)return null;return{ranges:I,ifd:o,actualTileWidth:s===w&&m%y||y,actualTileHeight:e===g&&d%R||R}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ie(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),s=Kt.parse(e);return s?.recordSet?Oe.fromJSON(s.recordSet):null}catch{return null}}};function Zt(t){const e=kt(t),{width:s,height:a,tileWidth:i,tileHeight:r,planes:n,pixelType:l,compression:o,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:f,pyramidBlockHeight:p,pyramidResolutions:h,tileBoundary:g,affine:w,metadata:m}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let y=ne(d),R=!!e.isPseudoGeographic;y==null&&(R=!0,y=new B({wkid:3857}));const I=new z({...e.extent,spatialReference:y}),b=new j(I?{x:I.xmin,y:I.ymax,spatialReference:y}:{x:0,y:0}),v=new me({blockWidth:i,blockHeight:r,pyramidBlockWidth:f,pyramidBlockHeight:p,compression:o,origin:b,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:h,blockBoundary:g}),x=new j({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/a,spatialReference:y}),_=m?{BandProperties:m.bandProperties,DataType:m.dataType}:{};let T=null;const k=Z(t[0],"PHOTOMETRICINTERPRETATION"),C=be(t[0],"COLORMAP");if(k<=3&&C?.length>3&&C.length%3==0){T=[];const M=C.length/3;for(let D=0;D<M;D++)T.push([D,C[D]>>>8,C[D+M]>>>8,C[D+2*M]>>>8])}const N=new se({width:s,height:a,bandCount:n,pixelType:l,pixelSize:x,storageInfo:v,spatialReference:y,isPseudoSpatialReference:R,keyProperties:_,extent:I,colormap:T,statistics:m?m.statistics:null});if(w?.length&&(N.nativeExtent=new z({xmin:-.5,ymin:.5-a,xmax:s-.5,ymax:.5,spatialReference:y}),N.transform=new de({polynomialOrder:1,forwardCoefficients:[w[2]+w[0]/2,w[5]-w[3]/2,w[0],w[3],-w[1],-w[4]]}),N.extent=N.transform.forwardTransform(N.nativeExtent),N.pixelSize=new j({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/a,spatialReference:y}),v.origin.x=-.5,v.origin.y=.5),h){const{x:M,y:D}=N.pixelSize;h.forEach(G=>{G.x*=M,G.y*=D})}return{imageInfo:e,rasterInfo:N}}function Qt(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=fe(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new j({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}S([F()],V.prototype,"_files",void 0),S([F()],V.prototype,"_headerInfo",void 0),S([F()],V.prototype,"_bufferSize",void 0),S([F({type:String,json:{write:!0}})],V.prototype,"datasetFormat",void 0),V=S([H("esri.layers.support.rasterDatasets.TIFFRaster")],V);const es=V,E=new Map;E.set("MRF",{desc:"Meta Raster Format",constructor:Yt}),E.set("TIFF",{desc:"GeoTIFF",constructor:es}),E.set("RasterTileServer",{desc:"Raster Tile Server",constructor:qt}),E.set("JPG",{desc:"JPG Raster Format",constructor:le}),E.set("PNG",{desc:"PNG Raster Format",constructor:le}),E.set("GIF",{desc:"GIF Raster Format",constructor:le}),E.set("BMP",{desc:"BMP Raster Format",constructor:le}),E.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Gt}),E.set("MEMORY",{desc:"In Memory Raster Format",constructor:xe});class ve{static get supportedFormats(){const e=new Set;return E.forEach((s,a)=>e.add(a)),e}static async open(e){const{url:s,ioConfig:a,source:i,sourceJSON:r}=e;let n=e.datasetFormat??a?.datasetFormat;n==null&&(s.includes(".")?n=s.slice(s.lastIndexOf(".")+1).toUpperCase():i?.type?.toLowerCase()==="coverage"?n="CovJSON":i?.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const l={url:s,source:i,sourceJSON:r,datasetFormat:n,ioConfig:a??{bandIds:null,sampling:null}};if(Object.keys(l).forEach(f=>{l[f]==null&&delete l[f]}),n){if(!this.supportedFormats.has(n))throw new O("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new O("rasterfactory:open",`cannot open raster: ${s}`);const f=new(E.get(n)).constructor(l);return await f.open({signal:e.signal}),f}const o=Array.from(E.keys()).filter(f=>f!=="CovJSON"&&f!=="Memory");let c=0;const u=()=>{if(n=o[c++],!n||n==="CRF")return null;const f=new(E.get(n)).constructor(l);return f.open({signal:e.signal}).then(()=>f).catch(()=>u())};return u()}static register(e,s,a){E.has(e.toUpperCase())||E.set(e.toUpperCase(),{desc:s,constructor:a})}}let P=class extends Ye(rt(Qe(et(at(Xe(Ke(nt($e(it(Ve(ze.ClonableMixin(qe)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=Ue(async(e,s,a)=>{const{save:i,saveAs:r}=await import("./imageryUtils-DfgZRr_B.js");switch(e){case re.SAVE:return i(this,s);case re.SAVE_AS:return r(this,a,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(Ge).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[ut("Pixel Value"),ht("Raw Pixel Value")],e=this.raster?.rasterInfo??this.serviceRasterInfo,s=e?.attributeTable;if(s){const r=pt(s);t.push(...r)}const a=e?.dataType,i=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&i!=null){const r=i.variables[0].unit?.trim(),n=ft(r),l=mt();t.push(n,l)}if(i){const r=dt(i);t.push(...r)}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=t?.visibleFieldNames??new Set(e.map(({name:r})=>r).filter(r=>r!==gt.rawServicePixelValue)),a=Dt({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:i}=this.raster;return a?.fieldInfos&&i&&yt(a.fieldInfos,i),a}async generateRasterInfo(t,e){if(t=He(_e,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(t,e);return s}catch(s){throw s instanceof O?s:new O("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(re.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(re.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const a=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new O("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:a,rasterFunction:i,source:r}=this;if(!a&&!r)throw new O("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,t):i?await this._openFromUrlWithRasterFunction(a,i,t):await this._openFromUrl(a,t)}const s=this.raster.rasterInfo;if(!s)throw new O("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const a=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(a,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(je(()=>this.customParameters,a=>{this.raster&&(this.raster.ioConfig.customFetchParameters=a)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const a=[t];e&&Et(e.toJSON(),a);const i=await Promise.all(a.map(n=>ve.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),r=i.findIndex(n=>n==null);if(r>-1)throw new O("imagery-tile-layer:open",`cannot open raster: ${a[r]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await ve.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new O("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){const s="the tiled imagery data source is not supported",a=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!a)throw new O("imagery-tile-layer:open",s);a==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const i=await ve.open({url:"",source:t,datasetFormat:a,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new O("imagery-tile-layer:open",s);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(t,e){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const a=Bt(t.functionDefinition?.toJSON()??t.toJSON(),s),i=new Ze({rasterFunction:a});return await i.open(e),i}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof O&&he.getLogger(this).error("imagery-tile-layer:open",s.message),he.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};S([F({clonable:!1})],P.prototype,"_primaryRasters",void 0),S([F(ot)],P.prototype,"legendEnabled",void 0),S([F({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],P.prototype,"isReference",void 0),S([F({type:["show","hide"]})],P.prototype,"listMode",void 0),S([F({json:{read:!0,write:!0}})],P.prototype,"blendMode",void 0),S([F({type:_e,json:{name:"renderingRule",write:!0}})],P.prototype,"rasterFunction",void 0),S([F()],P.prototype,"sourceJSON",void 0),S([F({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],P.prototype,"version",void 0),S([F({readOnly:!0,json:{read:!1}})],P.prototype,"type",void 0),S([F({type:["ArcGISTiledImageServiceLayer"]})],P.prototype,"operationalLayerType",void 0),S([F({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],P.prototype,"popupEnabled",void 0),S([F({type:We,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],P.prototype,"popupTemplate",void 0),S([F({readOnly:!0})],P.prototype,"defaultPopupTemplate",null),S([F({readOnly:!0,type:[Re]})],P.prototype,"fields",void 0),S([F({readOnly:!0,type:[Re]})],P.prototype,"rasterFields",null),S([F({constructOnly:!0})],P.prototype,"source",void 0),P=S([H("esri.layers.ImageryTileLayer")],P);const ts=P;export{ts as default};
