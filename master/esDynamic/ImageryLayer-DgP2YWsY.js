import{o as A,x as s,z as o,B as x,K as f,G as b,aX as ne,bC as P,M as te,bt as qe,aF as Ct,ko as de,kn as $e,kB as We,b5 as U,aT as Q,D as E,bO as mt,bz as Ee,b6 as W,bi as Wt,bP as Zt,bq as J,a2 as F,by as dt,I as Kt,n as Pt,s as S,aM as Xt,b4 as Yt,kC as ei,gD as ti,e4 as ii,X as ri,b7 as si}from"./main-BC8gbEPx.js";import{S as ni}from"./MultiOriginJSONSupport-BMkaNBEB.js";import{f as oi}from"./Layer-CMe3ITJC.js";import{f as ai,y as li,d as ui,l as pi}from"./commonProperties-Bzkkp1tE.js";import{o as ci,m as mi,c as di,q as yi,e as hi,$ as gi,j as fi,b as wi,r as yt,f as vi,v as Ri,p as bi,h as Si,V as Ii,t as be,n as xi,k as Fi,s as Di}from"./multidimensionalUtils-Cp9Fyxq1.js";import{w as D,f as k,g as Ti,c as ji,l as Ni,p as Ci,a as Pi,B as Oi,L as _i,U as Mi,q as Vi,e as Ai,t as Ji}from"./ImageHistogramParameters-DPaHGAKB.js";import{j as qi,g as ht,s as Ei,l as Gi}from"./dataUtils-DwTUUyvb.js";import{S as Ot,f as _t,g as zi,v as Li,A as Ui,a as ye,w as Ge,e as Se,n as Hi,d as Mt,_ as Bi,j as Vt,P as Qi}from"./RasterSymbolizer-D6hosp06.js";import{b as ki}from"./commonProperties-DdvOaFls.js";import{y as $i}from"./Field-CImhaDGk.js";import{Z as Wi}from"./FieldsIndex-Dj6cAdqw.js";import{t as At}from"./imageBitmapUtils-Coxk5tHP.js";import{R as Ie}from"./normalizeUtils-BcS9eell.js";import{f as q,s as G,i as z}from"./utils-BauPDoiO.js";import{s as Zi,b as gt}from"./Query-BDnleJ4k.js";import{p as ft}from"./TimeExtent-B3UXB00l.js";import{d as Jt}from"./FeatureSet-DagJuGrs.js";import{f as qt,p as Ki,c as Xi,o as Yi}from"./RasterPresetRendererMixin-D4Cw1g2_.js";import{a as er,s as tr}from"./executeForIds-pCtv9fJk.js";import{s as ir}from"./executeQueryJSON-GkLGT-xc.js";import{l as rr}from"./ArcGISService-BYT8tHGm.js";import{p as sr}from"./BlendLayer-CcxvVUY7.js";import{e as nr}from"./CustomParametersMixin-CDwqQbWD.js";import{b as or}from"./OperationalLayer-BZK79oBo.js";import{j as ar}from"./PortalLayer-DiglAdqG.js";import{f as lr}from"./RefreshableLayer-CMtsdL-v.js";import{t as ur}from"./ScaleRangeLayer-DmABrUi1.js";import{l as pr}from"./TemporalLayer-CDDG_gSN.js";import{t as cr}from"./versionUtils-B5CEfYCx.js";import{p as mr}from"./popupUtils-6aECuRwv.js";import{A as Ze}from"./interfaces-Cwm0pihk.js";const dr={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},yr=new Set(["u1","u2","u4","u8","s8","u16","s16"]),hr={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},gr=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Et(r){return gr.has(r.type)}function wt(r,t){if(!r||!t)return A(r||t);const a=A(r);if(a.functionDefinition&&t.rasterFunctionDefinition){const e=t.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),Gt(a.functionDefinition.arguments,t),a.rasterFunctionDefinition=a.functionDefinition.toJSON()}else t.functionName?.toLowerCase()!=="none"&&(zt(a.functionArguments).Raster=t);return a}function Gt(r,t){for(const a in r)a.toLowerCase()==="raster"&&(r[a].type==="RasterFunctionVariable"?(r[a]=t.rasterFunctionDefinition,r[a].type="RasterFunctionTemplate"):r[a].type==="RasterFunctionTemplate"&&Gt(r[a].arguments,t))}function ie(r){const t=A(dr[r.functionName+"Function"]),a=r.functionArguments;for(const e in a)e.toLowerCase()==="raster"?(t.arguments[e]=ie(a[e]),t.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(t.arguments[e].value=xr(a[e]),t.arguments.ColorSchemeType.value=0):t.arguments[e].value=a[e];return t}function fr(r,t){switch(t=t||{},r.type){case"raster-stretch":return Rr(r,t);case"class-breaks":return br(r,t);case"unique-value":return Sr(r,t);case"raster-colormap":return Ir(r,t);case"vector-field":return wr(r,t);case"raster-shaded-relief":return vr(r,t);case"flow":throw new Error("Unsupported rendering rule.")}}function zt(r){const t=r?.Raster??r?.raster;return t&&t.declaredClass==="esri.layers.support.RasterFunction"?zt(t.functionArguments):r}const ze={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function wr(r,t){const a=new D;a.functionName="VectorFieldRenderer";const{dataType:e,bandNames:i}=t,n=e==="vector-uv";let l,u;if(i&&i.length===2){const h=i.map(w=>w.toLowerCase());l=h.indexOf("magnitude"),u=h.indexOf("direction")}l!==-1&&l!==null||(l=0,u=1);const p=r.rotationType==="arithmetic"?1:2,d=r.flowRepresentation==="flow-from"?0:1,c=r.visualVariables?r.visualVariables.find(h=>h.field==="Magnitude"):new ki,m={magnitudeBandID:l,directionBandID:u,isUVComponents:n,referenceSystem:p,massFlowAngleRepresentation:d,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:hr[r.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};a.functionArguments=m;const g=ie(a);return t.convertToRFT?D.fromJSON({rasterFunctionDefinition:g}):a}function vr(r,t){const a=t.convertToRFT;if(t.dataType!=="elevation"&&(t.dataType!=="generic"||t.bandCount!==1||t.pixelType!=="s16"&&t.pixelType!=="s32"&&t.pixelType!=="f32"&&t.pixelType!=="f64"))return new D;const e=new D;e.functionName="Hillshade";const i=r.hillshadeType==="traditional"?0:1,n=r.scalingType==="none"?1:3,l={HillshadeType:i,SlopeType:n,ZFactor:r.zFactor};return i===0&&(l.Azimuth=r.azimuth,l.Altitude=r.altitude),n===3&&(l.PSPower=r.pixelSizePower,l.PSZFactor=r.pixelSizeFactor),e.functionArguments=l,e.variableName="Raster",r.colorRamp&&(e.functionName="ShadedRelief",a?l.ColorRamp=Ot(r.colorRamp):l.Colormap=_t(r.colorRamp)),a?new D({rasterFunctionDefinition:ie(e)}):e}function Rr(r,t){const a=t.convertToRFT,e=new D;e.functionName="Stretch";const i=ze[zi.toJSON(r.stretchType)],n="u8",l=r.customStatistics?.map(p=>[p.min,p.max,p.avg??0,p.stddev??1]),u={StretchType:i,Statistics:l,DRA:r.dynamicRangeAdjustment,UseGamma:r.useGamma,Gamma:r.gamma,ComputeGamma:r.computeGamma};if(r.outputMin!=null&&(u.Min=r.outputMin),r.outputMax!=null&&(u.Max=r.outputMax),i===ze.standardDeviation?(u.NumberOfStandardDeviations=r.numberOfStandardDeviations,e.outputPixelType=n):i===ze.percentClip?(u.MinPercent=r.minPercent,u.MaxPercent=r.maxPercent,e.outputPixelType=n):i===ze.minMax?e.outputPixelType=n:i===ze.sigmoid&&(u.SigmoidStrengthLevel=r.sigmoidStrengthLevel),e.functionArguments=u,e.variableName="Raster",r.colorRamp){const p=r.colorRamp,d=new D;if(a)d.functionArguments={ColorRamp:Ot(p)};else{const c=Li(p,!0);if(c)d.functionArguments={colorRampName:c};else if(!t.convertColorRampToColormap||p.type!=="algorithmic"&&p.type!=="multipart"){const m=r.colorRamp.toJSON();m.type==="algorithmic"?m.algorithm=m.algorithm||"esriCIELabAlgorithm":m.type==="multipart"&&m.colorRamps?.length&&m.colorRamps.forEach(g=>g.algorithm=g.algorithm||"esriCIELabAlgorithm"),d.functionArguments={colorRamp:m}}else d.functionArguments={Colormap:_t(p)}}return d.variableName="Raster",d.functionName="Colormap",d.functionArguments.Raster=e,a?new D({rasterFunctionDefinition:ie(d)}):d}return a?new D({rasterFunctionDefinition:ie(e)}):e}function br(r,t){const a=[],e=[],i=[],n=[],{pixelType:l,rasterAttributeTable:u}=t,p=u==null?null:u.features,d=Lt(u);if(d&&p&&Array.isArray(p)&&r.classBreakInfos){r.classBreakInfos.forEach((y,R)=>{const v=y.symbol?.color;let j;v?.a&&y.minValue!=null&&y.maxValue!=null&&p.forEach(C=>{y.minValue!=null&&y.maxValue!=null&&(j=C.attributes[r.field],(j>=y.minValue&&j<y.maxValue||R===r.classBreakInfos.length-1&&j>=y.minValue)&&n.push([C.attributes[d],v.r,v.g,v.b]))})});const h=l?Ke(n,l):n,w=new D;return w.functionName="Colormap",w.functionArguments={},w.functionArguments.Colormap=h,w.variableName="Raster",t.convertToRFT?new D({rasterFunctionDefinition:ie(w)}):w}r.classBreakInfos.forEach((h,w)=>{if(h.minValue==null||h.maxValue==null)return;const y=h.symbol&&h.symbol.color;y?.a?(w===0?a.push(h.minValue,h.maxValue+1e-4):a.push(h.minValue+1e-4,h.maxValue+1e-4),e.push(w),n.push([w,y.r,y.g,y.b])):i.push(h.minValue,h.maxValue)});const c=l?Ke(n,l):n,m=new D;m.functionName="Remap",m.functionArguments={InputRanges:a,OutputValues:e,NoDataRanges:i},m.variableName="Raster";const g=new D;return g.functionName="Colormap",g.functionArguments={Colormap:c,Raster:m},t.convertToRFT?new D({rasterFunctionDefinition:ie(g)}):g}function Ke(r,t){const a=yr.has(t)?qi(t):null;return a&&r.push([Math.floor(a[0]-1),0,0,0],[Math.ceil(a[1]+1),0,0,0]),r}function Lt(r){if(r==null)return;const{fields:t}=r;return t?.find(a=>a?.name&&a.name.toLowerCase()==="value")?.name}function Sr(r,t){const a=[],{pixelType:e,rasterAttributeTable:i}=t,n=i==null?null:i.features,l=Lt(i),u=r.defaultSymbol?.color?.toRgb(),p=r.uniqueValueInfos;if(p)if(n){if(l){const m=new Map;p.forEach(h=>{const w=h.value,y=Ut(h);w!=null&&y?.a&&m.set(String(w),y.toRgb())});const g=r.field;g&&n.forEach(({attributes:h})=>{const w=String(h[g]),y=h[l],R=m.get(w);R?a.push([y,...R]):u&&a.push([y,...u])})}}else for(let m=0;m<p.length;m++){const g=p[m],h=Ut(g),w=+g.value;if(h?.a){if(isNaN(w))return null;a.push([w,h.r,h.g,h.b])}}const d=e?Ke(a,e):a,c=new D;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=d,c.variableName="Raster",t.convertToRFT?new D({rasterFunctionDefinition:ie(c)}):c}function Ut(r){return r.symbol?.type==="polygon-3d"?r.symbol.symbolLayers?.find(t=>t.type==="fill")?.material?.color:r.symbol?.color}function Ir(r,t){const a=r.extractColormap();if(!a||a.length===0)return null;const{pixelType:e}=t,i=e?Ke(a,e):a,n=new D;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=i,t.convertToRFT?new D({rasterFunctionDefinition:ie(n)}):n}function xr(r){const t=[],a=[];return r.forEach(e=>{t.push(e[0]),a.push(Ui([...e.slice(1),255]))}),{type:"RasterColormap",values:t,colors:a}}let O=class extends b{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(r,t,a){this.layer.version<10.3||(t[a]=r)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(r,t,a){this.format&&this.format.toLowerCase().includes("jpg")&&r!=null&&(t[a]=r)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(r,t,a){this.format==="lerc"&&r!=null&&(t[a]=r)}get format(){return this.layer.renderer?.type==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:r}=this;return r.pixelType!==r.serviceRasterInfo.pixelType?r.pixelType:void 0}writeLercVersion(r,t,a){this.format==="lerc"&&this.layer.version>=10.5&&(t[a]=r)}get version(){const r=this.layer;return r.commitProperty("bandIds"),r.commitProperty("format"),r.commitProperty("compressionQuality"),r.commitProperty("compressionTolerance"),r.commitProperty("interpolation"),r.commitProperty("noData"),r.commitProperty("noDataInterpretation"),r.commitProperty("mosaicRule"),r.commitProperty("rasterFunction"),r.commitProperty("adjustAspectRatio"),r.commitProperty("pixelFilter"),r.commitProperty("pixelType"),r.commitProperty("definitionExpression"),r.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(r){this._set("version",r)}get mosaicRule(){const r=this.layer;let t=r.mosaicRule;const a=r.definitionExpression;return t?a&&a!==t.where&&(t=t.clone(),t.where=a):a&&(t=new k({where:a})),t}get rasterFunction(){const r=this.layer;let{rasterFunction:t}=r;const a=r.pixelFilter,e=!r.format||r.format.includes("jpg")||r.format.includes("png");t=this._addResampleRasterFunction(t);const i=r.multidimensionalSubset?.areaOfInterest;return i&&(t=Fr(t,i)),e&&!a&&r.renderer?.type!=="vector-field"&&(t=this.combineRendererWithRenderingRule(t)),t}combineRendererWithRenderingRule(r){const t=this.layer,{rasterInfo:a,renderer:e}=t;return r=r||t.rasterFunction,!e||!Et(e)?r:wt(fr(e,{rasterAttributeTable:a.attributeTable,pixelType:a.pixelType,dataType:a.dataType,bandNames:a.bandInfos.map(({name:i})=>i),convertColorRampToColormap:t.version<10.6,convertToRFT:!!r?.rasterFunctionDefinition,bandCount:a.bandCount}),r)}_addResampleRasterFunction(r){if(this.layer.renderer?.type!=="vector-field"||r?.functionName==="Resample")return r;const t=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,a=this.layer.serviceRasterInfo.pixelSize;let e=new D({functionName:"Resample",functionArguments:{ResamplingType:t,InputCellSize:a}});return e=r?.rasterFunctionDefinition?new D({rasterFunctionDefinition:ie(e)}):e,wt(e,r)}};function Fr(r,t){const a=new D({functionName:"Clip",functionArguments:{ClippingGeometry:t.toJSON(),ClippingType:1}});return wt(a,r)}s([o()],O.prototype,"layer",void 0),s([o({json:{write:!0}})],O.prototype,"adjustAspectRatio",null),s([x("adjustAspectRatio")],O.prototype,"writeAdjustAspectRatio",null),s([o({json:{write:!0}})],O.prototype,"bandIds",null),s([o({json:{write:!0}})],O.prototype,"compression",void 0),s([o({json:{write:!0}})],O.prototype,"compressionQuality",null),s([x("compressionQuality")],O.prototype,"writeCompressionQuality",null),s([o({json:{write:!0}})],O.prototype,"compressionTolerance",null),s([x("compressionTolerance")],O.prototype,"writeCompressionTolerance",null),s([o({json:{write:!0}})],O.prototype,"format",null),s([o({type:String,json:{read:{reader:ye.read},write:{writer:ye.write}}})],O.prototype,"interpolation",null),s([o({json:{write:!0}})],O.prototype,"noData",null),s([o({type:String,json:{read:{reader:Ge.read},write:{writer:Ge.write}}})],O.prototype,"noDataInterpretation",null),s([o({type:Se.apiValues,json:{read:Se.read,write:Se.write}})],O.prototype,"pixelType",null),s([o({json:{write:!0}})],O.prototype,"lercVersion",void 0),s([x("lercVersion")],O.prototype,"writeLercVersion",null),s([o({type:Number})],O.prototype,"version",null),s([o({json:{write:!0}})],O.prototype,"mosaicRule",null),s([o({json:{write:!0,name:"renderingRule"}})],O.prototype,"rasterFunction",null),O=s([f("esri.layers.support.ExportImageServiceParameters")],O);let he=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};s([o({type:P,json:{read:!0}})],he.prototype,"fromGeometry",void 0),s([o({type:P,json:{read:!0,write:!0}})],he.prototype,"toGeometry",void 0),s([o({json:{write:!0}})],he.prototype,"objectIds",void 0),s([o({type:String,json:{write:!0}})],he.prototype,"where",void 0),s([o({type:Number,json:{write:!0}})],he.prototype,"maxCount",void 0),he=s([f("esri.rest.support.FindImagesParameters")],he);const Dr=he,Ht=r=>{let t=class extends r{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return s([o({json:{write:!0}})],t.prototype,"make",void 0),s([o({json:{write:!0}})],t.prototype,"model",void 0),s([o({json:{write:!0}})],t.prototype,"focalLength",void 0),s([o({json:{write:!0}})],t.prototype,"pixelSize",void 0),s([o({json:{write:!0}})],t.prototype,"rows",void 0),s([o({json:{write:!0}})],t.prototype,"cols",void 0),t=s([f("esri.rest.support.CameraInfoMixin")],t),t};let Z=class extends Ht(b){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(r,t){t.acquisitionDate=r?.getTime()}};s([o({json:{write:!0}})],Z.prototype,"id",void 0),s([o({json:{name:"uri",write:!0}})],Z.prototype,"referenceUri",void 0),s([o({type:Date,json:{write:!0}})],Z.prototype,"acquisitionDate",void 0),s([x("acquisitionDate")],Z.prototype,"writeAcquisitionDate",null),s([o({json:{write:!0}})],Z.prototype,"cameraID",void 0),s([o({type:P,json:{write:!0}})],Z.prototype,"center",void 0),s([o({type:P,json:{write:!0}})],Z.prototype,"perspectiveCenter",void 0),s([o({json:{write:!0}})],Z.prototype,"orientation",void 0),Z=s([f("esri.rest.support.ImageInspectionInfo")],Z);const Tr=Z;let Xe=class extends b{constructor(){super(...arguments),this.images=null}};s([o({type:[Tr],json:{write:!0}})],Xe.prototype,"images",void 0),Xe=s([f("esri.rest.support.FindImagesResult")],Xe);const jr=Xe;var vt;let xe=vt=class extends b{constructor(r){super(r),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new vt(A({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};s([o({type:[String],json:{name:"angleName",write:!0}})],xe.prototype,"angleNames",void 0),s([o({type:P,json:{write:!0}})],xe.prototype,"point",void 0),s([o({type:te,json:{write:!0}})],xe.prototype,"spatialReference",void 0),s([o({type:qe,json:{write:!0}})],xe.prototype,"rasterId",void 0),xe=vt=s([f("esri.rest.support.ImageAngleParameters")],xe);const Nr=xe;let je=class extends b{constructor(r){super(r),this.north=null,this.up=null,this.spatialReference=null}};s([o({type:Number,json:{write:!0}})],je.prototype,"north",void 0),s([o({type:Number,json:{write:!0}})],je.prototype,"up",void 0),s([o({type:te,json:{write:!0}})],je.prototype,"spatialReference",void 0),je=s([f("esri.rest.support.ImageAngleResult")],je);const Cr=je,$=new Ct({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let ge=class extends b{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};s([o({type:Number,json:{read:!0,write:!0}})],ge.prototype,"value",void 0),s([o({type:String,json:{read:!0,write:!0}})],ge.prototype,"displayValue",void 0),s([o({type:Number,json:{read:!0,write:!0}})],ge.prototype,"uncertainty",void 0),ge=s([f("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],ge);let Ne=class extends ge{constructor(){super(...arguments),this.unit=null}};s([o({type:String,json:{read:de.read,write:de.write}})],Ne.prototype,"unit",void 0),Ne=s([f("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],Ne);let Ye=class extends ge{constructor(){super(...arguments),this.unit=null}};s([o({type:String,json:{read:$e.read,write:$e.write}})],Ye.prototype,"unit",void 0),Ye=s([f("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],Ye);let Le=class extends ge{constructor(){super(...arguments),this.unit=null}};s([o({type:String,json:{read:We.read,write:We.write}})],Le.prototype,"unit",void 0),Le=s([f("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],Le);let fe=class extends b{constructor(r){super(r),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};s([o()],fe.prototype,"type",void 0),s([o({type:$.apiValues,json:{read:$.read,write:$.write}})],fe.prototype,"measureOperation",void 0),s([o({type:k,json:{write:!0}})],fe.prototype,"mosaicRule",void 0),s([o({type:P,json:{write:!0}})],fe.prototype,"pixelSize",void 0),s([o({json:{write:!0}})],fe.prototype,"raster",void 0),fe=s([f("esri.rest.support.BaseImageMeasureParameters")],fe);const et=fe;var Rt;let oe=Rt=class extends et{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=r.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new Rt(A({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([o({types:U,json:{name:"fromGeometry",read:!0,write:!0}})],oe.prototype,"geometry",void 0),s([x("geometry")],oe.prototype,"writeGeometry",null),s([o({type:$.apiValues,json:{write:$.write}})],oe.prototype,"measureOperation",null),s([o({json:{read:!0}})],oe.prototype,"is3D",void 0),s([o({type:String,json:{read:de.read,write:de.write}})],oe.prototype,"linearUnit",void 0),s([o({type:String,json:{read:$e.read,write:$e.write}})],oe.prototype,"areaUnit",void 0),oe=Rt=s([f("esri.rest.support.ImageAreaParameters")],oe);const Pr=oe;let Ue=class extends b{constructor(r){super(r),this.name=null,this.sensorName=null}};s([o({type:String,json:{read:!0,write:!0}})],Ue.prototype,"name",void 0),s([o({type:String,json:{read:!0,write:!0}})],Ue.prototype,"sensorName",void 0),Ue=s([f("esri.rest.support.BaseImageMeasureResult")],Ue);const tt=Ue;let He=class extends tt{constructor(){super(...arguments),this.area=null,this.perimeter=null}};s([o({type:Ye,json:{read:!0,write:!0}})],He.prototype,"area",void 0),s([o({type:Ne,json:{read:!0,write:!0}})],He.prototype,"perimeter",void 0),He=s([f("esri.rest.support.ImageAreaResult")],He);const Or=He;let it=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.outSpatialReference=null}};s([o({type:te,json:{name:"outSR",write:!0}})],it.prototype,"outSpatialReference",void 0),it=s([f("esri.rest.support.ImageBoundaryParameters")],it);const _r=it;let Ce=class extends b{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(r,t){return r==null?null:r.rings?mt.fromJSON(r):Ee.fromJSON(r)}};s([o({type:Number,json:{write:!0}})],Ce.prototype,"area",void 0),s([o({types:U,json:{name:"shape",write:!0}})],Ce.prototype,"geometry",void 0),s([E("geometry")],Ce.prototype,"readGeometry",null),Ce=s([f("esri.rest.support.ImageBoundaryResult")],Ce);const Mr=Ce;var bt;let re=bt=class extends et{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=r.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new bt(A({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([o({type:P,json:{read:!0,write:!0}})],re.prototype,"fromGeometry",void 0),s([x("fromGeometry")],re.prototype,"writeFromGeometry",null),s([o({type:P,json:{read:!0,write:!0}})],re.prototype,"toGeometry",void 0),s([o({type:$.apiValues,json:{write:$.write}})],re.prototype,"measureOperation",null),s([o({json:{read:!0}})],re.prototype,"is3D",void 0),s([o({type:String,json:{read:de.read,write:de.write}})],re.prototype,"linearUnit",void 0),s([o({type:String,json:{read:We.read,write:We.write}})],re.prototype,"angularUnit",void 0),re=bt=s([f("esri.rest.support.ImageDistanceParameters")],re);const Vr=re;let Pe=class extends tt{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};s([o({type:Ne,json:{read:!0,write:!0}})],Pe.prototype,"distance",void 0),s([o({type:Le,json:{read:!0,write:!0}})],Pe.prototype,"azimuthAngle",void 0),s([o({type:Le,json:{read:!0,write:!0}})],Pe.prototype,"elevationAngle",void 0),Pe=s([f("esri.rest.support.ImageDistanceResult")],Pe);const Ar=Pe;let ae=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=JSON.stringify(r.toJSON()))}};s([o({types:U,json:{read:W,write:!0}})],ae.prototype,"geometry",void 0),s([x("geometry")],ae.prototype,"writeGeometry",null),s([o({json:{write:!0}})],ae.prototype,"objectIds",void 0),s([Wt(Zi,{ignoreUnknown:!1,name:"spatialRel"})],ae.prototype,"spatialRelationship",void 0),s([o({type:ft,json:{name:"time",write:!0}})],ae.prototype,"timeExtent",void 0),s([o({type:String,json:{write:!0}})],ae.prototype,"where",void 0),ae=s([f("esri.rest.support.ImageGPSInfoParameters")],ae);const Jr=ae;let rt=class extends Ht(b){constructor(){super(...arguments),this.id=null}};s([o({json:{write:!0}})],rt.prototype,"id",void 0),rt=s([f("esri.rest.support.CameraInfo")],rt);const qr=rt;let K=class extends b{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(r,t){t.acquisitionDate=r?.getTime()}};s([o({json:{write:!0}})],K.prototype,"id",void 0),s([o({json:{write:!0}})],K.prototype,"name",void 0),s([o({type:Date,json:{write:!0}})],K.prototype,"acquisitionDate",void 0),s([x("acquisitionDate")],K.prototype,"writeAcquisitionDate",null),s([o({json:{write:!0}})],K.prototype,"cameraID",void 0),s([o({type:P,json:{write:!0}})],K.prototype,"center",void 0),s([o({json:{write:!0}})],K.prototype,"gps",void 0),s([o({json:{write:!0}})],K.prototype,"orientation",void 0),K=s([f("esri.rest.support.ImageGPSInfo")],K);const Er=K;let Be=class extends b{constructor(){super(...arguments),this.images=null,this.cameras=null}};s([o({type:[Er],json:{write:!0}})],Be.prototype,"images",void 0),s([o({type:[qr],json:{write:!0}})],Be.prototype,"cameras",void 0),Be=s([f("esri.rest.support.ImageGPSInfoResult")],Be);const Gr=Be;var St;let le=St=class extends et{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=r.toJSON())}get measureOperation(){return this.operationType}clone(){return new St(A({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([o({type:P,json:{read:!0}})],le.prototype,"fromGeometry",void 0),s([x("fromGeometry")],le.prototype,"writeFromGeometry",null),s([o({type:P,json:{read:!0,write:!0}})],le.prototype,"toGeometry",void 0),s([o({type:$.apiValues,json:{write:$.write}})],le.prototype,"measureOperation",null),s([o({json:{read:!0}})],le.prototype,"operationType",void 0),s([o({type:String,json:{read:de.read,write:de.write}})],le.prototype,"linearUnit",void 0),le=St=s([f("esri.rest.support.ImageHeightParameters")],le);const zr=le;let st=class extends tt{constructor(){super(...arguments),this.height=null}};s([o({type:Ne,json:{read:!0,write:!0}})],st.prototype,"height",void 0),st=s([f("esri.rest.support.ImageHeightResult")],st);const Lr=st;var It;let _=It=class extends b{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=JSON.stringify(r.toJSON()))}set mosaicRule(r){let t=r;t?.mosaicMethod&&(t=k.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(r,t,a){r!=null&&(t[a]=JSON.stringify(r.toJSON()))}set rasterFunction(r){let t=r;t?.rasterFunction&&(t=D.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}writeRasterFunction(r,t,a){r!=null&&(t[a]=JSON.stringify(r.toJSON())),r.rasterFunctionDefinition&&(t[a]=JSON.stringify(r.rasterFunctionDefinition))}writeRasterFunctions(r,t,a){r!=null&&(t[a]=JSON.stringify(r.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(r,t,a){r!=null&&(t[a]=JSON.stringify(r))}writeTimeExtent(r,t,a){if(r!=null){const e=r.start!=null?r.start.getTime():null,i=r.end!=null?r.end.getTime():null;t[a]=e!=null?i!=null?`${e},${i}`:`${e}`:null}}clone(){return new It(A({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};s([o({types:U,json:{write:!0}})],_.prototype,"geometry",void 0),s([x("geometry")],_.prototype,"writeGeometry",null),s([o({type:k,json:{write:!0}})],_.prototype,"mosaicRule",null),s([x("mosaicRule")],_.prototype,"writeMosaicRule",null),s([o({type:D,json:{write:!0,name:"renderingRule"}})],_.prototype,"rasterFunction",null),s([x("rasterFunction")],_.prototype,"writeRasterFunction",null),s([o({type:[D],json:{write:!0,name:"renderingRules"}})],_.prototype,"rasterFunctions",void 0),s([x("rasterFunctions")],_.prototype,"writeRasterFunctions",null),s([o({type:P,json:{write:!0}})],_.prototype,"pixelSize",void 0),s([x("pixelSize")],_.prototype,"writePixelSize",null),s([o({type:Boolean,json:{write:!0}})],_.prototype,"returnGeometry",void 0),s([o({type:Boolean,json:{write:!0}})],_.prototype,"returnCatalogItems",void 0),s([o({type:Boolean,json:{write:!0}})],_.prototype,"returnPixelValues",void 0),s([o({type:Number,json:{write:!0}})],_.prototype,"maxItemCount",void 0),s([o({type:ft,json:{write:{target:"time"}}})],_.prototype,"timeExtent",void 0),s([x("timeExtent")],_.prototype,"writeTimeExtent",null),s([o({json:{write:!0}})],_.prototype,"raster",void 0),s([o({json:{write:!0}})],_.prototype,"viewId",void 0),s([o({type:Boolean,json:{write:!0}})],_.prototype,"processAsMultidimensional",void 0),_=It=s([f("esri.rest.support.ImageIdentifyParameters")],_);const Bt=_;let X=class extends b{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};s([o({json:{write:!0}})],X.prototype,"catalogItemVisibilities",void 0),s([o({type:Jt,json:{write:!0}})],X.prototype,"catalogItems",void 0),s([o({type:P,json:{write:!0}})],X.prototype,"location",void 0),s([o({json:{write:!0}})],X.prototype,"name",void 0),s([o({json:{write:!0}})],X.prototype,"objectId",void 0),s([o({json:{write:!0}})],X.prototype,"processedValues",void 0),s([o({json:{write:!0}})],X.prototype,"properties",void 0),s([o({json:{write:!0}})],X.prototype,"value",void 0),X=s([f("esri.rest.support.ImageIdentifyResult")],X);const Ur=X;var xt;let Oe=xt=class extends b{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(r,t,a){t.geometries={geometryType:"esriGeometryPoint",geometries:r.map(e=>e.toJSON())}}clone(){return new xt({geometries:this.geometries?.map(r=>r.clone())??[],rasterId:this.rasterId})}};s([o({type:[P],json:{write:!0}})],Oe.prototype,"geometries",void 0),s([x("geometries")],Oe.prototype,"writeGeometry",null),s([o({type:qe,json:{write:!0}})],Oe.prototype,"rasterId",void 0),Oe=xt=s([f("esri.rest.support.ImagePixelLocationParameters")],Oe);const Hr=Oe;let nt=class extends b{constructor(){super(...arguments),this.geometries=null}};s([o({json:{write:!0}})],nt.prototype,"geometries",void 0),nt=s([f("esri.rest.support.ImagePixelLocationResult")],nt);const Br=nt;var Ft;let Fe=Ft=class extends et{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=r.toJSON())}get measureOperation(){const{is3D:r,geometry:t}=this;return t.type==="point"?r?"point-3D":"point":r?"centroid-3D":"centroid"}clone(){return new Ft(A({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([o({types:U,json:{name:"fromGeometry",read:W}})],Fe.prototype,"geometry",void 0),s([x("geometry")],Fe.prototype,"writeGeometry",null),s([o({type:$.apiValues,json:{read:$.read,write:$.write}})],Fe.prototype,"measureOperation",null),s([o({json:{read:!0}})],Fe.prototype,"is3D",void 0),Fe=Ft=s([f("esri.rest.support.ImagePointParameters")],Fe);const Qr=Fe;let ot=class extends tt{constructor(){super(...arguments),this.point=null}};s([o({type:P,json:{name:"point.value",read:!0,write:!0}})],ot.prototype,"point",void 0),ot=s([f("esri.rest.support.ImagePointResult")],ot);const kr=ot;var Dt;let L=Dt=class extends b{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.raster=void 0,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=r.toJSON())}set locations(r){if(r?.length){const t=new Zt({spatialReference:r[0].spatialReference,points:r.map(({x:a,y:e})=>[a,e])});this._set("locations",r),this.geometry=t}}clone(){return new Dt(A({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};s([o({types:U,json:{read:W}})],L.prototype,"geometry",void 0),s([x("geometry")],L.prototype,"writeGeometry",null),s([o({type:[P]})],L.prototype,"locations",null),s([o({type:String,json:{type:ye.jsonValues,read:ye.read,write:ye.write}})],L.prototype,"interpolation",void 0),s([o({type:k,json:{write:!0}})],L.prototype,"mosaicRule",void 0),s([o({type:[String],json:{write:!0}})],L.prototype,"outFields",void 0),s([o({type:P,json:{write:!0}})],L.prototype,"pixelSize",void 0),s([o({type:String,json:{write:!0}})],L.prototype,"raster",void 0),s([o({type:Boolean,json:{write:!0}})],L.prototype,"returnFirstValueOnly",void 0),s([o({type:Number,json:{write:!0}})],L.prototype,"sampleDistance",void 0),s([o({type:Number,json:{write:!0}})],L.prototype,"sampleCount",void 0),s([o({type:Number,json:{write:!0}})],L.prototype,"sliceId",void 0),s([o({type:ft,json:{read:{source:"time"},write:{target:"time"}}})],L.prototype,"timeExtent",void 0),L=Dt=s([f("esri.rest.support.ImageSampleParameters")],L);const $r=L;let ue=class extends b{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};s([o({json:{write:!0}})],ue.prototype,"attributes",void 0),s([o({type:P,json:{write:!0}})],ue.prototype,"location",void 0),s([o({json:{write:!0}})],ue.prototype,"locationId",void 0),s([o({json:{write:!0}})],ue.prototype,"rasterId",void 0),s([o({json:{write:!0}})],ue.prototype,"resolution",void 0),s([o({json:{write:!0}})],ue.prototype,"pixelValue",void 0),ue=s([f("esri.rest.support.ImageSample")],ue);const Wr=ue;let at=class extends b{constructor(){super(...arguments),this.samples=[]}};s([o({type:[Wr],json:{write:!0}})],at.prototype,"samples",void 0),at=s([f("esri.rest.support.ImageSampleResult")],at);const Zr=at;let De=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(r,t,a){t.geometries=r?.length?{geometryType:Q(r[0]),geometries:r.map(e=>({...e.toJSON(),spatialReference:void 0}))}:null}};s([o({types:[U]})],De.prototype,"geometries",void 0),s([x("geometries")],De.prototype,"writeGeometries",null),s([o({type:[qe],json:{write:!0}})],De.prototype,"rasterIds",void 0),s([o({type:te,json:{name:"outSR",write:!0}})],De.prototype,"outSpatialReference",void 0),De=s([f("esri.rest.support.ImageToMapMultirayParameters")],De);const Kr=De;let pe=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]={...r.toJSON(),spatialReference:void 0})}};s([o({types:U,json:{read:W,write:!0}})],pe.prototype,"geometry",void 0),s([x("geometry")],pe.prototype,"writeGeometry",null),s([o({json:{write:!0}})],pe.prototype,"rasterId",void 0),s([o({type:te,json:{name:"outSR",write:!0}})],pe.prototype,"outSpatialReference",void 0),s([o({json:{name:"options.DOff",write:!0}})],pe.prototype,"depthOffset",void 0),s([o({json:{name:"options.Adjust",write:!0}})],pe.prototype,"adjust",void 0),pe=s([f("esri.rest.support.ImageToMapParameters")],pe);const Xr=pe;let Qe=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};s([o({type:String,json:{name:"uri",write:!0}})],Qe.prototype,"referenceUri",void 0),s([o({type:Number,json:{write:!0}})],Qe.prototype,"rasterId",void 0),Qe=s([f("esri.rest.support.ImageUrlParameters")],Qe);const Yr=Qe;let lt=class extends b{constructor(){super(...arguments),this.url=null}};s([o({json:{name:"imageURL",write:!0}})],lt.prototype,"url",void 0),lt=s([f("esri.rest.support.ImageUrlResult")],lt);const es=lt,Tt=new Ct({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let ce=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(r,t,a){r?.length&&(t.geometryType=Q(r[0]),t.geometries=r.map(e=>e.toJSON()))}};s([o({types:[U]})],ce.prototype,"geometries",void 0),s([x("geometries")],ce.prototype,"writeGeometries",null),s([o({type:k,json:{write:!0}})],ce.prototype,"mosaicRule",void 0),s([o({type:P,json:{write:!0}})],ce.prototype,"pixelSize",void 0),s([o({json:{write:!0}})],ce.prototype,"constantZ",void 0),s([o({type:Tt.apiValues,json:{read:Tt.read,write:Tt.write}})],ce.prototype,"baseType",void 0),ce=s([f("esri.rest.support.ImageVolumeParameters")],ce);const ts=ce;let Y=class extends b{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};s([o({json:{write:!0}})],Y.prototype,"area",void 0),s([o({json:{write:!0}})],Y.prototype,"cut",void 0),s([o({json:{write:!0}})],Y.prototype,"fill",void 0),s([o({json:{name:"maxz",write:!0}})],Y.prototype,"maxZ",void 0),s([o({json:{name:"minz",write:!0}})],Y.prototype,"minZ",void 0),s([o({json:{name:"meanz",write:!0}})],Y.prototype,"meanZ",void 0),s([o({json:{write:!0}})],Y.prototype,"cutCellCount",void 0),s([o({json:{write:!0}})],Y.prototype,"fillCellCount",void 0),Y=s([f("esri.rest.support.ImageVolume")],Y);const is=Y;let ut=class extends b{constructor(){super(...arguments),this.volumes=[]}};s([o({type:[is],json:{write:!0}})],ut.prototype,"volumes",void 0),ut=s([f("esri.rest.support.ImageVolumeResult")],ut);const rs=ut;let Te=class extends ne.ClonableMixin(b){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]=JSON.stringify(r))}};s([o({types:U,json:{read:W,write:!0}})],Te.prototype,"geometry",void 0),s([x("geometry")],Te.prototype,"writeGeometry",null),s([o({json:{write:!0}})],Te.prototype,"rasterId",void 0),s([o({json:{name:"options.VisibleOnly",write:!0}})],Te.prototype,"visibleOnly",void 0),Te=s([f("esri.rest.support.MapToImageParameters")],Te);const ss=Te;let we=class extends b{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(r,t){return r.spatialReference||(r={...r,spatialReference:t.Shape.spatialReference}),P.fromJSON(r)}};s([o({types:U,json:{name:"Shape",read:W,write:!0}})],we.prototype,"geometry",void 0),s([o({json:{name:"Length",write:!0}})],we.prototype,"length",void 0),s([o({json:{name:"Area",write:!0}})],we.prototype,"area",void 0),s([o({type:P,json:{name:"Center",write:!0}})],we.prototype,"center",void 0),s([E("center")],we.prototype,"readCenter",null),we=s([f("esri.rest.support.MeasureAreaFromImageResult")],we);const ns=we;var jt;let _e=jt=class extends b{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(r,t,a){r!=null&&(t.geometryType=Q(r),t[a]={...r.toJSON(),spatialReference:void 0})}clone(){const r=A({geometry:this.geometry,rasterId:this.rasterId});return new jt(r)}};s([o({types:U,json:{name:"fromGeometry",read:W,write:!0}})],_e.prototype,"geometry",void 0),s([x("geometry")],_e.prototype,"writeGeometry",null),s([o({json:{write:!0}})],_e.prototype,"rasterId",void 0),_e=jt=s([f("esri.rest.support.MeasureFromImageParameters")],_e);const os=_e;let ke=class extends b{constructor(){super(...arguments),this.geometry=null,this.length=null}};s([o({types:U,json:{name:"Shape",read:W,write:!0}})],ke.prototype,"geometry",void 0),s([o({json:{name:"Length",write:!0}})],ke.prototype,"length",void 0),ke=s([f("esri.rest.support.MeasureLengthFromImageResult")],ke);const as=ke;function Nt(r){const t=r?.time;if(t&&(t.start!=null||t.end!=null)){const a=[];t.start!=null&&a.push(t.start),t.end==null||a.includes(t.end)||a.push(t.end),r.time=a.join(",")}}async function Qt(r,t,a){t=J(Ti,t);const e=q(r),i=t.geometry?[t.geometry]:[],n=await Ie(i),l=t.toJSON();Nt(l);const u=n?.[0];u!=null&&(l.geometry=se(u));const p=G({...e.query,f:"json",...l});return z(p,a)}async function ls(r,t,a){const e=(t=J(ts,t)).toJSON();e.geometries=JSON.stringify(e.geometries);const i=q(r),n=G({...i.query,f:"json",...e}),l=z(n,a),{data:u}=await F(`${i.path}/calculateVolume`,l);return rs.fromJSON({volumes:u.results})}async function us(r,t,a){const e=(t=J(Nr,t)).toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),t?.point?.spatialReference?.imageCoordinateSystem&&(e.point.spatialReference=ct(t.point.spatialReference)),t?.spatialReference?.imageCoordinateSystem&&(e.spatialReference=Me(t.spatialReference));const i=q(r),n=G({...i.query,f:"json",...e}),l=z(n,a),{data:u}=await F(`${i.path}/computeAngles`,l);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new te({wkid:0,imageCoordinateSystem:u.spatialReference}):te.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Cr(u)}async function ps(r,t,a){const e=(t=J(Hr,t)).toJSON(),{geometries:i}=t;if(i)for(let d=0;d<i.length;d++)i[d].spatialReference?.imageCoordinateSystem&&(e.geometries.geometries[d].spatialReference=ct(i[d].spatialReference));const n=q(r),l=G({...n.query,f:"json",...e}),u=z(l,a),{data:p}=await F(`${n.path}/computePixelLocation`,u);return Br.fromJSON(p)}async function cs(r,t,a){const e=await Qt(r,t,a),i=q(r),{data:n}=await F(`${i.path}/computeStatisticsHistograms`,e),{statistics:l}=n;return l?.length&&l.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:l,histograms:n.histograms}}async function ms(r,t,a){const e=await Qt(r,t,a),i=q(r),{data:n}=await F(`${i.path}/computeHistograms`,e);return{histograms:n.histograms}}async function ds(r,t,a){const e=(t=J($r,t)).toJSON();Nt(e),e.outFields?.length&&(e.outFields=e.outFields.join(","));const i=await Ie(t.geometry),n=i?.[0];n!=null&&(e.geometry=se(n));const l=q(r),u=G({...l.query,f:"json",...e}),p=z(u,a),{data:d}=await F(`${l.path}/getSamples`,p),c=d.samples.map(m=>{const g=m.value==="NaN"||m.value===""?null:m.value.split(" ").map(h=>Number(h));return{...m,pixelValue:g}});return Zr.fromJSON({samples:c})}async function kt(r,t,a){t=J(Bt,t);const e=q(r),i=t.geometry?[t.geometry]:[];return Ie(i).then(n=>{const l=t.toJSON(),u=n?.[0];u!=null&&(l.geometry=JSON.stringify(se(u)));const p=G({...e.query,f:"json",...l}),d=z(p,a);return F(e.path+"/identify",d)}).then(n=>Ur.fromJSON(n.data))}async function ys(r,t,a){t=J(zr,t);const e=await pt(r,t,[t.fromGeometry,t.toGeometry],a);return Lr.fromJSON(e)}async function hs(r,t,a){t=J(Pr,t);const e=await pt(r,t,[t.geometry],a);return Or.fromJSON(e)}async function gs(r,t,a){t=J(Qr,t);const e=await pt(r,t,[t.geometry],a);return kr.fromJSON(e)}async function fs(r,t,a){t=J(Vr,t);const e=await pt(r,t,[t.fromGeometry,t.toGeometry],a);return Ar.fromJSON(e)}async function pt(r,t,a,e){const i=q(r),n=await Ie(a),l=t.toJSON();n[0]!=null&&(l.fromGeometry=JSON.stringify(se(n[0]))),n[1]!=null&&(l.toGeometry=JSON.stringify(se(n[1])));const u=G({...i.query,f:"json",...l}),p=z(u,e),{data:d}=await F(i.path+"/measure",p);return d}async function ws(r,t,a){const e=await $t(r,t,a);return as.fromJSON(e)}async function vs(r,t,a){const e=await $t(r,t,a);return ns.fromJSON(e)}async function $t(r,t,a){t=J(os,t);const e=q(r),i=t.toJSON(),n=G({...e.query,f:"json",...i}),l=z(n,a),{data:u}=await F(e.path+"/measureFromImage",l);return u}function se(r){const t=r.toJSON();return r.spatialReference?.imageCoordinateSystem&&(t.spatialReference=ct(r.spatialReference)),t}function ct(r){const{imageCoordinateSystem:t}=r;if(t){const{id:a,referenceServiceName:e}=t;return a!=null?e?{icsid:a,icsns:e}:{icsid:a}:{ics:t}}return r.toJSON()}function Me(r,t){if(!r.imageCoordinateSystem)return dt(r);const a=ct(r),{icsid:e,icsns:i}=a;return e==null||i!=null&&!t?.toLowerCase().includes("/"+i.toLowerCase()+"/")?JSON.stringify(a):`0:${e}`}async function Rs(r,t,a){t=J(_r,t);const e=q(r),i=t.toJSON();t.outSpatialReference&&(i.outSR=Me(t.outSpatialReference));const n=G({...e.query,f:"json",...i}),l=z(n,a),{data:u}=await F(e.path+"/queryBoundary",l);return Mr.fromJSON(u)}async function bs(r,t,a){const e=(t=J(Jr,t)).toJSON();Nt(e),e.objectIds?.length&&(e.objectIds=e.objectIds.join(",")),e.geometry||e.objectIds||e.time||e.where||(e.where="1=1");const i=await Ie(t.geometry),n=i?.[0];n!=null&&(e.geometry=se(n));const l=n?.spatialReference??t.geometry?.spatialReference;l&&(e.inSR=Me(l));const u=q(r),p=G({...u.query,f:"json",...e}),d=z(p,a),{data:c}=await F(`${u.path}/queryGPSInfo`,d);return Gr.fromJSON(c)}async function Ss(r,t,a){const e=(t=J(Xr,t)).toJSON();t.geometry.spatialReference.imageCoordinateSystem&&(e.geometry=se(t.geometry)),t.depthOffset&&t.adjust||delete e.options;const i=q(r),n=G({...i.query,f:"json",...e}),l=z(n,a),{data:u}=await F(`${i.path}/imageToMap`,l);return W(u)}async function Is(r,t,a){const e=(t=J(Kr,t)).toJSON();t.rasterIds?.length&&(e.rasterIds=t.rasterIds.join(","));const i=q(r),n=G({...i.query,f:"json",...e}),l=z(n,a),{data:u}=await F(`${i.path}/imageToMapMultiray`,l);return W(u)}async function xs(r,t,a){const e=(t=J(ss,t)).toJSON(),i=await Ie(t.geometry),n=i?.[0];n!=null&&(e.geometry=se(n)),t.visibleOnly||delete e.options;const l=n?.spatialReference??t.geometry?.spatialReference;l&&(e.inSR=Me(l));const u=q(r),p=G({...u.query,f:"json",...e}),d=z(p,a),{data:c}=await F(`${u.path}/mapToImage`,d);return W(c)}async function Fs(r,t,a){const e=(t=J(Yr,t)).toJSON(),i=q(r),n=G({...i.query,f:"json",...e}),l=z(n,a),{data:u}=await F(`${i.path}/getImageUrl`,l);return es.fromJSON(u)}async function Ds(r,t,a){const e=(t=J(Dr,t)).toJSON(),i=await Ie([t.fromGeometry,t.toGeometry]);i[0]!=null&&(e.fromGeometry=se(i[0]),i[0].spatialReference&&(e.inSR=Me(i[0].spatialReference))),i[1]!=null&&(e.toGeometry=se(i[1])),t.objectIds?.length&&(e.objectIds=e.objectIds.join(","));const n=q(r),l=G({...n.query,f:"json",...e}),u=z(l,a),{data:p}=await F(`${n.path}/find`,u);return jr.fromJSON(p)}async function Ts(r,t,a){const e=q(r),i=G({...e?.query,f:"json"}),n=z(i,a),l=`${e?.path}/${t}/info`,u=F(`${l}`,n),p=F(`${l}/keyProperties`,n),d=await Promise.allSettled([u,p]),c=d[0].status==="fulfilled"?d[0].value.data:null,m=d[1].status==="fulfilled"?d[1].value.data:null;let g=null;c.statistics?.length&&(g=c.statistics.map(M=>({min:M[0],max:M[1],avg:M[2],stddev:M[3]})));const h=Ee.fromJSON(c.extent),w=Math.ceil(h.width/c.pixelSizeX-.1),y=Math.ceil(h.height/c.pixelSizeY-.1),R=h.spatialReference,v=new P({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:R}),j=c.histograms?.length?c.histograms:null,C=new Hi({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new Mt({width:w,height:y,bandCount:c.bandCount,extent:h,spatialReference:R,pixelSize:v,pixelType:c.pixelType.toLowerCase(),statistics:g,histograms:j,keyProperties:m,storageInfo:C})}const js=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),Ns=ei(ti,{min:0,max:255});function Cs(r){const t=JSON.stringify(r),a=t.includes('"rasterFunctionDefinition":{'),e=a?t.match(/"type":"(.*?FunctionArguments")/gi):t.match(/"rasterFunction":"(.*?")/gi),i=e?.map(n=>a?n.slice(8,-18):n.slice(18,-1));return i?i.join("/"):null}const Ps=r=>{let t=class extends r{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new O({layer:this}))}readServiceSupportsMosaicRule(e,i){return this._isMosaicRuleSupported(i)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(i=>{e.set(i.name.toLowerCase().replaceAll(/ /gi,"_"),i.name)}),e}readBandIds(e,i){if(Array.isArray(e)&&e.length>0&&e.every(n=>typeof n=="number"))return e}readCapabilities(e,i){return this._readCapabilities(i)}writeCompressionQuality(e,i,n){e!=null&&this.format!=="lerc"&&(i[n]=e)}writeCompressionTolerance(e,i,n){this.format==="lerc"&&e!=null&&(i[n]=e)}readDefaultMosaicRule(e,i){return this._serviceSupportsMosaicRule?k.fromJSON(i):null}get fieldsIndex(){return this.fields?new Wi(this.fields):null}set format(e){e&&js.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,i){return i.serviceDataType==="esriImageServiceDataTypeVector-UV"||i.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,i){return i.minLOD!=null&&i.maxLOD!=null?e:0}readMaxScale(e,i){return i.minLOD!=null&&i.maxLOD!=null?e:0}set mosaicRule(e){let i=e;i?.mosaicMethod&&(i=k.fromJSON({...i.toJSON(),mosaicMethod:i.mosaicMethod,mosaicOperation:i.mosaicOperation})),this._set("mosaicRule",i)}readMosaicRule(e,i){const n=e||i.mosaicRule;return n?k.fromJSON(n):this._isMosaicRuleSupported(i)?k.fromJSON(i):null}writeMosaicRule(e,i,n){const{mosaicRule:l}=this;this._isValidCustomizedMosaicRule(l)&&(i[n]=l.toJSON())}writeNoData(e,i,n){e!=null&&typeof e=="number"&&(i[n]=Ns(e))}readObjectIdField(e,i){return e||(e=i.fields.find(n=>n.type==="esriFieldTypeOID"||n.type==="oid")?.name),e}get parsedUrl(){return Kt(this.url)}readSourceType(e,i){return this._isMosaicDataset(i)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:i}=this;return e?i?.find(({name:n})=>n===e)?.renderer.clone():this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,i,n){const l=i?.layerDefinition?.drawingInfo?.renderer,u=Pi(l,n);return u==null?null:(u.type==="vector-field"&&i.symbolTileSize&&!l.symbolTileSize&&(u.symbolTileSize=i.symbolTileSize),Et(u)||Pt.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,i,n){i.layerDefinition=i.layerDefinition||{},i.layerDefinition.drawingInfo=i.layerDefinition.drawingInfo||{},i.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(i.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.fields?.map(l=>l.clone())??[];e.push(ci()),this.sourceType==="mosaic-dataset"&&this.fields?.length&&e.push(mi()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:l})=>l.toLowerCase()==="none")&&e.push(di()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:l})=>l.toLowerCase()!=="none").forEach(({name:l})=>e.push(yi(l)));const{rasterInfo:i}=this;if(this._isVectorDataSet()){const l=i?.multidimensionalInfo?.variables[0].unit?.trim(),u=hi(l),p=gi();e.push(u,p)}if(i?.multidimensionalInfo&&this.sourceType==="raster-dataset"){const l=fi(i.multidimensionalInfo);e.push(...l)}const n=i?.attributeTable;if(n!=null){const l=wi(n);e.push(...l)}return e}set rasterFunction(e){let i=e;i?.rasterFunction&&(i=D.fromJSON({...i.toJSON(),rasterFunction:i.rasterFunction,rasterFunctionArguments:i.rasterFunctionArguments})),this._set("rasterFunction",i)}readRasterFunction(e,i){const n=i.rasterFunctionInfos;return i.renderingRule||n?.length&&n[0].name!=="None"?this._isRFTJson(i.renderingRule)?D.fromJSON({rasterFunctionDefinition:i.renderingRule}):D.fromJSON(i.renderingRule||{rasterFunctionInfos:i.rasterFunctionInfos}):null}readSpatialReference(e,i){const n=e||i.extent.spatialReference;return n?te.fromJSON(n):null}writePixelType(e,i,n){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(i[n]=Se.toJSON(e))}readVersion(e,i){let n=i.currentVersion;return n||(n=i.hasOwnProperty("fields")||i.hasOwnProperty("timeInfo")?10:9.3),n}applyFilter(e){let i=e;return this.pixelFilter&&(i=this._clonePixelData(e),this.pixelFilter(i)),i}async applyRenderer(e,i){let n=e;const{renderer:l,symbolizer:u,pixelFilter:p,bandIds:d}=this;if(!this._isPicture()&&l&&u&&!p){const c=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(l.toJSON()),m=this._rasterJobHandler.instance;if(m){c&&(u.bind(),await m.updateSymbolizer(u,i),this._cachedRendererJson=l.toJSON());const g=await m.symbolize({bandIds:d,...e},i);n={extent:e.extent,pixelBlock:g}}else n={extent:e.extent,pixelBlock:u.symbolize({bandIds:d,...e})}}return n}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async calculateVolume(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsCalculateVolume)throw new S("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=A(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),ls(this.url,e,this._getRequestOptions(i))}async computeAngles(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsComputeAngles)throw new S("imagery-layer:compute-angles","this operation is not supported on the input image service");return us(this.url,e,this._getRequestOptions(i))}async computePixelSpaceLocations(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsComputePixelLocation)throw new S("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return ps(this.url,e,this._getRequestOptions(i))}async computeHistograms(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsComputeHistograms)throw new S("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=A(e),this._applyMosaicAndRenderingRules(e),ms(this.url,e,this._getRequestOptions(i))}async computeStatisticsHistograms(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsComputeStatisticsHistograms)throw new S("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=A(e),this._applyMosaicAndRenderingRules(e),cs(this.url,e,this._getRequestOptions(i))}async measureHeight(e,i){const n=await this._fetchCapabilities(i?.signal);if(!(e.operationType==="base-and-top"?n.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?n.mensuration.supportsHeightFromBaseAndTopShadow:n.mensuration.supportsHeightFromTopAndTopShadow))throw new S("imagery-layer:measure-height","this operation is not supported on the input image service");return e=A(e),this._applyMosaicRule(e),ys(this.url,e,this._getRequestOptions(i))}async measureAreaAndPerimeter(e,i){const n=await this._fetchCapabilities(i?.signal);if(!(n.mensuration.supportsAreaAndPerimeter&&(!e.is3D||n.mensuration.supports3D)))throw new S("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=A(e),this._applyMosaicRule(e),hs(this.url,e,this._getRequestOptions(i))}async measureDistanceAndAngle(e,i){const n=await this._fetchCapabilities(i?.signal);if(!(n.mensuration.supportsDistanceAndAngle&&(!e.is3D||n.mensuration.supports3D)))throw new S("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=A(e),this._applyMosaicRule(e),fs(this.url,e,this._getRequestOptions(i))}async measurePointOrCentroid(e,i){const n=await this._fetchCapabilities(i?.signal);if(!(n.mensuration.supportsPointOrCentroid&&(!e.is3D||n.mensuration.supports3D)))throw new S("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=A(e),this._applyMosaicRule(e),gs(this.url,e,this._getRequestOptions(i))}async measureLengthFromImage(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsMeasureFromImage)throw new S("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new S("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return ws(this.url,e,this._getRequestOptions(i))}async measureAreaFromImage(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsMeasureFromImage)throw new S("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new S("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return vs(this.url,e,this._getRequestOptions(i))}getField(e){const{fieldsIndex:i}=this;return i?.get(e)}getFieldDomain(e,i){const n=this.getField(e);return n?n.domain:null}async fetchImage(e,i,n,l={}){if(e==null||i==null||n==null)throw new S("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const m=await this._generateRasterInfo(this.rasterFunction,{signal:l.signal});m&&(this.rasterInfo=m)}const u=this.getExportImageServiceParameters(e,i,n,l.timeExtent);if(u==null){if(l.requestAsImageElement&&this._canRequestImageElement(this.format)){const v=document.createElement("canvas");return v.width=i,v.height=n,l.returnImageBitmap?{imageBitmap:await At(v,`${a(this.parsedUrl)}/exportImage`,l.signal)}:{imageOrCanvasElement:v}}const{bandIds:m,rasterInfo:g}=this,h=(m?.length||g.bandCount)??0,w=i*n,y=g.pixelType,R=[];for(let v=0;v<h;v++)R.push(ht.createEmptyBand(y,w));return{pixelData:{pixelBlock:new ht({width:i,height:n,pixels:R,mask:new Uint8Array(w),pixelType:y}),extent:e}}}const p=!!l.requestAsImageElement&&!this.pixelFilter,d=p&&!!l.returnImageBitmap,c={imageServiceParameters:u,imageProps:{extent:e,width:i,height:n,format:this.format},requestAsImageElement:p,returnImageBitmap:d,signal:l.signal};return this._requestArrayBuffer(c)}fetchKeyProperties(e){return F(a(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(i=>i.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new S("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):F(a(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(i=>Jt.fromJSON(i.data))}getCatalogItemRasterInfo(e,i){const n={...i,query:this._getQueryParams()};return Ts(a(this.parsedUrl),e,n)}async getCatalogItemICSInfo(e,i){const{data:n}=await F(a(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...i}),l=n?.ics;if(!l)return;let u=null;try{u=(await F(a(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...i})).data.extent}catch{}if(!u?.spatialReference)return{ics:l,icsToPixelTransform:null,icsExtent:null,northDirection:null};const p=this.version>=10.7?F(a(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...i}).then(I=>I.data).catch(()=>({})):{},d=u.spatialReference,c={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:dt(d),outSR:"0:"+e},m=F(a(this.parsedUrl)+"/project",{query:this._getQueryParams(c),...i}).then(I=>I.data).catch(()=>({})),g=5,h=(u.xmin+u.xmax)/2,w=(u.ymax-u.ymin)/(g+1),y=u.ymin+w,R=[];for(let I=0;I<g;I++)R.push({x:h,y:y+w*I});const v={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:R}),inSR:dt(d),outSR:"0:"+e},j=F(a(this.parsedUrl)+"/project",{query:this._getQueryParams(v),...i}).then(I=>I.data).catch(()=>({})),C=await Promise.all([p,m,j]);let M=C[0].ipxf;if(M==null){const I=l.geodataXform?.xf_0;I?.name?.toLowerCase()==="topup"&&I?.coefficients?.length===6&&(M={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:I.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const N=Ee.fromJSON(C[1]?.geometries?.[0]);N&&(N.spatialReference=new te({wkid:0,imageCoordinateSystem:l}));const T=C[2].geometries?C[2].geometries.filter(I=>I?.x!=null&&I.y!=null&&I.x!=="NaN"&&I.y!=="NaN"):[],V=T.length;if(V<3)return{ics:l,icsToPixelTransform:M,icsExtent:N,northDirection:null};let B=0,Ve=0,ve=0,Ae=0;for(let I=0;I<V;I++)B+=T[I].x,Ve+=T[I].y,ve+=T[I].x*T[I].x,Ae+=T[I].x*T[I].y;const ee=(V*Ae-B*Ve)/(V*ve-B*B);let Re=0;const Je=T[g-1].x>T[0].x,me=T[g-1].y>T[0].y;return ee===1/0?Re=me?90:270:ee===0?Re=Je?0:180:ee>0?Re=Je?180*Math.atan(ee)/Math.PI:180*Math.atan(ee)/Math.PI+180:ee<0&&(Re=me?180+180*Math.atan(ee)/Math.PI:360+180*Math.atan(ee)/Math.PI),{ics:l,icsToPixelTransform:M,icsExtent:N,northDirection:Re}}async generateRasterInfo(e,i){e=J(D,e);const n={...i,query:this._getQueryParams()};if(!e||e.functionName?.toLowerCase()==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??qt(a(this.parsedUrl),this.sourceJSON,n);const l=Cs(e);if(!l)throw new S("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[l])return this._functionRasterInfos[l];const u=Ki(a(this.parsedUrl),e,n);this._functionRasterInfos[l]=u;try{return await u}catch(p){throw this._functionRasterInfos[l]=null,p}}getExportImageServiceParameters(e,i,n,l){e=e.clone().shiftCentralMeridian();const u=Me(e.spatialReference,a(this.parsedUrl)),p=this.exportImageServiceParameters.toJSON(),{bandIds:d,noData:c}=p;let{renderingRule:m}=p;const g=this.rasterFunction?.rasterFunctionDefinition,h=this.renderer?.type,w=!h||h==="raster-stretch"||h==="raster-colormap"||h==="unique-value"||h==="class-breaks"||h==="raster-shaded-relief";if(d?.length&&this._hasRasterFunction(this.rasterFunction)&&!g&&w){const v={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:d}};if(m.rasterFunction==="Stretch")v.rasterFunctionArguments.Raster=m.rasterFunctionArguments.Raster,m.rasterFunctionArguments.Raster=v;else if(m.rasterFunction==="Colormap"){const j=m.rasterFunctionArguments.Raster;j?.rasterFunction==="Stretch"?(v.rasterFunctionArguments.Raster=j.rasterFunctionArguments.Raster,j.rasterFunctionArguments.Raster=v):(v.rasterFunctionArguments.Raster=j,m.rasterFunctionArguments.Raster=v)}else v.rasterFunctionArguments.Raster=m,m=v;p.bandIds=void 0}else p.bandIds=d?.join(",");Array.isArray(c)&&c.length>0&&(p.noData=c.join(","));const y=this._processMultidimensionalIntersection(null,l,this.exportImageServiceParameters.mosaicRule);if(y.isOutSide)return null;p.mosaicRule=y.mosaicRule!=null?JSON.stringify(y.mosaicRule):null,l=y.timeExtent,p.renderingRule=this._getRenderingRuleString(D.fromJSON(m));const R={};if(l!=null){const{start:v,end:j}=l.toJSON();v&&j&&v===j?R.time=""+v:v==null&&j==null||(R.time=`${v??"null"},${j??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:i+","+n,...p,...R}}async getSamples(e,i){if(!(await this._fetchCapabilities(i?.signal))?.operations.supportsGetSamples)throw new S("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=A(e);const{raster:n}=this;return n&&e.raster==null&&(e.raster=n),ds(this.url,e,this._getRequestOptions(i))}async identify(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsIdentify)throw new S("imagery-layer:identify","identify operation is not supported on the input image service");e=A(e),this.version<10.91&&e.geometry?.type==="extent"&&(e.geometry=mt.fromExtent(e.geometry));const n=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(n.isOutSide)throw new S("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=n.timeExtent,e.mosaicRule=n.mosaicRule;const{raster:l,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),l&&e.raster==null&&(e.raster=l),kt(this.url,e,this._getRequestOptions(i))}async imageToMap(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsImageToMap)throw new S("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return Ss(a(this.parsedUrl),e,this._getRequestOptions(i))}async imageToMapMultiray(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsImageToMapMultiray)throw new S("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Is(a(this.parsedUrl),e,this._getRequestOptions(i))}async mapToImage(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsMapToImage)throw new S("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return xs(a(this.parsedUrl),e,this._getRequestOptions(i))}async findImages(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsFindImages)throw new S("imagery-layer:find-images","findImages operation is not supported on the input image service");return Ds(a(this.parsedUrl),e,this._getRequestOptions(i))}async getImageUrl(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsGetImageUrl)throw new S("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Fs(a(this.parsedUrl),e,this._getRequestOptions(i))}createQuery(){return new gt({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsQueryBoundary)throw new S("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},Rs(a(this.parsedUrl),e,this._getRequestOptions(i))}async queryRasters(e,i){return{query:e,requestOptions:i}=await this._prepareForQuery(e,i),ir(this.url,e,i)}async queryObjectIds(e,i){return{query:e,requestOptions:i}=await this._prepareForQuery(e,i),er(this.url,e,i)}async queryGPSInfo(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsQueryGPSInfo)throw new S("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},bs(a(this.parsedUrl),e,this._getRequestOptions(i))}async queryRasterCount(e,i){return{query:e,requestOptions:i}=await this._prepareForQuery(e,i),tr(this.url,e,i)}async queryVisibleRasters(e,i){if(!e)throw new S("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:n,returnDomainValues:l,returnTopmostRaster:u,showNoDataRecords:p}=i||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let d=!1,c=null,m=null;const g=be.servicePixelValue.toLowerCase(),h=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(d=e.outFields.some(N=>!N.toLowerCase().startsWith(g)),this.version>=10.4)){const N=e.outFields.filter(V=>V.toLowerCase().startsWith(g)&&V.length>g.length).map(V=>{const B=V.slice(g.length+1);return[this._updateRenderingRulesFunctionName(B,h),B]});c=N.map(V=>new D({functionName:V[0]})),m=N.map(V=>V[1]);const{rasterFunction:T}=this;c.length===0?T?.functionName?(c.push(T),m.push(T.functionName)):c=null:T?.functionName&&!c.some(V=>V.functionName===T.functionName)&&(c.push(T),m.push(T.functionName))}const w=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:y}=this;let R=e.timeExtent||this.timeExtent;if(y){const{isOutside:N,intersection:T}=yt(y,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(N)throw new S("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");T?.timeExtent!=null&&(R=T.timeExtent)}const v=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,R);let j=e.geometry;this.version<10.91&&j?.type==="extent"&&(j=mt.fromExtent(j));const C=this._getQueryParams({geometry:j,timeExtent:R,mosaicRule:v,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:c,pixelSize:n,returnCatalogItems:d,returnGeometry:w,raster:this.raster,maxItemCount:u?1:null});delete C.f;const M=new Bt(C);try{await this._generateRasterInfo(this.rasterFunction);const N=await kt(this.url,M,{signal:i?.signal,query:{...this.customParameters}}),T=e.outFields,V=N.value!=null&&N.value.toLowerCase().includes("nodata"),B=d&&!w&&N?.catalogItems?.features.length&&(p||!V),Ve=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?vi({rasterInfo:this.rasterInfo,multidimensionalDefinition:v?.multidimensionalDefinition,timeExtent:R,multidimensionalSubset:this.multidimensionalSubset}):null;if(!B)return this._processVisibleRastersResponse(N,{returnDomainValues:l,templateRRFunctionNames:m,showNoDataRecords:p,templateFields:T,effectiveMultidimensionalDefinition:Ve});const ve=this.objectIdField||"ObjectId",Ae=N.catalogItems?.features??[],ee=Ae.map(me=>me.attributes?.[ve]),Re=new gt({objectIds:ee,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[ve]}),Je=await this.queryRasters(Re);return Je?.features?.length&&Je.features.forEach(me=>{Ae.forEach(I=>{I.attributes[ve]===me.attributes[ve]&&me.geometry&&(I.geometry=me.geometry.clone(),e.outSpatialReference!=null&&(I.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(N,{returnDomainValues:l,templateRRFunctionNames:m,showNoDataRecords:p,templateFields:T,effectiveMultidimensionalDefinition:Ve})}catch{throw new S("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,i){const n=F(a(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:i}).then(p=>p.data?.statistics),l=F(a(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:i}).then(p=>p.data?.histograms),u=await Promise.all([n,l]);return u[0]&&u[0].forEach(p=>{p.avg=p.mean,p.stddev=p.standardDeviation}),{statistics:u[0]||null,histograms:u[1]||null}}async createFlowMesh(e,i){const n=this._rasterJobHandler.instance;return n?n.createFlowMesh(e,i):Ei(e.meshType,e.simulationSettings,e.flowData,i.signal!=null?i.signal:new AbortController().signal)}getMultidimensionalSubsetVariables(e){const i=e??this.serviceRasterInfo.multidimensionalInfo;return Ri(this.multidimensionalSubset,i)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const i=this.sourceJSON,n=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):qt(a(this.parsedUrl),i,{signal:e,query:this._getQueryParams()}).then(p=>(this._set("serviceRasterInfo",p),this._set("multidimensionalInfo",p.multidimensionalInfo),Xi(p,i),p)),l=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([n,l,u]).then(p=>{p[1]?this._set("rasterInfo",p[1]):this._set("rasterInfo",p[0]),p[2]&&this._set("rasterFunctionInfos",p[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),Pt.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([Xt(()=>this.rasterFunction,c=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(c).then(m=>{m&&(this.rasterInfo=m)})})]);const{serviceRasterInfo:d}=this;d.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(d)})}_combineMosaicRuleWithTimeExtent(e,i){const n=this.timeInfo,{multidimensionalInfo:l}=this.serviceRasterInfo;if(e==null||l==null||i==null||n?.startField==null)return e;const{startField:u}=n,p=l.variables.some(y=>y.dimensions.some(R=>R.name===u))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter(y=>y.dimensionName!==p),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const d=e.multidimensionalDefinition.filter(y=>y.dimensionName===p),c=i.start!=null?i.start.getTime():null,m=i.end!=null?i.end.getTime():null,g=c==null||m==null||c===m,h=g?[c||m]:[[c,m]],w=this.version>=10.8;if(d.length)d.forEach(y=>{y.dimensionName===p&&(w?(y.dimensionName=null,y.isSlice=!1,y.values=[]):(y.isSlice=g,y.values=h))});else if(!w){const y=e.multidimensionalDefinition.filter(R=>R.variableName!=null&&R.dimensionName==null);y.length?y.forEach(R=>{R.dimensionName=p,R.isSlice=g,R.values=h}):e.multidimensionalDefinition.push(new bi({variableName:"",dimensionName:p,isSlice:g,values:h}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(i=>!(!i.variableName&&!i.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,i){if(!(await this._fetchCapabilities(i?.signal)).operations.supportsQuery)throw new S("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?J(gt,e):this.createQuery(),i=this._getRequestOptions(i),this.raster&&(i.query={...i.query,raster:this.raster}),{query:e,requestOptions:i}}async _initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const e=new Ji;this._rasterJobHandler.connectionPromise=e.initialize().then(()=>{this._rasterJobHandler.instance=e},()=>{}),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:i,rasterFunction:n}=this;return e.type==="unique-value"&&this._hasRasterFunction(n)&&i?.bandCount===1&&["u8","s8"].includes(i.pixelType)||i!=null&&e!=null&&Oi(i).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let i=this.sourceJSON;if(!i){const{data:n,ssl:l}=await F(a(this.parsedUrl),{query:this._getQueryParams(),signal:e});i=n,this.sourceJSON=i,l&&(this.url=this.url.replace(/^http:/i,"https:"))}if(i.capabilities?.toLowerCase().split(",").map(n=>n.trim()).indexOf("tilesonly")>-1)throw new S("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(i,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const i=this._isMosaicDataset(e),n=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return i||n}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:i,functionArguments:n}=e,l=i?.toLowerCase()==="resample",u=n?.ResampleType||n?.resampleType;return l&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const i=this._isPicture(),{rasterInfo:n}=this;if(!i&&!this.pixelFilter||this._isVectorDataSet()){const l=this.mosaicRule?.multidimensionalDefinition?.[0].variableName,u=_i({variableName:l,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&n.bandCount>=3){const d=u?.bandIds??Mi(n);!d||n.bandCount===3&&d[0]===0&&d[1]===1&&d[2]===2||(this.bandIds=d)}e||(e=u?.renderer??Vi(n,{bandIds:this.bandIds,variableName:this.rasterFunction?null:l}));const p=Ai(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=p,this.symbolizer.rasterInfo=n):this.symbolizer=new Bi({rendererJSON:p,rasterInfo:n}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e?.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:i,viewId:n}=this;return{raster:i,viewId:n,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,i,n){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:i}):Vt(e,i,n)}async _getRasterFunctionInfos(e){const i=this.sourceJSON.rasterFunctionInfos;return this.loaded?i:i&&this.version>=10.3?i.length===1&&i[0].name.toLowerCase()==="none"?i:(await F(a(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data?.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:i,requestAsImageElement:n,returnImageBitmap:l,signal:u}=e;if(n&&this._canRequestImageElement(i.format)){const w=`${a(this.parsedUrl)}/exportImage`,{data:y}=await F(w,{responseType:l?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return y instanceof Blob?{imageBitmap:await At(y,w,u),params:i}:{imageOrCanvasElement:y,params:i}}const p=this._initJobHandler(),d=F(a(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),c=(await Promise.all([d,p]))[0].data,m=i.format||"jpgpng";let g=m;if(g!=="bsq"&&g!=="bip"&&(g=Qi(c)),!g)throw new S("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(c)));const h={signal:u};return{pixelData:{pixelBlock:await(m==="gif"||m==="bmp"||m.includes("png")&&(g==="png"||g==="jpg")?Vt(c,{useCanvas:!0,...i},h):this._decodePixelBlock(c,{width:i.width,height:i.height,planes:null,pixelType:null,noDataValue:null,format:m},h)),extent:i.extent},params:i}}_generateRasterInfo(e,i){return this.generateRasterInfo(e,i).catch(()=>null)}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let i=Si(e,{multidimensionalSubset:this.multidimensionalSubset});if(i!=null&&i.length>0){this.mosaicRule=this.mosaicRule||new k;const n=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&this.rasterFunction.functionName?.toLowerCase()!=="none"&&i.forEach(l=>l.variableName=""),i=i.filter(({variableName:l,dimensionName:u})=>l&&l!=="*"||u),!n?.length&&i.length&&(this.mosaicRule.multidimensionalDefinition=i)}}_processVisibleRastersResponse(e,i){i=i||{};const n=e.value,{templateRRFunctionNames:l,showNoDataRecords:u,returnDomainValues:p,templateFields:d}=i,c=e.processedValues;let m=e.catalogItems?.features,g=e.properties?.Values?.map(C=>C.replaceAll(/ /gi,", "))||[];const h=this.objectIdField||"ObjectId",w=typeof n=="string"&&n.toLowerCase().includes("nodata"),y=[];if(n&&!m&&!w){const C={};C[h]=0,g=[n],m=[new Yt({geometry:this.fullExtent,attributes:C})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&Ii(this.rasterFields,C,i.effectiveMultidimensionalDefinition)}if(!m)return[];this._updateResponseFieldNames(m,d),w&&!u&&(m=[]);const{itemPixelValue:R,servicePixelValue:v}=be,j=this.rasterFields.some(C=>C.name===R);for(let C=0;C<m.length;C++){const M=m[C];if(n!=null){const N=g[C],T=this.rasterFunction&&c&&c.length>0&&l&&l.length>0&&l.includes(this.rasterFunction.functionName)?c[l.indexOf(this.rasterFunction.functionName)]:n;if(N.toLowerCase()==="nodata"&&!u)continue;j&&(M.attributes[R]=N),M.attributes[v]=T,this._updateFeatureWithMagDirValues(M,N);const V=this.fields&&this.fields.length>0;let B=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?V?N:n:T;this.rasterFunction||(B=V?N:n),this._updateFeatureWithRasterAttributeTableValues(M,B)}if(M.sourceLayer=M.layer=this,p&&this._updateFeatureWithDomainValues(M),l&&c&&l.length===c.length)for(let N=0;N<l.length;N++){const T=`${be.servicePixelValue}.${l[N]}`;M.attributes[T]=c[N]}y.push(m[C])}return y}_processMultidimensionalIntersection(e,i,n){const{multidimensionalSubset:l}=this;if(!l)return{isOutSide:!1,timeExtent:i,mosaicRule:n=this._combineMosaicRuleWithTimeExtent(n,i)};if(l){const{isOutside:u,intersection:p}=yt(l,{geometry:e,timeExtent:i});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};p?.timeExtent!=null&&(i=p.timeExtent)}if(n=this._combineMosaicRuleWithTimeExtent(n,i),n?.multidimensionalDefinition){const{isOutside:u}=yt(l,{multidimensionalDefinition:n.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:i,mosaicRule:n}}_updateFeatureWithRasterAttributeTableValues(e,i){const n=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(n==null)return;const{features:l,fields:u}=n,p=u.map(c=>c.name).find(c=>c.toLowerCase()==="value");if(!p)return;const d=l.filter(c=>c.attributes[p]===(i!=null?parseInt(i,10):null));d&&d[0]&&u.forEach(c=>{const m=xi+c.name;e.attributes[m]=d[0].attributes[c.name]})}_updateFeatureWithMagDirValues(e,i){if(!this._isVectorDataSet())return;const n=i.split(/,\s*/).map(c=>parseFloat(c)),l=n.map(c=>[c]),u=n.map(c=>({minValue:c,maxValue:c,noDataValue:null})),p=new ht({height:1,width:1,pixelType:"f32",pixels:l,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:p,extent:new Ee(0,0,0,0,this.spatialReference)});const d=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[p.pixels[0][0],p.pixels[1][0]]:Gi([p.pixels[0][0],p.pixels[1][0]]);e.attributes[be.magnitude]=d[0],e.attributes[be.direction]=d[1]}_updateFeatureWithDomainValues(e){(this.fields&&this.fields.filter(n=>n.domain&&n.domain.type==="coded-value"))?.forEach(n=>{const l=e.attributes[n.name];if(l!=null){const u=n.domain.codedValues.find(p=>p.code===l);u&&(e.attributes[n.name]=u.name)}})}_updateResponseFieldNames(e,i){if(!i||i.length<1)return;const n=this.fieldsIndex;n!=null&&e.forEach(l=>{if(l?.attributes)for(const u of i){const p=n.get(u)?.name;p&&p!==u&&(l.attributes[u]=l.attributes[p],delete l.attributes[p])}})}_getRenderingRuleString(e){if(e){let i=e.toJSON();return i=i.rasterFunctionDefinition??i,(i.thumbnail||i.thumbnailEx)&&(i.thumbnail=i.thumbnailEx=null),JSON.stringify(i)}return null}_hasRasterFunction(e){return e?.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,i){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const n=e.toLowerCase().replaceAll(/ /gi,"_");return i.has(n)?i.get(n):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:i,mosaicRule:n,rasterFunction:l}=this;l&&e.rasterFunction==null&&(e.rasterFunction=l),n&&e.mosaicRule==null&&(e.mosaicRule=n),i&&e.raster==null&&(e.raster=i)}_applyMosaicRule(e){const{raster:i,mosaicRule:n}=this;n&&e.mosaicRule==null&&(e.mosaicRule=n),i&&e.raster==null&&(e.raster=i)}_readCapabilities(e){const i=e.capabilities?e.capabilities.toLowerCase().split(",").map(j=>j.trim()):["image","catalog"],{currentVersion:n,advancedQueryCapabilities:l,maxRecordCount:u}=e,p=i.includes("image"),d=e.serviceDataType==="esriImageServiceDataTypeElevation",c=!(!e.spatialReference&&!e.extent?.spatialReference),m=i.includes("edit"),g=i.includes("mensuration")&&c,h=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(j=>j.trim()),w=g&&h.includes("basic"),y=this._isMosaicDataset(e)&&i.includes("catalog"),R=i.includes("download"),v=n>=10.7&&d||n>=11.4&&(d||g&&h.includes("3d"));return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:p,supportsExportImage:p,supportsIdentify:p,supportsImageToMap:n>=11.2&&y,supportsImageToMapMultiray:n>=11.2&&y,supportsMapToImage:n>=11.2&&y,supportsFindImages:n>=11.2&&y,supportsGetImageUrl:n>=11.3&&R,supportsMeasure:g,supportsMeasureFromImage:n>=11.2,supportsDownload:R,supportsQuery:y&&e.fields&&e.fields.length>0,supportsGetSamples:n>=10.2&&p,supportsProject:n>=10.3&&p,supportsComputeStatisticsHistograms:n>=10.4&&p,supportsQueryBoundary:n>=10.6&&p,supportsCalculateVolume:v,supportsComputePixelLocation:n>=10.7&&y,supportsComputeAngles:n>=10.91,supportsQueryGPSInfo:n>=11.2&&y,supportsAdd:m,supportsDelete:m,supportsEditing:m,supportsUpdate:m,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,supportsStatistics:!!l?.supportsStatistics,supportsOrderBy:!!l?.supportsOrderBy,supportsDistinct:!!l?.supportsDistinct,supportsPagination:!!l?.supportsPagination,supportsStandardizedQueriesOnly:!!l?.useStandardizedQueries,supportsPercentileStatistics:!!l?.supportsPercentileStatistics,supportsCentroid:!!l?.supportsReturningGeometryCentroid,supportsCurrentUser:!1,supportsDistance:!!l?.supportsQueryWithDistance,supportsExtent:!!l?.supportsReturningQueryExtent,supportsGeometryProperties:!!l?.supportsReturningGeometryProperties,supportsHavingClause:!!l?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!l?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:w,supportsAreaAndPerimeter:w,supportsPointOrCentroid:w,supportsHeightFromBaseAndTop:g&&h.includes("base-top height"),supportsHeightFromBaseAndTopShadow:g&&h.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:g&&h.includes("top-top shadow height"),supports3D:g&&h.includes("3d")}}}};function a(e){return e?.path??""}return s([o({clonable:!1})],t.prototype,"_functionRasterInfos",void 0),s([o({clonable:!1})],t.prototype,"_rasterJobHandler",void 0),s([o({clonable:!1})],t.prototype,"_cachedRendererJson",void 0),s([o({readOnly:!0})],t.prototype,"_serviceSupportsMosaicRule",void 0),s([E("_serviceSupportsMosaicRule",["currentVersion","fields"])],t.prototype,"readServiceSupportsMosaicRule",null),s([o({readOnly:!0})],t.prototype,"_rasterFunctionNamesIndex",null),s([o()],t.prototype,"adjustAspectRatio",void 0),s([o({type:[qe],json:{write:!0}})],t.prototype,"bandIds",void 0),s([E("bandIds")],t.prototype,"readBandIds",null),s([o({readOnly:!0,json:{read:!1}})],t.prototype,"capabilities",void 0),s([E("service","capabilities",["capabilities","currentVersion","serviceDataType"])],t.prototype,"readCapabilities",null),s([o({type:Number})],t.prototype,"compressionQuality",void 0),s([x("compressionQuality")],t.prototype,"writeCompressionQuality",null),s([o({type:Number})],t.prototype,"compressionTolerance",void 0),s([x("compressionTolerance")],t.prototype,"writeCompressionTolerance",null),s([o({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),s([o({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],t.prototype,"defaultMosaicRule",void 0),s([E("defaultMosaicRule",["defaultMosaicMethod"])],t.prototype,"readDefaultMosaicRule",null),s([o({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],t.prototype,"definitionExpression",void 0),s([o({readOnly:!0,constructOnly:!0})],t.prototype,"exportImageServiceParameters",void 0),s([o()],t.prototype,"rasterInfo",void 0),s([o({readOnly:!0,type:[$i]})],t.prototype,"fields",void 0),s([o({readOnly:!0})],t.prototype,"fieldsIndex",null),s([o({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],t.prototype,"format",null),s([E("service","format",["serviceDataType"])],t.prototype,"readFormat",null),s([o({type:Ee})],t.prototype,"fullExtent",void 0),s([o({readOnly:!0})],t.prototype,"hasMultidimensions",void 0),s([o({json:{read:{source:"maxImageHeight"}}})],t.prototype,"imageMaxHeight",void 0),s([o({json:{read:{source:"maxImageWidth"}}})],t.prototype,"imageMaxWidth",void 0),s([o({type:String,json:{type:ye.jsonValues,read:ye.read,write:ye.write}})],t.prototype,"interpolation",void 0),s([o()],t.prototype,"minScale",void 0),s([E("service","minScale")],t.prototype,"readMinScale",null),s([o()],t.prototype,"maxScale",void 0),s([E("service","maxScale")],t.prototype,"readMaxScale",null),s([o({type:k})],t.prototype,"mosaicRule",null),s([E("mosaicRule",["mosaicRule","defaultMosaicMethod"])],t.prototype,"readMosaicRule",null),s([x("mosaicRule")],t.prototype,"writeMosaicRule",null),s([o()],t.prototype,"multidimensionalInfo",void 0),s([o({type:ji,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),s([o({json:{type:qe}})],t.prototype,"noData",void 0),s([x("noData")],t.prototype,"writeNoData",null),s([o({type:String,json:{type:Ge.jsonValues,read:Ge.read,write:Ge.write}})],t.prototype,"noDataInterpretation",void 0),s([o({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],t.prototype,"objectIdField",void 0),s([E("objectIdField")],t.prototype,"readObjectIdField",null),s([o({readOnly:!0})],t.prototype,"geometryType",void 0),s([o({})],t.prototype,"typeIdField",void 0),s([o({})],t.prototype,"types",void 0),s([o({readOnly:!0})],t.prototype,"parsedUrl",null),s([o({type:Function})],t.prototype,"pixelFilter",void 0),s([o()],t.prototype,"raster",void 0),s([o({readOnly:!0})],t.prototype,"sourceType",void 0),s([E("sourceType",["serviceSourceType","fields"])],t.prototype,"readSourceType",null),s([o()],t.prototype,"viewId",void 0),s([o()],t.prototype,"renderer",null),s([o({types:Ni,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:Ci,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],t.prototype,"internalRenderer",null),s([E("internalRenderer")],t.prototype,"readRenderer",null),s([x("internalRenderer")],t.prototype,"writeRenderer",null),s([o({clonable:!1})],t.prototype,"symbolizer",void 0),s([o(ai)],t.prototype,"opacity",void 0),s([o({readOnly:!0})],t.prototype,"rasterFields",null),s([o({constructOnly:!0})],t.prototype,"rasterFunctionInfos",void 0),s([o({type:D,json:{name:"renderingRule"}})],t.prototype,"rasterFunction",null),s([E("rasterFunction",["renderingRule","rasterFunctionInfos"])],t.prototype,"readRasterFunction",null),s([o({readOnly:!0})],t.prototype,"serviceDataType",void 0),s([o({readOnly:!0,type:te})],t.prototype,"spatialReference",void 0),s([E("spatialReference",["spatialReference","extent"])],t.prototype,"readSpatialReference",null),s([o({type:Se.apiValues,json:{read:Se.read,type:Se.jsonValues}})],t.prototype,"pixelType",void 0),s([x("pixelType")],t.prototype,"writePixelType",null),s([o({constructOnly:!0,type:Mt})],t.prototype,"serviceRasterInfo",void 0),s([o()],t.prototype,"sourceJSON",void 0),s([o(li)],t.prototype,"url",void 0),s([o({readOnly:!0})],t.prototype,"version",void 0),s([E("version",["currentVersion","fields","timeInfo"])],t.prototype,"readVersion",null),t=s([f("esri.layers.mixins.ArcGISImageService")],t),t};let H=class extends sr(pr(ur(or(ar(Yi(Ps(lr(nr(rr(ni(ne.ClonableMixin(oi)))))))))))){constructor(...r){super(...r),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=ii(async(t,a,e)=>{const{save:i,saveAs:n}=await import("./imageryUtils-DfgZRr_B.js");switch(t){case Ze.SAVE:return i(this,a);case Ze.SAVE_AS:return n(this,e,a)}})}normalizeCtorArgs(r,t){return typeof r=="string"?{url:r,...t}:r}load(r){const t=r!=null?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},r).catch(ri).then(()=>this._fetchService(t))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(r){this._set("legendEnabled",r)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(r){this._set("listMode",r)}writeOperationalLayerType(r,t,a){const e=this.renderer?.type==="vector-field";t[a]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(r){const{rasterFields:t}=this,a=new Set,e=be.itemPixelValue.toLowerCase(),i=this.sourceType==="raster-dataset",n=Di.toLowerCase(),l=`${be.servicePixelValue.toLowerCase()}.`;for(const d of t){const c=d.name.toLowerCase();c===e||c.startsWith(l)||i&&c.startsWith(n)||a.add(d.name)}const u=mr({fields:t,title:this.title},{...r,visibleFieldNames:a}),{rasterInfo:p}=this;return u?.fieldInfos&&p&&Fi(u.fieldInfos,p),u}queryFeatures(r,t){return this.queryRasters(r,t).then(a=>{if(a?.features)for(const e of a.features)e.layer=e.sourceLayer=this;return a})}queryFeatureCount(r,t){return this.queryRasterCount(r,t)}redraw(){this.emit("redraw")}async save(r){return this._debouncedSaveOperations(Ze.SAVE,r)}async saveAs(r,t){return this._debouncedSaveOperations(Ze.SAVE_AS,t,r)}serviceSupportsSpatialReference(r){return cr(this,r)}write(r,t){if(!this._isPreviewLayer)return super.write(r,t);if(t?.messages){const a=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new S("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}};s([o(ui)],H.prototype,"legendEnabled",null),s([o({type:["show","hide"]})],H.prototype,"listMode",null),s([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],H.prototype,"isReference",void 0),s([o({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],H.prototype,"operationalLayerType",void 0),s([x("web-map","operationalLayerType")],H.prototype,"writeOperationalLayerType",null),s([o(pi)],H.prototype,"popupEnabled",void 0),s([o({type:si,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],H.prototype,"popupTemplate",void 0),s([o({readOnly:!0})],H.prototype,"defaultPopupTemplate",null),s([o({readOnly:!0,json:{read:!1}})],H.prototype,"type",void 0),s([o({readOnly:!0})],H.prototype,"_isPreviewLayer",null),H=s([f("esri.layers.ImageryLayer")],H);const Os=H;export{Os as default};
