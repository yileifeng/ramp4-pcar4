import{ab as a,b$ as x}from"./main-BC8gbEPx.js";import{u as g,i as v,c as G,s as N}from"./operatorGeodesicBuffer-CUWD_-zA.js";import{e as l}from"./geodeticCurveType-D_etKnbP.js";let u,y,f;function d(){return!!u&&N()}async function T(){if(!d()){const[t]=await Promise.all([import("./jsonConverter-C4JGLtD-.js"),g()]);u=t.fromGeometries,y=t.fromGeometry,f=t.toGeometry}}function b(t,o,m={}){let{curveType:n="geodesic",maxDeviation:e=NaN,unit:i}=m;i&&(o=a(o,i,"meters"),e&&(e=a(e,i,"meters")));const r=y(t),s=r.getSpatialReference();return f(v(r.getGeometry(),s,l[n],o,e),s)}function w(t,o,m={}){let{curveType:n="geodesic",maxDeviation:e=NaN,union:i=!1,unit:r}=m;r&&(o=o.map(c=>a(c,r,"meters")),e&&(e=a(e,r,"meters")));const[s,p]=u(t);return G(s,p,l[n],o,e,i).map(c=>f(c,p)).filter(x)}export{b as execute,w as executeMany,d as isLoaded,T as load};
