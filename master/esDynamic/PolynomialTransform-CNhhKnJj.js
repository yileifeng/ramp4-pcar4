import{x as a,z as y,K as C,G as F,bi as S,D as X,B as z,bC as P,bz as M}from"./main-BC8gbEPx.js";let x=class extends F{get affectsPixelSize(){return!1}forwardTransform(e){return e}inverseTransform(e){return e}};a([y()],x.prototype,"affectsPixelSize",null),a([y({json:{write:!0}})],x.prototype,"spatialReference",void 0),x=a([C("esri.layers.support.rasterTransforms.BaseRasterTransform")],x);const v=x;var w;let d=w=class extends v{constructor(){super(...arguments),this.type="gcs-shift",this.tolerance=1e-8}forwardTransform(e){return(e=e.clone()).type==="point"?(e.x>180+this.tolerance&&(e.x-=360),e):(e.xmin>=180-this.tolerance?(e.xmax-=360,e.xmin-=360):e.xmax>180+this.tolerance&&(e.xmin=-180,e.xmax=180),e)}inverseTransform(e){return(e=e.clone()).type==="point"?(e.x<-this.tolerance&&(e.x+=360),e):(e.xmin<-this.tolerance&&(e.xmin+=360,e.xmax+=360),e)}clone(){return new w({tolerance:this.tolerance})}};a([S({GCSShiftXform:"gcs-shift"})],d.prototype,"type",void 0),a([y()],d.prototype,"tolerance",void 0),d=w=a([C("esri.layers.support.rasterTransforms.GCSShiftTransform")],d);const b=d;var g;function T(e,s,o){const{x:r,y:t}=s;if(o<2)return{x:e[0]+r*e[2]+t*e[4],y:e[1]+r*e[3]+t*e[5]};if(o===2){const p=r*r,O=t*t,R=r*t;return{x:e[0]+r*e[2]+t*e[4]+p*e[6]+R*e[8]+O*e[10],y:e[1]+r*e[3]+t*e[5]+p*e[7]+R*e[9]+O*e[11]}}const n=r*r,l=t*t,u=r*t,i=n*r,h=n*t,m=r*l,f=t*l;return{x:e[0]+r*e[2]+t*e[4]+n*e[6]+u*e[8]+l*e[10]+i*e[12]+h*e[14]+m*e[16]+f*e[18],y:e[1]+r*e[3]+t*e[5]+n*e[7]+u*e[9]+l*e[11]+i*e[13]+h*e[15]+m*e[17]+f*e[19]}}function Y(e,s,o){const{xmin:r,ymin:t,xmax:n,ymax:l,spatialReference:u}=s;let i=[];if(o<2)i.push({x:r,y:l}),i.push({x:n,y:l}),i.push({x:r,y:t}),i.push({x:n,y:t});else{let f=10;for(let p=0;p<f;p++)i.push({x:r,y:t+(l-t)*p/(f-1)}),i.push({x:n,y:t+(l-t)*p/(f-1)});f=8;for(let p=1;p<=f;p++)i.push({x:r+(n-r)*p/f,y:t}),i.push({x:r+(n-r)*p/f,y:l})}i=i.map(f=>T(e,f,o));const h=i.map(f=>f.x),m=i.map(f=>f.y);return new M({xmin:Math.min.apply(null,h),xmax:Math.max.apply(null,h),ymin:Math.min.apply(null,m),ymax:Math.max.apply(null,m),spatialReference:u})}function j(e){const[s,o,r,t,n,l]=e,u=r*l-n*t,i=n*t-r*l;return[(n*o-s*l)/u,(r*o-s*t)/i,l/u,t/i,-n/u,-r/i]}let c=g=class extends v{constructor(){super(...arguments),this.polynomialOrder=1,this.type="polynomial"}readForwardCoefficients(e,s){const{coeffX:o,coeffY:r}=s;if(!o?.length||!r?.length||o.length!==r.length)return null;const t=[];for(let n=0;n<o.length;n++)t.push(o[n]),t.push(r[n]);return t}writeForwardCoefficients(e,s,o){const r=[],t=[];for(let n=0;n<e?.length;n++)n%2==0?r.push(e[n]):t.push(e[n]);s.coeffX=r,s.coeffY=t}get inverseCoefficients(){let e=this._get("inverseCoefficients");const s=this._get("forwardCoefficients");return!e&&s&&this.polynomialOrder<2&&(e=j(s)),e}set inverseCoefficients(e){this._set("inverseCoefficients",e)}readInverseCoefficients(e,s){const{inverseCoeffX:o,inverseCoeffY:r}=s;if(!o?.length||!r?.length||o.length!==r.length)return null;const t=[];for(let n=0;n<o.length;n++)t.push(o[n]),t.push(r[n]);return t}writeInverseCoefficients(e,s,o){const r=[],t=[];for(let n=0;n<e?.length;n++)n%2==0?r.push(e[n]):t.push(e[n]);s.inverseCoeffX=r,s.inverseCoeffY=t}get affectsPixelSize(){return this.polynomialOrder>0}forwardTransform(e){if(e.type==="point"){const s=T(this.forwardCoefficients,e,this.polynomialOrder);return new P({x:s.x,y:s.y,spatialReference:e.spatialReference})}return Y(this.forwardCoefficients,e,this.polynomialOrder)}inverseTransform(e){if(e.type==="point"){const s=T(this.inverseCoefficients,e,this.polynomialOrder);return new P({x:s.x,y:s.y,spatialReference:e.spatialReference})}return Y(this.inverseCoefficients,e,this.polynomialOrder)}clone(){return new g({polynomialOrder:this.polynomialOrder,forwardCoefficients:this.forwardCoefficients?[...this.forwardCoefficients]:null,inverseCoefficients:this.inverseCoefficients?[...this.inverseCoefficients]:null})}};a([y({json:{write:!0}})],c.prototype,"polynomialOrder",void 0),a([y()],c.prototype,"forwardCoefficients",void 0),a([X("forwardCoefficients",["coeffX","coeffY"])],c.prototype,"readForwardCoefficients",null),a([z("forwardCoefficients")],c.prototype,"writeForwardCoefficients",null),a([y({json:{write:!0}})],c.prototype,"inverseCoefficients",null),a([X("inverseCoefficients",["inverseCoeffX","inverseCoeffY"])],c.prototype,"readInverseCoefficients",null),a([z("inverseCoefficients")],c.prototype,"writeInverseCoefficients",null),a([y()],c.prototype,"affectsPixelSize",null),a([S({PolynomialXform:"polynomial"})],c.prototype,"type",void 0),c=g=a([C("esri.layers.support.rasterTransforms.PolynomialTransform")],c);const I=c;export{v as a,b as c,I as y};
